// Code generated by jmx_codegen; DO NOT EDIT.

export type JMXControl = {
  title: string
  dateTime: RFC3339String
  status: string
  editorialOffice: string
  publishingOffice: string[]
}

export type JMXReport = {
  control: JMXControl
  head: JMXIbHead
  meteBody?: JMXMeteBody
  seisBody?: JMXSeisBody
  volcBody?: JMXVolcBody
}

export type JMXEbAreaClass = {
  value: string
  type: string
}

export type JMXEbAxes = {
  axes: JMXEbAxis[]
  longAxes: JMXEbAxis[]
  shortAxes: JMXEbAxis[]
}

export type JMXEbAxis = {
  directions: JMXEbDirection[]
  bearings: JMXEbBearings[]
  radiuses: JMXEbRadius[]
}

export type JMXEbBearings = {
  value: number | null
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type JMXEbCircle = {
  type?: string
  basePoints: JMXEbCoordinate[]
  axes?: JMXEbAxes
}

export type JMXEbClassThresholdOfAverage = {
  thresholdOfMinimum?: JMXEbThreshold
  thresholdOfSignificantlyBelowNormal?: JMXEbThreshold
  thresholdOfBelowNormal?: JMXEbThreshold
  thresholdOfAboveNormal?: JMXEbThreshold
  thresholdOfSignificantlyAboveNormal?: JMXEbThreshold
  thresholdOfMaximum?: JMXEbThreshold
}

export type JMXEbClimateFeature = {
  generalSituationTexts: JMXEbReferableString[]
  significantClimateElements: JMXEbSignificantClimateElement[]
}

export type JMXEbClimateProbabilityValues = {
  kind: string
  refID?: number
  probabilityOfBelowNormal: JMXEbProbability
  probabilityOfNormal: JMXEbProbability
  probabilityOfAboveNormal: JMXEbProbability
}

export type JMXEbComparison = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbCoordinate = {
  value: string
  type?: string
  datum?: "日本測地系"
  condition?: string
  description?: string
}

export type JMXEbDateTime = {
  value: RFC3339String
  type?: string
  significant?: "yyyy" | "yyyy-mm" | "yyyy-mm-dd" | "yyyy-mm-ddThh" | "yyyy-mm-ddThh:mm" | "yyyy-mm-ddThh:mm:ss" | "yyyy-mm-ddThh:mm:ss.sss"
  precision?: string
  dubious?: string
  description?: string
}

export type JMXEbDirection = {
  value: string
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type JMXEbDischarge = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbFloodDepth = {
  value: number | null
  type: string
  unit?: "m"
  bound?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbHumidity = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbIcing = {
  value: string
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbIntensityClass = {
  value: string
  type: string
}

export type JMXEbMagnitude = {
  value: number
  type: string
  condition?: string
  description?: string
}

export type JMXEbPlumeDirection = {
  value: string
  type?: string
  unit?: string
  condition?: string
  description?: string
}

export type JMXEbPlumeHeight = {
  value: number | null
  type?: string
  unit?: string
  condition?: string
  description?: string
}

export type JMXEbPossibilityRankOfWarning = {
  value: string
  type: string
  refID?: number
  condition?: string
}

export type JMXEbPrecipitation = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbPressure = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbProbability = {
  value: number
  unit?: string
  bound?: string
  significant?: boolean
}

export type JMXEbProbabilityOfAftershock = {
  value: number
  type: string
  unit: string
}

export type JMXEbProbabilityOfPrecipitation = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbRadius = {
  value: number | null
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type JMXEbReferableString = {
  value: string
  type?: string
  refID?: number
}

export type JMXEbReliabilityClass = {
  value: string
  type: string
  refID?: number
  condition?: string
}

export type JMXEbReliabilityValue = {
  value: string
  type: string
  refID?: number
  condition?: string
}

export type JMXEbSeaIce = {
  value: string
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbSignificantClimateElement = {
  kind: string
  texts: JMXEbReferableString[]
  probabilityOfBelowNormal?: JMXEbProbability
  probabilityOfNormal?: JMXEbProbability
  probabilityOfAboveNormal?: JMXEbProbability
  probabilityOfSignificantlyBelowNormal?: JMXEbProbability
  probabilityOfSignificantlyAboveNormal?: JMXEbProbability
  thresholdOfBelowNormal?: JMXEbThreshold
  thresholdOfAboveNormal?: JMXEbThreshold
  thresholdOfSignificantlyBelowNormal?: JMXEbThreshold
  thresholdOfSignificantlyAboveNormal?: JMXEbThreshold
}

export type JMXEbSnowDepth = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbSnowfallDepth = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbSolarZenithAngle = {
  value: number
  unit?: "度"
  refID?: number
  condition?: string
}

export type JMXEbSpeed = {
  value: number | null
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type JMXEbSunshine = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbSynopsis = {
  value: string
  type: string
}

export type JMXEbTemperature = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbThreshold = {
  value: number
  type?: string
  unit?: string
  description?: string
  bound?: string
}

export type JMXEbTidalLevel = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbTsunamiHeight = {
  value: number
  type: string
  unit: string
  condition?: string
  description?: string
}

export type JMXEbTyphoonClass = {
  value: string
  type: string
}

export type JMXEbUvIndex = {
  value: number | null
  type?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbVisibility = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWaterLevel = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWaveHeight = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWeather = {
  value: string
  type: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWeatherCode = {
  value: number | null
  type: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWeatherForecastProbability = {
  value: number
  refID?: number
  unit?: string
}

export type JMXEbWindDegree = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWindDirection = {
  value: string
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWindScale = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXEbWindSpeed = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type JMXIbInformation = {
  type: string
  items: JMXIbItem[]
}

export type JMXIbArea = {
  name: string
  code?: string
  circles: JMXEbCircle[]
  coordinates: JMXEbCoordinate[]
  lines: JMXEbCoordinate[]
  polygons: JMXEbCoordinate[]
}

export type JMXIbAreas = {
  codeType: string
  areas: JMXIbArea[]
}

export type JMXIbHead = {
  title: string
  reportDateTime: RFC3339String
  targetDateTime: RFC3339String | null
  targetDTDubious?: string
  targetDuration?: Duration
  validDateTime?: RFC3339String
  eventID: string
  infoType: string
  serial: string
  infoKind: string
  infoKindVersion: string
  headline: JMXIbHeadline
}

export type JMXIbHeadline = {
  text: string
  informations: JMXIbInformation[]
}

export type JMXIbItem = {
  kinds: JMXIbKind[]
  lastKinds: JMXIbKind[]
  areas: JMXIbAreas
}

export type JMXIbKind = {
  name: string
  code?: string
  condition?: string
}

export type JMXMeteAddition = {
  notes: string[]
}

export type JMXMeteAdditionalInfo = {
  observationAddition?: JMXMeteObservationAddition
  climateForecastAddition?: JMXMeteClimateForecastAddition
  floodForecastAddition?: JMXMeteFloodForecastAddition
}

export type JMXMeteArea = {
  codeType?: string
  name: string
  code?: string
  prefecture?: JMXMetePrefectureCity
  prefectureCode?: string
  prefectureList?: string[]
  prefectureCodeList?: string[]
  subPrefecture?: string
  subPrefectureCode?: string
  subPrefectureList?: string[]
  subPrefectureCodeList?: string[]
  city?: JMXMetePrefectureCity
  cityCode?: string
  cityList?: string[]
  cityCodeList?: string[]
  subCity?: string
  subCityCode?: string
  subCityList?: string[]
  subCityCodeList?: string[]
  circles: JMXEbCircle[]
  coordinates: JMXEbCoordinate[]
  lines: JMXEbCoordinate[]
  polygons: JMXEbCoordinate[]
  location?: string
  status?: "付近" | "臨時支援"
}

export type JMXMeteAreas = {
  codeType?: string
  areas: JMXMeteArea[]
}

export type JMXMeteAttention = {
  notes: string[]
}

export type JMXMeteBaseHumidity = {
  timeModifier?: string
  humidities: JMXEbHumidity[]
  locals: JMXMeteLocalHumidity[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseIcing = {
  timeModifier?: string
  icings: JMXEbIcing[]
  locals: JMXMeteLocalIcing[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBasePrecipitation = {
  timeModifier?: string
  precipitations: JMXEbPrecipitation[]
  locals: JMXMeteLocalPrecipitation[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBasePressure = {
  timeModifier?: string
  pressures: JMXEbPressure[]
  locals: JMXMeteLocalPressure[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseSeaIce = {
  timeModifier?: string
  seaIces: JMXEbSeaIce[]
  locals: JMXMeteLocalSeaIce[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseSignificancy = {
  significancies: JMXMeteSignificancy[]
  sentence?: JMXMeteSentence
  peakTime?: JMXMeteForecastTerm
  attention?: JMXMeteAttention
  addition?: JMXMeteAddition
  locals: JMXMeteLocalSignificancy[]
}

export type JMXMeteBaseSnowDepth = {
  snowDepths: JMXEbSnowDepth[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseSnowfallDepth = {
  timeModifier?: string
  snowfallDepths: JMXEbSnowfallDepth[]
  locals: JMXMeteLocalSnowfallDepth[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseSunshine = {
  sunshines: JMXEbSunshine[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseTemperature = {
  timeModifier?: string
  temperatures: JMXEbTemperature[]
  locals: JMXMeteLocalTemperature[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseTidalLevel = {
  timeModifier?: string
  tidalLevels: JMXEbTidalLevel[]
  locals: JMXMeteLocalTidalLevel[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseVisibility = {
  timeModifier?: string
  visibilities: JMXEbVisibility[]
  locals: JMXMeteLocalVisibility[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseWaveHeight = {
  timeModifier?: string
  waveHeights: JMXEbWaveHeight[]
  locals: JMXMeteLocalWaveHeight[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseWeather = {
  timeModifier?: string
  weathers: JMXEbWeather[]
  locals: JMXMeteLocalWeather[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseWind = {
  timeModifier?: string
  windDirections: JMXEbWindDirection[]
  windDegrees: JMXEbWindDegree[]
  windSpeeds: JMXEbWindSpeed[]
  windScales: JMXEbWindScale[]
  locals: JMXMeteLocalWind[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseWindDirection = {
  timeModifier?: string
  windDirections: JMXEbWindDirection[]
  locals: JMXMeteLocalWindDirection[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBaseWindSpeed = {
  timeModifier?: string
  windSpeeds: JMXEbWindSpeed[]
  locals: JMXMeteLocalWindSpeed[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteBody = {
  targetArea?: JMXMeteArea
  notices: string[]
  warnings: JMXMeteWarning[]
  meteorologicalInfos: JMXMeteMeteorologicalInfos[]
  comment?: JMXMeteComment
  officeInfo?: JMXMeteOfficeInfo
  additionalInfo?: JMXMeteAdditionalInfo
}

export type JMXMeteCenterPart = {
  coordinates: JMXEbCoordinate[]
  probabilityCircles: JMXEbCircle[]
  location?: string
  directions: JMXEbDirection[]
  speeds: JMXEbSpeed[]
  pressure?: JMXEbPressure
  radiuses: JMXEbRadius[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteClassPart = {
  typhoonClass?: JMXEbTyphoonClass
  areaClass?: JMXEbAreaClass
  intensityClass?: JMXEbIntensityClass
  time?: RFC3339String
  remark?: string
}

export type JMXMeteClimateForecastAddition = {
  targetDateTimeNotice?: string
  nextForecastSchedules: JMXMeteForecastSchedule[]
  noticeOfSchedule?: string
  additionalNotice?: string
}

export type JMXMeteClimateProbabilityValuesPart = {
  climateProbabilityValues: JMXEbClimateProbabilityValues[]
}

export type JMXMeteClimateValuesPart = {
  type: string
  temperatures: JMXEbTemperature[]
  precipitations: JMXEbPrecipitation[]
  sunshines: JMXEbSunshine[]
  snowfallDepths: JMXEbSnowfallDepth[]
  snowDepths: JMXEbSnowDepth[]
  comparisons: JMXEbComparison[]
  remark?: string
}

export type JMXMeteComment = {
  texts: JMXMeteText[]
  code?: string[]
}

export type JMXMeteCoordinatePart = {
  coordinates: JMXEbCoordinate[]
  lines: JMXEbCoordinate[]
  polygons: JMXEbCoordinate[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteDetailForecast = {
  weatherForecastParts: JMXMeteWeatherForecastPart[]
  precipitationForecastParts: JMXMetePrecipitationPart[]
  snowfallDepthForecastParts: JMXMeteSnowfallDepthPart[]
  windForecastParts: JMXMeteWindForecastPart[]
  waveHeightForecastParts: JMXMeteWaveHeightForecastPart[]
}

export type JMXMeteDischargePart = {
  discharges: JMXEbDischarge[]
}

export type JMXMeteEventDate = {
  value: string
  description?: string
  dubious?: string
}

export type JMXMeteEventDatePart = {
  dates: JMXMeteEventDate[]
  normals: JMXMeteEventDate[]
  lastYears: JMXMeteEventDate[]
  remark?: string
}

export type JMXMeteFiftyKtWindProbabilityPart = {
  fiftyKtWindProbabilities: JMXEbWeatherForecastProbability[]
}

export type JMXMeteFloodAssumptionPart = {
  floodAssumptionArea?: string
  attainmentTime?: JMXEbDateTime
  floodDepths: JMXEbFloodDepth[]
  attainmentDeepestTime?: JMXEbDateTime
}

export type JMXMeteFloodAssumptionTable = {
  area: JMXMeteArea
  floodAssumptionParts: JMXMeteFloodAssumptionPart[]
  remark?: string
}

export type JMXMeteFloodForecastAddition = {
  hydrometricStationParts: JMXMeteHydrometricStationPart[]
}

export type JMXMeteForecastSchedule = {
  target: "１か月予報" | "３か月予報" | "暖候期予報" | "寒候期予報"
  text?: string
  dateTime?: RFC3339String
}

export type JMXMeteForecastTerm = {
  date?: string
  term?: string
}

export type JMXMeteHumidityPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseHumidity
  temporaries: JMXMeteBaseHumidity[]
  becomings: JMXMeteBaseHumidity[]
  subAreas: JMXMeteSubAreaHumidity[]
  humidities: JMXEbHumidity[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteHydrometricStationCriteria = {
  waterLevels: JMXEbWaterLevel[]
  discharges: JMXEbDischarge[]
}

export type JMXMeteHydrometricStationPart = {
  area: JMXMeteArea
  chargeSections: string[]
  criterias: JMXMeteHydrometricStationCriteria[]
  remark?: string
}

export type JMXMeteIcingPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseIcing
  temporaries: JMXMeteBaseIcing[]
  becomings: JMXMeteBaseIcing[]
  subAreas: JMXMeteSubAreaIcing[]
  icings: JMXEbIcing[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteIsobarPart = {
  pressure: JMXEbPressure
  line?: JMXEbCoordinate
  polygon?: JMXEbCoordinate
}

export type JMXMeteItem = {
  kinds: JMXMeteKind[]
  areas?: JMXMeteAreas
  stations?: JMXMeteStations
  area?: JMXMeteArea
  station?: JMXMeteStation
  changeStatus?: "警報・注意報種別に変化有" | "警報・注意報種別に変化無、量的予想事項等に変化有" | "変化無"
  fullStatus?: "全域" | "一部"
  editingMark?: "0" | "1"
  otherReports: string[]
}

export type JMXMeteKind = {
  name?: string
  code?: string
  status?: string
  className?: string
  condition?: string
  lastKind?: JMXMeteNextKind
  nextKinds?: JMXMeteNextKinds
  attention?: JMXMeteAttention
  warningNotice?: JMXMeteWarningNotice
  addition?: JMXMeteAddition
  dateTime?: JMXEbDateTime
  properties: JMXMeteProperty[]
}

export type JMXMeteLocalHumidity = {
  areaName?: string
  sentence?: JMXMeteSentence
  humidities: JMXEbHumidity[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalIcing = {
  areaName?: string
  sentence?: JMXMeteSentence
  icings: JMXEbIcing[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalPrecipitation = {
  areaName?: string
  sentence?: JMXMeteSentence
  precipitations: JMXEbPrecipitation[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalPressure = {
  areaName?: string
  sentence?: JMXMeteSentence
  pressures: JMXEbPressure[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalSeaIce = {
  areaName?: string
  sentence?: JMXMeteSentence
  seaIces: JMXEbSeaIce[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalSignificancy = {
  areaName: string
  significancies: JMXMeteSignificancy[]
  sentence?: JMXMeteSentence
  peakTime?: JMXMeteForecastTerm
  attention?: JMXMeteAttention
  addition?: JMXMeteAddition
}

export type JMXMeteLocalSnowfallDepth = {
  areaName?: string
  sentence?: JMXMeteSentence
  snowfallDepths: JMXEbSnowfallDepth[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalTemperature = {
  areaName?: string
  sentence?: JMXMeteSentence
  temperatures: JMXEbTemperature[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalTidalLevel = {
  areaName?: string
  sentence?: JMXMeteSentence
  tidalLevels: JMXEbTidalLevel[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalVisibility = {
  areaName?: string
  sentence?: JMXMeteSentence
  visibilities: JMXEbVisibility[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalWaveHeight = {
  areaName?: string
  sentence?: JMXMeteSentence
  waveHeights: JMXEbWaveHeight[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalWeather = {
  areaName?: string
  sentence?: JMXMeteSentence
  weathers: JMXEbWeather[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalWind = {
  areaName?: string
  sentence?: JMXMeteSentence
  windDirections: JMXEbWindDirection[]
  windDegrees: JMXEbWindDegree[]
  windSpeeds: JMXEbWindSpeed[]
  windScales: JMXEbWindScale[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalWindDirection = {
  areaName?: string
  sentence?: JMXMeteSentence
  windDirections: JMXEbWindDirection[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteLocalWindSpeed = {
  areaName?: string
  sentence?: JMXMeteSentence
  windSpeeds: JMXEbWindSpeed[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteMeteorologicalInfo = {
  type?: string
  dateTime: JMXEbDateTime
  duration?: Duration
  name?: string
  items: JMXMeteItem[]
}

export type JMXMeteMeteorologicalInfos = {
  type: string
  meteorologicalInfos: JMXMeteMeteorologicalInfo[]
  timeSeriesInfos: JMXMeteTimeSeriesInfo[]
}

export type JMXMeteNextKind = {
  name: string
  code: string
  condition?: string
  dateTime?: JMXEbDateTime
  sentence?: string
}

export type JMXMeteNextKinds = {
  nextKinds: JMXMeteNextKind[]
}

export type JMXMeteObservationAddition = {
  deviationFromNormal?: string
  deviationFromLastYear?: string
  text?: string
}

export type JMXMeteOffice = {
  type: string
  name: string
  code?: string
  contactInfo: string
  uRI?: string
}

export type JMXMeteOfficeInfo = {
  offices: JMXMeteOffice[]
}

export type JMXMetePeriod = {
  startTime?: JMXMeteForecastTerm
  endTime?: JMXMeteForecastTerm
  overTime?: string
  zoneTime?: JMXMeteForecastTerm
}

export type JMXMetePossibilityRankOfWarningPart = {
  possibilityRankOfWarnings: JMXEbPossibilityRankOfWarning[]
}

export type JMXMetePrecipitationPart = {
  refID?: number
  sentence?: JMXMeteSentence
  base?: JMXMeteBasePrecipitation
  temporaries: JMXMeteBasePrecipitation[]
  becomings: JMXMeteBasePrecipitation[]
  subAreas: JMXMeteSubAreaPrecipitation[]
  precipitations: JMXEbPrecipitation[]
  time?: RFC3339String
  remark?: string
}

export type JMXMetePrefectureCity = {
  value: string
  partType?: "全域" | "一部"
}

export type JMXMetePressurePart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBasePressure
  temporaries: JMXMeteBasePressure[]
  becomings: JMXMeteBasePressure[]
  subAreas: JMXMeteSubAreaPressure[]
  pressures: JMXEbPressure[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteProbabilityOfPrecipitationPart = {
  probabilityOfPrecipitations: JMXEbProbabilityOfPrecipitation[]
}

export type JMXMeteProperty = {
  type: string
  significancyParts: JMXMeteSignificancyPart[]
  subsequentSignificancyParts: JMXMeteSignificancyPart[]
  warningPeriod?: JMXMetePeriod
  advisoryPeriod?: JMXMetePeriod
  peakTime?: JMXMeteForecastTerm
  detailForecast?: JMXMeteDetailForecast
  windPart?: JMXMeteWindPart
  windDirectionPart?: JMXMeteWindDirectionPart
  windSpeedPart?: JMXMeteWindSpeedPart
  warningAreaParts: JMXMeteWarningAreaPart[]
  weatherPart?: JMXMeteWeatherPart
  pressurePart?: JMXMetePressurePart
  temperaturePart?: JMXMeteTemperaturePart
  visibilityPart?: JMXMeteVisibilityPart
  synopsisPart?: JMXMeteSynopsisPart
  waveHeightPart?: JMXMeteWaveHeightPart
  precipitationParts: JMXMetePrecipitationPart[]
  snowfallDepthPart?: JMXMeteSnowfallDepthPart
  snowDepthPart?: JMXMeteSnowDepthPart
  humidityParts: JMXMeteHumidityPart[]
  tidalLevelPart?: JMXMeteTidalLevelPart
  sunshinePart?: JMXMeteSunshinePart
  weatherCodePart?: JMXMeteWeatherCodePart
  probabilityOfPrecipitationPart?: JMXMeteProbabilityOfPrecipitationPart
  seaIcePart?: JMXMeteSeaIcePart
  icingPart?: JMXMeteIcingPart
  reliabilityClassPart?: JMXMeteReliabilityClassPart
  reliabilityValuePart?: JMXMeteReliabilityValuePart
  classPart?: JMXMeteClassPart
  possibilityRankOfWarningPart?: JMXMetePossibilityRankOfWarningPart
  typhoonNamePart?: JMXMeteTyphoonNamePart
  centerPart?: JMXMeteCenterPart
  coordinatePart?: JMXMeteCoordinatePart
  isobarPart?: JMXMeteIsobarPart
  waterLevelPart?: JMXMeteWaterLevelPart
  floodAssumptionTable?: JMXMeteFloodAssumptionTable
  dischargePart?: JMXMeteDischargePart
  climateFeatureParts: JMXEbClimateFeature[]
  climateValuesParts: JMXMeteClimateValuesPart[]
  climateProbabilityValuesPart?: JMXMeteClimateProbabilityValuesPart
  eventDatePart?: JMXMeteEventDatePart
  precipitationClassPart?: JMXEbClassThresholdOfAverage
  solarZenithAnglePart?: JMXMeteSolarZenithAnglePart
  uvIndexPart?: JMXMeteUvIndexPart
  fiftyKtWindProbabilityParts: JMXMeteFiftyKtWindProbabilityPart[]
  texts: JMXEbReferableString[]
}

export type JMXMeteReliabilityClassPart = {
  reliabilityClasses: JMXEbReliabilityClass[]
}

export type JMXMeteReliabilityValuePart = {
  reliabilityValues: JMXEbReliabilityValue[]
}

export type JMXMeteSeaIcePart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseSeaIce
  temporaries: JMXMeteBaseSeaIce[]
  becomings: JMXMeteBaseSeaIce[]
  subAreas: JMXMeteSubAreaSeaIce[]
  seaIces: JMXEbSeaIce[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSentence = {
  value: string
  type?: string
}

export type JMXMeteSignificancy = {
  type: string
  refID?: number
  name: string
  code: string
  condition?: string
  remark?: string
}

export type JMXMeteSignificancyPart = {
  base: JMXMeteBaseSignificancy
}

export type JMXMeteSnowDepthPart = {
  base?: JMXMeteBaseSnowDepth
  snowDepths: JMXEbSnowDepth[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSnowfallDepthPart = {
  refID?: number
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseSnowfallDepth
  temporaries: JMXMeteBaseSnowfallDepth[]
  becomings: JMXMeteBaseSnowfallDepth[]
  subAreas: JMXMeteSubAreaSnowfallDepth[]
  snowfallDepths: JMXEbSnowfallDepth[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSolarZenithAnglePart = {
  solarZenithAngles: JMXEbSolarZenithAngle[]
}

export type JMXMeteStation = {
  name: string
  codes: JMXMeteStationCode[]
  location?: string
  status?: "構内" | "付近" | "臨時支援"
  coordinates: JMXEbCoordinate[]
}

export type JMXMeteStationCode = {
  value: string
  type?: string
}

export type JMXMeteStations = {
  codeType?: string
  stations: JMXMeteStation[]
}

export type JMXMeteSubAreaHumidity = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseHumidity
  temporaries: JMXMeteBaseHumidity[]
  becomings: JMXMeteBaseHumidity[]
  locals: JMXMeteLocalHumidity[]
  humidities: JMXEbHumidity[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaIcing = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseIcing
  temporaries: JMXMeteBaseIcing[]
  becomings: JMXMeteBaseIcing[]
  locals: JMXMeteLocalIcing[]
  icings: JMXEbIcing[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaPrecipitation = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBasePrecipitation
  temporaries: JMXMeteBasePrecipitation[]
  becomings: JMXMeteBasePrecipitation[]
  locals: JMXMeteLocalPrecipitation[]
  precipitations: JMXEbPrecipitation[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaPressure = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBasePressure
  temporaries: JMXMeteBasePressure[]
  becomings: JMXMeteBasePressure[]
  locals: JMXMeteLocalPressure[]
  pressures: JMXEbPressure[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaSeaIce = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseSeaIce
  temporaries: JMXMeteBaseSeaIce[]
  becomings: JMXMeteBaseSeaIce[]
  locals: JMXMeteLocalSeaIce[]
  seaIces: JMXEbSeaIce[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaSnowfallDepth = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseSnowfallDepth
  temporaries: JMXMeteBaseSnowfallDepth[]
  becomings: JMXMeteBaseSnowfallDepth[]
  locals: JMXMeteLocalSnowfallDepth[]
  snowfallDepths: JMXEbSnowfallDepth[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaTemperature = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseTemperature
  temporaries: JMXMeteBaseTemperature[]
  becomings: JMXMeteBaseTemperature[]
  locals: JMXMeteLocalTemperature[]
  temperatures: JMXEbTemperature[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaTidalLevel = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseTidalLevel
  temporaries: JMXMeteBaseTidalLevel[]
  becomings: JMXMeteBaseTidalLevel[]
  locals: JMXMeteLocalTidalLevel[]
  tidalLevels: JMXEbTidalLevel[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaVisibility = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseVisibility
  temporaries: JMXMeteBaseVisibility[]
  becomings: JMXMeteBaseVisibility[]
  locals: JMXMeteLocalVisibility[]
  visibilities: JMXEbVisibility[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaWaveHeight = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWaveHeight
  temporaries: JMXMeteBaseWaveHeight[]
  becomings: JMXMeteBaseWaveHeight[]
  locals: JMXMeteLocalWaveHeight[]
  waveHeights: JMXEbWaveHeight[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaWeather = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWeather
  temporaries: JMXMeteBaseWeather[]
  becomings: JMXMeteBaseWeather[]
  locals: JMXMeteLocalWeather[]
  weathers: JMXEbWeather[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaWind = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWind
  temporaries: JMXMeteBaseWind[]
  becomings: JMXMeteBaseWind[]
  locals: JMXMeteLocalWind[]
  windDirections: JMXEbWindDirection[]
  windDegrees: JMXEbWindDegree[]
  windSpeeds: JMXEbWindSpeed[]
  windScales: JMXEbWindScale[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaWindDirection = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWindDirection
  temporaries: JMXMeteBaseWindDirection[]
  becomings: JMXMeteBaseWindDirection[]
  locals: JMXMeteLocalWindDirection[]
  windDirections: JMXEbWindDirection[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSubAreaWindSpeed = {
  areaName?: string
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWindSpeed
  temporaries: JMXMeteBaseWindSpeed[]
  becomings: JMXMeteBaseWindSpeed[]
  locals: JMXMeteLocalWindSpeed[]
  windSpeeds: JMXEbWindSpeed[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSunshinePart = {
  base?: JMXMeteBaseSunshine
  sunshines: JMXEbSunshine[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteSynopsisPart = {
  synopses: JMXEbSynopsis[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteTemperaturePart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseTemperature
  temporaries: JMXMeteBaseTemperature[]
  becomings: JMXMeteBaseTemperature[]
  subAreas: JMXMeteSubAreaTemperature[]
  temperatures: JMXEbTemperature[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteText = {
  value: string
  type: string
}

export type JMXMeteTidalLevelPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseTidalLevel
  temporaries: JMXMeteBaseTidalLevel[]
  becomings: JMXMeteBaseTidalLevel[]
  subAreas: JMXMeteSubAreaTidalLevel[]
  tidalLevels: JMXEbTidalLevel[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteTimeDefine = {
  timeId: number
  dateTime: JMXEbDateTime
  duration?: Duration
  name?: string
}

export type JMXMeteTimeDefines = {
  timeDefines: JMXMeteTimeDefine[]
}

export type JMXMeteTimeSeriesInfo = {
  timeDefines: JMXMeteTimeDefines
  items: JMXMeteItem[]
}

export type JMXMeteTyphoonNamePart = {
  name?: string
  nameKana?: string
  number?: string
  time?: RFC3339String
  remark?: string
}

export type JMXMeteUvIndexPart = {
  uvIndexes: JMXEbUvIndex[]
  text?: string
}

export type JMXMeteVisibilityPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseVisibility
  temporaries: JMXMeteBaseVisibility[]
  becomings: JMXMeteBaseVisibility[]
  subAreas: JMXMeteSubAreaVisibility[]
  visibilities: JMXEbVisibility[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWarning = {
  type: string
  items: JMXMeteItem[]
}

export type JMXMeteWarningAreaPart = {
  type: string
  windSpeeds: JMXEbWindSpeed[]
  circle: JMXEbCircle
}

export type JMXMeteWarningNotice = {
  startTime: JMXMeteForecastTerm
  note: string
}

export type JMXMeteWaterLevelPart = {
  waterLevels: JMXEbWaterLevel[]
}

export type JMXMeteWaveHeightForecastPart = {
  refID: number
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWaveHeight
  temporaries: JMXMeteBaseWaveHeight[]
  becomings: JMXMeteBaseWaveHeight[]
  subAreas: JMXMeteSubAreaWaveHeight[]
  waveHeights: JMXEbWaveHeight[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWaveHeightPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWaveHeight
  temporaries: JMXMeteBaseWaveHeight[]
  becomings: JMXMeteBaseWaveHeight[]
  subAreas: JMXMeteSubAreaWaveHeight[]
  waveHeights: JMXEbWaveHeight[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWeatherCodePart = {
  weatherCodes: JMXEbWeatherCode[]
}

export type JMXMeteWeatherForecastPart = {
  refID: number
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWeather
  temporaries: JMXMeteBaseWeather[]
  becomings: JMXMeteBaseWeather[]
  subAreas: JMXMeteSubAreaWeather[]
  weathers: JMXEbWeather[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWeatherPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWeather
  temporaries: JMXMeteBaseWeather[]
  becomings: JMXMeteBaseWeather[]
  subAreas: JMXMeteSubAreaWeather[]
  weathers: JMXEbWeather[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWindDirectionPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWindDirection
  temporaries: JMXMeteBaseWindDirection[]
  becomings: JMXMeteBaseWindDirection[]
  subAreas: JMXMeteSubAreaWindDirection[]
  windDirections: JMXEbWindDirection[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWindForecastPart = {
  refID: number
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWind
  temporaries: JMXMeteBaseWind[]
  becomings: JMXMeteBaseWind[]
  subAreas: JMXMeteSubAreaWind[]
  windDirections: JMXEbWindDirection[]
  windSpeeds: JMXEbWindSpeed[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWindPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWind
  temporaries: JMXMeteBaseWind[]
  becomings: JMXMeteBaseWind[]
  subAreas: JMXMeteSubAreaWind[]
  windDirections: JMXEbWindDirection[]
  windDegrees: JMXEbWindDegree[]
  windSpeeds: JMXEbWindSpeed[]
  windScales: JMXEbWindScale[]
  time?: RFC3339String
  remark?: string
}

export type JMXMeteWindSpeedLevel = {
  value: number | null
  type: "風速階級"
  refID: number
  description?: string
  range: string[]
}

export type JMXMeteWindSpeedPart = {
  sentence?: JMXMeteSentence
  base?: JMXMeteBaseWindSpeed
  temporaries: JMXMeteBaseWindSpeed[]
  becomings: JMXMeteBaseWindSpeed[]
  subAreas: JMXMeteSubAreaWindSpeed[]
  windSpeeds: JMXEbWindSpeed[]
  windSpeedLevels: JMXMeteWindSpeedLevel[]
  time?: RFC3339String
  remark?: string
}

export type JMXSeisAccuracy = {
  epicenter: JMXSeisAccuracyEpicenter
  depth: JMXSeisAccuracyDepth
  magnitudeCalculation: JMXSeisAccuracyMagnitude
  numberOfMagnitudeCalculation: number
}

export type JMXSeisAccuracyDepth = {
  value: number
  rank: number
}

export type JMXSeisAccuracyEpicenter = {
  value: number
  rank: number
  rank2: number
}

export type JMXSeisAccuracyMagnitude = {
  value: number
  rank: number
}

export type JMXSeisAftershockItem = {
  startTime: RFC3339String
  endTime: RFC3339String
  probabilityOfAftershock: JMXEbProbabilityOfAftershock
  targetMagnitude: JMXEbMagnitude
  text?: string
}

export type JMXSeisAftershocks = {
  items: JMXSeisAftershockItem[]
  text?: string
}

export type JMXSeisBody = {
  naming?: JMXSeisNaming
  tsunami?: JMXSeisTsunami
  earthquakes: JMXSeisEarthquake[]
  intensity?: JMXSeisIntensity
  tokai?: JMXSeisTokai
  earthquakeInfo?: JMXSeisEarthquakeInfo
  earthquakeCount?: JMXSeisEarthquakeCount
  aftershock?: JMXSeisAftershocks
  text?: string
  nextAdvisory?: string
  comments?: JMXSeisComment
}

export type JMXSeisCategory = {
  kind: JMXSeisKind
  lastKind?: JMXSeisKind
}

export type JMXSeisCodeDefine = {
  types: JMXSeisCodeDefineType[]
}

export type JMXSeisCodeDefineType = {
  value: string
  xpath: string
}

export type JMXSeisComment = {
  warningComment?: JMXSeisCommentForm
  forecastComment?: JMXSeisCommentForm
  observationComment?: JMXSeisCommentForm
  varComment?: JMXSeisCommentForm
  freeFormComment?: string
  uRI?: string
}

export type JMXSeisCommentForm = {
  codeType: string
  text: string
  code: string[]
}

export type JMXSeisCountData = {
  type: string
  startTime: RFC3339String
  endTime: RFC3339String
  number: number
  feltNumber: number
  condition?: string
}

export type JMXSeisCurrentHeight = {
  startTime?: RFC3339String
  endTime?: RFC3339String
  condition?: string
  tsunamiHeight?: JMXEbTsunamiHeight
}

export type JMXSeisEarthquake = {
  originTime?: RFC3339String
  arrivalTime: RFC3339String
  condition?: string
  hypocenter?: JMXSeisHypocenter
  magnitudes: JMXEbMagnitude[]
}

export type JMXSeisEarthquakeCount = {
  items: JMXSeisCountData[]
}

export type JMXSeisEarthquakeInfo = {
  type: string
  infoKind: string
  infoSerial?: JMXSeisInfoSerial
  text: string
  appendix?: string
}

export type JMXSeisFirstHeight = {
  arrivalTimeFrom?: RFC3339String
  arrivalTimeTo?: RFC3339String
  arrivalTime?: RFC3339String
  condition?: string
  initial?: string
  tsunamiHeight?: JMXEbTsunamiHeight
  revise?: string
  period?: number
}

export type JMXSeisForecastArea = {
  name: string
  code: string
  cities: JMXSeisForecastCity[]
}

export type JMXSeisForecastCity = {
  name: string
  code: string
}

export type JMXSeisForecastInt = {
  bound?: string
  from?: string
  to?: string
}

export type JMXSeisForecastLgInt = {
  bound?: string
  from?: string
  to?: string
}

export type JMXSeisHypoArea = {
  name: string
  code: JMXSeisHypoAreaCode
  coordinates: JMXEbCoordinate[]
  reduceName?: string
  reduceCode?: JMXSeisHypoAreaReduceCode
  detailedName?: string
  detailedCode?: JMXSeisHypoAreaDetailedCode
  nameFromMark?: string
  markCode?: JMXSeisHypoAreaMarkCode
  direction?: string
  distance?: JMXSeisHypoAreaDistance
  landOrSea?: "内陸" | "海域"
}

export type JMXSeisHypoAreaCode = {
  value: string
  type: string
}

export type JMXSeisHypoAreaDetailedCode = {
  value: string
  type: string
}

export type JMXSeisHypoAreaDistance = {
  value: number
  unit: string
}

export type JMXSeisHypoAreaMarkCode = {
  value: string
  type: string
}

export type JMXSeisHypoAreaReduceCode = {
  value: string
  type: string
}

export type JMXSeisHypocenter = {
  area: JMXSeisHypoArea
  source?: string
  accuracy?: JMXSeisAccuracy
}

export type JMXSeisInfoSerial = {
  codeType: string
  name: string
  code: string
}

export type JMXSeisIntensity = {
  forecast?: JMXSeisIntensityDetail
  observation?: JMXSeisIntensityDetail
}

export type JMXSeisIntensityAppendix = {
  maxIntChange: number
  maxLgIntChange?: number
  maxIntChangeReason: number
  maxLgIntChangeReason?: number
}

export type JMXSeisIntensityArea = {
  name: string
  code: string
  category?: JMXSeisCategory
  maxInt?: string
  maxLgInt?: string
  forecastInt?: JMXSeisForecastInt
  forecastLgInt?: JMXSeisForecastLgInt
  arrivalTime?: RFC3339String
  condition?: string
  revise?: string
  cities: JMXSeisIntensityCity[]
  intensityStations: JMXSeisIntensityStation[]
}

export type JMXSeisIntensityCity = {
  name: string
  code: string
  category?: JMXSeisCategory
  maxInt?: string
  maxLgInt?: string
  forecastInt?: JMXSeisForecastInt
  forecastLgInt?: JMXSeisForecastLgInt
  arrivalTime?: RFC3339String
  condition?: string
  revise?: string
  intensityStations: JMXSeisIntensityStation[]
}

export type JMXSeisIntensityDetail = {
  codeDefine?: JMXSeisCodeDefine
  maxInt?: string
  maxLgInt?: string
  lgCategory?: string
  forecastInt?: JMXSeisForecastInt
  forecastLgInt?: JMXSeisForecastLgInt
  appendix?: JMXSeisIntensityAppendix
  prefs: JMXSeisIntensityPref[]
}

export type JMXSeisIntensityPref = {
  name: string
  code: string
  category?: JMXSeisCategory
  maxInt?: string
  maxLgInt?: string
  forecastInt?: JMXSeisForecastInt
  forecastLgInt?: JMXSeisForecastLgInt
  arrivalTime?: RFC3339String
  condition?: string
  revise?: string
  areas: JMXSeisIntensityArea[]
}

export type JMXSeisIntensityStation = {
  name: string
  code: string
  int?: string
  k?: number
  lgInt?: string
  lgIntPerPeriods: JMXSeisLgIntPerPeriod[]
  sva?: JMXSeisSva
  svaPerPeriods: JMXSeisSvaPerPeriod[]
  revise?: string
}

export type JMXSeisKind = {
  name: string
  code: string
}

export type JMXSeisLgIntPerPeriod = {
  value: string
  periodicBand?: number
  period?: number
  periodUnit?: string
}

export type JMXSeisMaxHeight = {
  dateTime?: RFC3339String
  condition?: string
  tsunamiHeightFrom?: JMXEbTsunamiHeight
  tsunamiHeightTo?: JMXEbTsunamiHeight
  tsunamiHeight?: JMXEbTsunamiHeight
  revise?: string
  period?: number
}

export type JMXSeisNaming = {
  value: string
  english?: string
}

export type JMXSeisSva = {
  value: number
  unit: string
}

export type JMXSeisSvaPerPeriod = {
  value: number
  unit: string
  periodicBand?: number
  period?: number
  periodUnit?: string
}

export type JMXSeisTokai = {
  infoKind: string
  infoSerial?: JMXSeisInfoSerial
  text: string
}

export type JMXSeisTsunami = {
  release?: string
  observation?: JMXSeisTsunamiDetail
  estimation?: JMXSeisTsunamiDetail
  forecast?: JMXSeisTsunamiDetail
}

export type JMXSeisTsunamiDetail = {
  codeDefine?: JMXSeisCodeDefine
  items: JMXSeisTsunamiItem[]
}

export type JMXSeisTsunamiItem = {
  area: JMXSeisForecastArea
  category?: JMXSeisCategory
  firstHeight?: JMXSeisFirstHeight
  maxHeight?: JMXSeisMaxHeight
  duration?: Duration
  stations: JMXSeisTsunamiStation[]
}

export type JMXSeisTsunamiStation = {
  name: string
  code: string
  sensor?: string
  highTideDateTime?: RFC3339String
  firstHeight: JMXSeisFirstHeight
  maxHeight?: JMXSeisMaxHeight
  currentHeight?: JMXSeisCurrentHeight
}

export type JMXVolcBody = {
  notice?: string
  volcanoInfos: JMXVolcVolcanoInfo[]
  ashInfos?: JMXVolcAshInfos
  volcanoInfoContent?: JMXVolcVolcanoInfoContent
  volcanoObservation?: JMXVolcVolcanoObservation
  text?: string
}

export type JMXVolcArea = {
  name: string
  code: string
  coordinate?: JMXEbCoordinate
  areaFromMark?: string
  craterName?: string
  craterCoordinate?: JMXEbCoordinate
}

export type JMXVolcAreas = {
  codeType: string
  areas: JMXVolcArea[]
}

export type JMXVolcAshInfo = {
  type: string
  startTime: RFC3339String
  endTime: RFC3339String
  items: JMXVolcItem[]
}

export type JMXVolcAshInfos = {
  type: string
  ashInfos: JMXVolcAshInfo[]
}

export type JMXVolcDistance = {
  value: string
  type?: string
  unit?: string
  description?: string
}

export type JMXVolcEventTime = {
  eventDateTime?: JMXEbDateTime
  eventDateTimeUTC?: JMXEbDateTime
  eventDateTimeComment?: string
}

export type JMXVolcItem = {
  eventTime?: JMXVolcEventTime
  kind: JMXVolcKind
  lastKind?: JMXVolcKind
  areas: JMXVolcAreas
}

export type JMXVolcKind = {
  name: string
  formalName?: string
  code?: string
  condition?: string
  property?: JMXVolcProperty
}

export type JMXVolcPlume = {
  plumeHeightAboveCrater: JMXEbPlumeHeight
  plumeHeightAboveSeaLevel?: JMXEbPlumeHeight
  plumeDirection: JMXEbPlumeDirection
  plumeComment?: string
}

export type JMXVolcProperty = {
  size?: JMXVolcSize
  polygons: JMXEbCoordinate[]
  plumeDirection: JMXEbPlumeDirection
  distance: JMXVolcDistance
  remark?: string
}

export type JMXVolcSize = {
  value: number | null
  type?: string
  unit?: string
}

export type JMXVolcVolcanoInfo = {
  type: string
  items: JMXVolcItem[]
}

export type JMXVolcVolcanoInfoContent = {
  volcanoHeadline?: string
  volcanoActivity?: string
  volcanoPrevention?: string
  nextAdvisory?: string
  otherInfo?: string
  appendix?: string
  text?: string
}

export type JMXVolcVolcanoObservation = {
  eventTime?: JMXVolcEventTime
  colorPlume?: JMXVolcPlume
  whitePlume?: JMXVolcPlume
  otherObservation?: string
  appendix?: string
}


type RFC3339String = string

// ISO8601 の Duration を表す
export type Duration = {
  y?: number   // Year
  m?: number   // Month
  w?: number   // Week
  d?: number   // Day
  th?: number  // Hour
  tm?: number  // Minute
  ts?: number  // Second
}
