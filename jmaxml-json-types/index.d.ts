// Code generated by jmx_codegen; DO NOT EDIT.

export type Control = {
  title: string
  dateTime: ISO8601String
  status: string
  editorialOffice: string
  publishingOffices: string[]
}

export type EbAreaClass = {
  value: string
  type: string
}

export type EbAxes = {
  axes?: EbAxis[]
  longAxes?: EbAxis[]
  shortAxes?: EbAxis[]
}

export type EbAxis = {
  directions?: EbDirection[]
  bearings?: EbBearings[]
  radiuses: EbRadius[]
}

export type EbBearings = {
  value: number | null
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type EbCircle = {
  type?: string
  basePoints?: EbCoordinate[]
  axes?: EbAxes
}

export type EbClassThresholdOfAverage = {
  thresholdOfMinimum?: EbThreshold
  thresholdOfSignificantlyBelowNormal?: EbThreshold
  thresholdOfBelowNormal?: EbThreshold
  thresholdOfAboveNormal?: EbThreshold
  thresholdOfSignificantlyAboveNormal?: EbThreshold
  thresholdOfMaximum?: EbThreshold
}

export type EbClimateFeature = {
  generalSituationTexts?: EbReferableString[]
  significantClimateElements?: EbSignificantClimateElement[]
}

export type EbClimateProbabilityValues = {
  kind: string
  refID?: number
  probabilityOfBelowNormal: EbProbability
  probabilityOfNormal: EbProbability
  probabilityOfAboveNormal: EbProbability
}

export type EbComparison = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbCoordinate = {
  value: string
  type?: string
  datum?: "日本測地系"
  condition?: string
  description?: string
}

export type EbDateTime = {
  value: ISO8601String
  type?: string
  significant?: "yyyy" | "yyyy-mm" | "yyyy-mm-dd" | "yyyy-mm-ddThh" | "yyyy-mm-ddThh:mm" | "yyyy-mm-ddThh:mm:ss" | "yyyy-mm-ddThh:mm:ss.sss"
  precision?: string
  dubious?: string
  description?: string
}

export type EbDirection = {
  value: string
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type EbDischarge = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbFloodDepth = {
  value: number | null
  type: string
  unit?: "m"
  bound?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbHumidity = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbIcing = {
  value: string
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbIntensityClass = {
  value: string
  type: string
}

export type EbMagnitude = {
  value: number | null
  type: string
  condition?: string
  description?: string
}

export type EbPlumeDirection = {
  value: string
  type?: string
  unit?: string
  condition?: string
  description?: string
}

export type EbPlumeHeight = {
  value: number | null
  type?: string
  unit?: string
  condition?: string
  description?: string
}

export type EbPossibilityRankOfWarning = {
  value: string
  type: string
  refID?: number
  condition?: string
}

export type EbPrecipitation = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbPressure = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbProbability = {
  value: number | null
  unit?: string
  bound?: string
  significant?: boolean
}

export type EbProbabilityOfAftershock = {
  value: number | null
  type: string
  unit: string
}

export type EbProbabilityOfPrecipitation = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbRadius = {
  value: number | null
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type EbReferableString = {
  value: string
  type?: string
  refID?: number
}

export type EbReliabilityClass = {
  value: string
  type: string
  refID?: number
  condition?: string
}

export type EbReliabilityValue = {
  value: string
  type: string
  refID?: number
  condition?: string
}

export type EbSeaIce = {
  value: string
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbSignificantClimateElement = {
  kind: string
  texts: EbReferableString[]
  probabilityOfBelowNormal?: EbProbability
  probabilityOfNormal?: EbProbability
  probabilityOfAboveNormal?: EbProbability
  probabilityOfSignificantlyBelowNormal?: EbProbability
  probabilityOfSignificantlyAboveNormal?: EbProbability
  thresholdOfBelowNormal?: EbThreshold
  thresholdOfAboveNormal?: EbThreshold
  thresholdOfSignificantlyBelowNormal?: EbThreshold
  thresholdOfSignificantlyAboveNormal?: EbThreshold
}

export type EbSnowDepth = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbSnowfallDepth = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbSolarZenithAngle = {
  value: number | null
  unit?: "度"
  refID?: number
  condition?: string
}

export type EbSpeed = {
  value: number | null
  type: string
  unit?: string
  condition?: string
  description?: string
}

export type EbSunshine = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbSynopsis = {
  value: string
  type: string
}

export type EbTemperature = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbThreshold = {
  value: number | null
  type?: string
  unit?: string
  description?: string
  bound?: string
}

export type EbTidalLevel = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbTsunamiHeight = {
  value: number | null
  type: string
  unit: string
  condition?: string
  description?: string
}

export type EbTyphoonClass = {
  value: string
  type: string
}

export type EbUvIndex = {
  value: number | null
  type?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbVisibility = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWaterLevel = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWaveHeight = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWeather = {
  value: string
  type: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWeatherCode = {
  value: number | null
  type: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWeatherForecastProbability = {
  value: number | null
  refID?: number
  unit?: string
}

export type EbWindDegree = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWindDirection = {
  value: string
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWindScale = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type EbWindSpeed = {
  value: number | null
  type: string
  unit?: string
  refID?: number
  condition?: string
  description?: string
}

export type IbInformation = {
  type: string
  items: IbItem[]
}

export type IbArea = {
  name: string
  code?: string
  circles?: EbCircle[]
  coordinates?: EbCoordinate[]
  lines?: EbCoordinate[]
  polygons?: EbCoordinate[]
}

export type IbAreas = {
  codeType: string
  areas: IbArea[]
}

export type IbHead = {
  title: string
  reportDateTime: ISO8601String
  targetDateTime: ISO8601String | null
  targetDTDubious?: string
  targetDuration?: Duration
  validDateTime?: ISO8601String
  eventID: string
  infoType: string
  serial: string
  infoKind: string
  infoKindVersion: string
  headline: IbHeadline
}

export type IbHeadline = {
  text: string
  informations?: IbInformation[]
}

export type IbItem = {
  kinds: IbKind[]
  lastKinds?: IbKind[]
  areas: IbAreas
}

export type IbKind = {
  name: string
  code?: string
  condition?: string
}

export type MeteAddition = {
  notes: string[]
}

export type MeteAdditionalInfo = {
  observationAddition?: MeteObservationAddition
  climateForecastAddition?: MeteClimateForecastAddition
  floodForecastAddition?: MeteFloodForecastAddition
}

export type MeteArea = {
  codeType?: string
  name: string
  code?: string
  prefecture?: MetePrefectureCity
  prefectureCode?: string
  prefectureList?: string[]
  prefectureCodeList?: string[]
  subPrefecture?: string
  subPrefectureCode?: string
  subPrefectureList?: string[]
  subPrefectureCodeList?: string[]
  city?: MetePrefectureCity
  cityCode?: string
  cityList?: string[]
  cityCodeList?: string[]
  subCity?: string
  subCityCode?: string
  subCityList?: string[]
  subCityCodeList?: string[]
  circles?: EbCircle[]
  coordinates?: EbCoordinate[]
  lines?: EbCoordinate[]
  polygons?: EbCoordinate[]
  location?: string
  status?: "付近" | "臨時支援"
}

export type MeteAreas = {
  codeType?: string
  areas: MeteArea[]
}

export type MeteAttention = {
  notes: string[]
}

export type MeteBaseHumidity = {
  timeModifier?: string
  humidities?: EbHumidity[]
  locals?: MeteLocalHumidity[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseIcing = {
  timeModifier?: string
  icings?: EbIcing[]
  locals?: MeteLocalIcing[]
  time?: ISO8601String
  remark?: string
}

export type MeteBasePrecipitation = {
  timeModifier?: string
  precipitations?: EbPrecipitation[]
  locals?: MeteLocalPrecipitation[]
  time?: ISO8601String
  remark?: string
}

export type MeteBasePressure = {
  timeModifier?: string
  pressures?: EbPressure[]
  locals?: MeteLocalPressure[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseSeaIce = {
  timeModifier?: string
  seaIces?: EbSeaIce[]
  locals?: MeteLocalSeaIce[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseSignificancy = {
  significancies?: MeteSignificancy[]
  sentence?: MeteSentence
  peakTime?: MeteForecastTerm
  attention?: MeteAttention
  addition?: MeteAddition
  locals?: MeteLocalSignificancy[]
}

export type MeteBaseSnowDepth = {
  snowDepths?: EbSnowDepth[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseSnowfallDepth = {
  timeModifier?: string
  snowfallDepths?: EbSnowfallDepth[]
  locals?: MeteLocalSnowfallDepth[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseSunshine = {
  sunshines?: EbSunshine[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseTemperature = {
  timeModifier?: string
  temperatures?: EbTemperature[]
  locals?: MeteLocalTemperature[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseTidalLevel = {
  timeModifier?: string
  tidalLevels?: EbTidalLevel[]
  locals?: MeteLocalTidalLevel[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseVisibility = {
  timeModifier?: string
  visibilities?: EbVisibility[]
  locals?: MeteLocalVisibility[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseWaveHeight = {
  timeModifier?: string
  waveHeights?: EbWaveHeight[]
  locals?: MeteLocalWaveHeight[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseWeather = {
  timeModifier?: string
  weathers?: EbWeather[]
  locals?: MeteLocalWeather[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseWind = {
  timeModifier?: string
  windDirections?: EbWindDirection[]
  windDegrees?: EbWindDegree[]
  windSpeeds?: EbWindSpeed[]
  windScales?: EbWindScale[]
  locals?: MeteLocalWind[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseWindDirection = {
  timeModifier?: string
  windDirections?: EbWindDirection[]
  locals?: MeteLocalWindDirection[]
  time?: ISO8601String
  remark?: string
}

export type MeteBaseWindSpeed = {
  timeModifier?: string
  windSpeeds?: EbWindSpeed[]
  locals?: MeteLocalWindSpeed[]
  time?: ISO8601String
  remark?: string
}

export type MeteBody = {
  targetArea?: MeteArea
  notices?: string[]
  warnings?: MeteWarning[]
  meteorologicalInfos?: MeteMeteorologicalInfos[]
  comment?: MeteComment
  officeInfo?: MeteOfficeInfo
  additionalInfo?: MeteAdditionalInfo
}

export type MeteCenterPart = {
  coordinates?: EbCoordinate[]
  probabilityCircles?: EbCircle[]
  location?: string
  directions?: EbDirection[]
  speeds?: EbSpeed[]
  pressure?: EbPressure
  radiuses?: EbRadius[]
  time?: ISO8601String
  remark?: string
}

export type MeteClassPart = {
  typhoonClass?: EbTyphoonClass
  areaClass?: EbAreaClass
  intensityClass?: EbIntensityClass
  time?: ISO8601String
  remark?: string
}

export type MeteClimateForecastAddition = {
  targetDateTimeNotice?: string
  nextForecastSchedules?: MeteForecastSchedule[]
  noticeOfSchedule?: string
  additionalNotice?: string
}

export type MeteClimateProbabilityValuesPart = {
  climateProbabilityValues: EbClimateProbabilityValues[]
}

export type MeteClimateValuesPart = {
  type: string
  temperatures?: EbTemperature[]
  precipitations?: EbPrecipitation[]
  sunshines?: EbSunshine[]
  snowfallDepths?: EbSnowfallDepth[]
  snowDepths?: EbSnowDepth[]
  comparisons?: EbComparison[]
  remark?: string
}

export type MeteComment = {
  texts: MeteText[]
  codes?: string[]
}

export type MeteCoordinatePart = {
  coordinates?: EbCoordinate[]
  lines?: EbCoordinate[]
  polygons?: EbCoordinate[]
  time?: ISO8601String
  remark?: string
}

export type MeteDetailForecast = {
  weatherForecastParts?: MeteWeatherForecastPart[]
  precipitationForecastParts?: MetePrecipitationPart[]
  snowfallDepthForecastParts?: MeteSnowfallDepthPart[]
  windForecastParts?: MeteWindForecastPart[]
  waveHeightForecastParts?: MeteWaveHeightForecastPart[]
}

export type MeteDischargePart = {
  discharges?: EbDischarge[]
}

export type MeteEventDate = {
  value: string
  description?: string
  dubious?: string
}

export type MeteEventDatePart = {
  dates?: MeteEventDate[]
  normals?: MeteEventDate[]
  lastYears?: MeteEventDate[]
  remark?: string
}

export type MeteFiftyKtWindProbabilityPart = {
  fiftyKtWindProbabilities: EbWeatherForecastProbability[]
}

export type MeteFloodAssumptionPart = {
  floodAssumptionArea?: string
  attainmentTime?: EbDateTime
  floodDepths?: EbFloodDepth[]
  attainmentDeepestTime?: EbDateTime
}

export type MeteFloodAssumptionTable = {
  area: MeteArea
  floodAssumptionParts?: MeteFloodAssumptionPart[]
  remark?: string
}

export type MeteFloodForecastAddition = {
  hydrometricStationParts: MeteHydrometricStationPart[]
}

export type MeteForecastSchedule = {
  target: "１か月予報" | "３か月予報" | "暖候期予報" | "寒候期予報"
  text?: string
  dateTime?: ISO8601String
}

export type MeteForecastTerm = {
  date?: string
  term?: string
}

export type MeteHumidityPart = {
  sentence?: MeteSentence
  base?: MeteBaseHumidity
  temporaries?: MeteBaseHumidity[]
  becomings?: MeteBaseHumidity[]
  subAreas?: MeteSubAreaHumidity[]
  humidities?: EbHumidity[]
  time?: ISO8601String
  remark?: string
}

export type MeteHydrometricStationCriteria = {
  waterLevels?: EbWaterLevel[]
  discharges?: EbDischarge[]
}

export type MeteHydrometricStationPart = {
  area: MeteArea
  chargeSections?: string[]
  criterias: MeteHydrometricStationCriteria[]
  remark?: string
}

export type MeteIcingPart = {
  sentence?: MeteSentence
  base?: MeteBaseIcing
  temporaries?: MeteBaseIcing[]
  becomings?: MeteBaseIcing[]
  subAreas?: MeteSubAreaIcing[]
  icings?: EbIcing[]
  time?: ISO8601String
  remark?: string
}

export type MeteIsobarPart = {
  pressure: EbPressure
  line?: EbCoordinate
  polygon?: EbCoordinate
}

export type MeteItem = {
  kinds: MeteKind[]
  areas?: MeteAreas
  stations?: MeteStations
  area?: MeteArea
  station?: MeteStation
  changeStatus?: "警報・注意報種別に変化有" | "警報・注意報種別に変化無、量的予想事項等に変化有" | "変化無"
  fullStatus?: "全域" | "一部"
  editingMark?: "0" | "1"
  otherReports?: string[]
}

export type MeteKind = {
  name?: string
  code?: string
  status?: string
  className?: string
  condition?: string
  lastKind?: MeteNextKind
  nextKinds?: MeteNextKinds
  attention?: MeteAttention
  warningNotice?: MeteWarningNotice
  addition?: MeteAddition
  dateTime?: EbDateTime
  properties?: MeteProperty[]
}

export type MeteLocalHumidity = {
  areaName?: string
  sentence?: MeteSentence
  humidities?: EbHumidity[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalIcing = {
  areaName?: string
  sentence?: MeteSentence
  icings?: EbIcing[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalPrecipitation = {
  areaName?: string
  sentence?: MeteSentence
  precipitations?: EbPrecipitation[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalPressure = {
  areaName?: string
  sentence?: MeteSentence
  pressures?: EbPressure[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalSeaIce = {
  areaName?: string
  sentence?: MeteSentence
  seaIces?: EbSeaIce[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalSignificancy = {
  areaName: string
  significancies?: MeteSignificancy[]
  sentence?: MeteSentence
  peakTime?: MeteForecastTerm
  attention?: MeteAttention
  addition?: MeteAddition
}

export type MeteLocalSnowfallDepth = {
  areaName?: string
  sentence?: MeteSentence
  snowfallDepths?: EbSnowfallDepth[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalTemperature = {
  areaName?: string
  sentence?: MeteSentence
  temperatures?: EbTemperature[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalTidalLevel = {
  areaName?: string
  sentence?: MeteSentence
  tidalLevels?: EbTidalLevel[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalVisibility = {
  areaName?: string
  sentence?: MeteSentence
  visibilities?: EbVisibility[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalWaveHeight = {
  areaName?: string
  sentence?: MeteSentence
  waveHeights?: EbWaveHeight[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalWeather = {
  areaName?: string
  sentence?: MeteSentence
  weathers?: EbWeather[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalWind = {
  areaName?: string
  sentence?: MeteSentence
  windDirections?: EbWindDirection[]
  windDegrees?: EbWindDegree[]
  windSpeeds?: EbWindSpeed[]
  windScales?: EbWindScale[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalWindDirection = {
  areaName?: string
  sentence?: MeteSentence
  windDirections?: EbWindDirection[]
  time?: ISO8601String
  remark?: string
}

export type MeteLocalWindSpeed = {
  areaName?: string
  sentence?: MeteSentence
  windSpeeds?: EbWindSpeed[]
  time?: ISO8601String
  remark?: string
}

export type MeteMeteorologicalInfo = {
  type?: string
  dateTime: EbDateTime
  duration?: Duration
  name?: string
  items: MeteItem[]
}

export type MeteMeteorologicalInfos = {
  type: string
  meteorologicalInfos?: MeteMeteorologicalInfo[]
  timeSeriesInfos?: MeteTimeSeriesInfo[]
}

export type MeteNextKind = {
  name: string
  code: string
  condition?: string
  dateTime?: EbDateTime
  sentence?: string
}

export type MeteNextKinds = {
  nextKinds: MeteNextKind[]
}

export type MeteObservationAddition = {
  deviationFromNormal?: string
  deviationFromLastYear?: string
  text?: string
}

export type MeteOffice = {
  type: string
  name: string
  code?: string
  contactInfo: string
  uRI?: string
}

export type MeteOfficeInfo = {
  offices: MeteOffice[]
}

export type MetePeriod = {
  startTime?: MeteForecastTerm
  endTime?: MeteForecastTerm
  overTime?: string
  zoneTime?: MeteForecastTerm
}

export type MetePossibilityRankOfWarningPart = {
  possibilityRankOfWarnings: EbPossibilityRankOfWarning[]
}

export type MetePrecipitationPart = {
  refID?: number
  sentence?: MeteSentence
  base?: MeteBasePrecipitation
  temporaries?: MeteBasePrecipitation[]
  becomings?: MeteBasePrecipitation[]
  subAreas?: MeteSubAreaPrecipitation[]
  precipitations?: EbPrecipitation[]
  time?: ISO8601String
  remark?: string
}

export type MetePrefectureCity = {
  value: string
  partType?: "全域" | "一部"
}

export type MetePressurePart = {
  sentence?: MeteSentence
  base?: MeteBasePressure
  temporaries?: MeteBasePressure[]
  becomings?: MeteBasePressure[]
  subAreas?: MeteSubAreaPressure[]
  pressures?: EbPressure[]
  time?: ISO8601String
  remark?: string
}

export type MeteProbabilityOfPrecipitationPart = {
  probabilityOfPrecipitations: EbProbabilityOfPrecipitation[]
}

export type MeteProperty = {
  type: string
  significancyParts?: MeteSignificancyPart[]
  subsequentSignificancyParts?: MeteSignificancyPart[]
  warningPeriod?: MetePeriod
  advisoryPeriod?: MetePeriod
  peakTime?: MeteForecastTerm
  detailForecast?: MeteDetailForecast
  windPart?: MeteWindPart
  windDirectionPart?: MeteWindDirectionPart
  windSpeedPart?: MeteWindSpeedPart
  warningAreaParts?: MeteWarningAreaPart[]
  weatherPart?: MeteWeatherPart
  pressurePart?: MetePressurePart
  temperaturePart?: MeteTemperaturePart
  visibilityPart?: MeteVisibilityPart
  synopsisPart?: MeteSynopsisPart
  waveHeightPart?: MeteWaveHeightPart
  precipitationParts?: MetePrecipitationPart[]
  snowfallDepthPart?: MeteSnowfallDepthPart
  snowDepthPart?: MeteSnowDepthPart
  humidityParts?: MeteHumidityPart[]
  tidalLevelPart?: MeteTidalLevelPart
  sunshinePart?: MeteSunshinePart
  weatherCodePart?: MeteWeatherCodePart
  probabilityOfPrecipitationPart?: MeteProbabilityOfPrecipitationPart
  seaIcePart?: MeteSeaIcePart
  icingPart?: MeteIcingPart
  reliabilityClassPart?: MeteReliabilityClassPart
  reliabilityValuePart?: MeteReliabilityValuePart
  classPart?: MeteClassPart
  possibilityRankOfWarningPart?: MetePossibilityRankOfWarningPart
  typhoonNamePart?: MeteTyphoonNamePart
  centerPart?: MeteCenterPart
  coordinatePart?: MeteCoordinatePart
  isobarPart?: MeteIsobarPart
  waterLevelPart?: MeteWaterLevelPart
  floodAssumptionTable?: MeteFloodAssumptionTable
  dischargePart?: MeteDischargePart
  climateFeatureParts?: EbClimateFeature[]
  climateValuesParts?: MeteClimateValuesPart[]
  climateProbabilityValuesPart?: MeteClimateProbabilityValuesPart
  eventDatePart?: MeteEventDatePart
  precipitationClassPart?: EbClassThresholdOfAverage
  solarZenithAnglePart?: MeteSolarZenithAnglePart
  uvIndexPart?: MeteUvIndexPart
  fiftyKtWindProbabilityParts?: MeteFiftyKtWindProbabilityPart[]
  texts?: EbReferableString[]
}

export type MeteReliabilityClassPart = {
  reliabilityClasses: EbReliabilityClass[]
}

export type MeteReliabilityValuePart = {
  reliabilityValues: EbReliabilityValue[]
}

export type MeteSeaIcePart = {
  sentence?: MeteSentence
  base?: MeteBaseSeaIce
  temporaries?: MeteBaseSeaIce[]
  becomings?: MeteBaseSeaIce[]
  subAreas?: MeteSubAreaSeaIce[]
  seaIces?: EbSeaIce[]
  time?: ISO8601String
  remark?: string
}

export type MeteSentence = {
  value: string
  type?: string
}

export type MeteSignificancy = {
  type: string
  refID?: number
  name: string
  code: string
  condition?: string
  remark?: string
}

export type MeteSignificancyPart = {
  base: MeteBaseSignificancy
}

export type MeteSnowDepthPart = {
  base?: MeteBaseSnowDepth
  snowDepths?: EbSnowDepth[]
  time?: ISO8601String
  remark?: string
}

export type MeteSnowfallDepthPart = {
  refID?: number
  sentence?: MeteSentence
  base?: MeteBaseSnowfallDepth
  temporaries?: MeteBaseSnowfallDepth[]
  becomings?: MeteBaseSnowfallDepth[]
  subAreas?: MeteSubAreaSnowfallDepth[]
  snowfallDepths?: EbSnowfallDepth[]
  time?: ISO8601String
  remark?: string
}

export type MeteSolarZenithAnglePart = {
  solarZenithAngles: EbSolarZenithAngle[]
}

export type MeteStation = {
  name: string
  codes: MeteStationCode[]
  location?: string
  status?: "構内" | "付近" | "臨時支援"
  coordinates?: EbCoordinate[]
}

export type MeteStationCode = {
  value: string
  type?: string
}

export type MeteStations = {
  codeType?: string
  stations: MeteStation[]
}

export type MeteSubAreaHumidity = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseHumidity
  temporaries?: MeteBaseHumidity[]
  becomings?: MeteBaseHumidity[]
  locals?: MeteLocalHumidity[]
  humidities?: EbHumidity[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaIcing = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseIcing
  temporaries?: MeteBaseIcing[]
  becomings?: MeteBaseIcing[]
  locals?: MeteLocalIcing[]
  icings?: EbIcing[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaPrecipitation = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBasePrecipitation
  temporaries?: MeteBasePrecipitation[]
  becomings?: MeteBasePrecipitation[]
  locals?: MeteLocalPrecipitation[]
  precipitations?: EbPrecipitation[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaPressure = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBasePressure
  temporaries?: MeteBasePressure[]
  becomings?: MeteBasePressure[]
  locals?: MeteLocalPressure[]
  pressures?: EbPressure[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaSeaIce = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseSeaIce
  temporaries?: MeteBaseSeaIce[]
  becomings?: MeteBaseSeaIce[]
  locals?: MeteLocalSeaIce[]
  seaIces?: EbSeaIce[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaSnowfallDepth = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseSnowfallDepth
  temporaries?: MeteBaseSnowfallDepth[]
  becomings?: MeteBaseSnowfallDepth[]
  locals?: MeteLocalSnowfallDepth[]
  snowfallDepths?: EbSnowfallDepth[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaTemperature = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseTemperature
  temporaries?: MeteBaseTemperature[]
  becomings?: MeteBaseTemperature[]
  locals?: MeteLocalTemperature[]
  temperatures?: EbTemperature[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaTidalLevel = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseTidalLevel
  temporaries?: MeteBaseTidalLevel[]
  becomings?: MeteBaseTidalLevel[]
  locals?: MeteLocalTidalLevel[]
  tidalLevels?: EbTidalLevel[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaVisibility = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseVisibility
  temporaries?: MeteBaseVisibility[]
  becomings?: MeteBaseVisibility[]
  locals?: MeteLocalVisibility[]
  visibilities?: EbVisibility[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaWaveHeight = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseWaveHeight
  temporaries?: MeteBaseWaveHeight[]
  becomings?: MeteBaseWaveHeight[]
  locals?: MeteLocalWaveHeight[]
  waveHeights?: EbWaveHeight[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaWeather = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseWeather
  temporaries?: MeteBaseWeather[]
  becomings?: MeteBaseWeather[]
  locals?: MeteLocalWeather[]
  weathers?: EbWeather[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaWind = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseWind
  temporaries?: MeteBaseWind[]
  becomings?: MeteBaseWind[]
  locals?: MeteLocalWind[]
  windDirections?: EbWindDirection[]
  windDegrees?: EbWindDegree[]
  windSpeeds?: EbWindSpeed[]
  windScales?: EbWindScale[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaWindDirection = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseWindDirection
  temporaries?: MeteBaseWindDirection[]
  becomings?: MeteBaseWindDirection[]
  locals?: MeteLocalWindDirection[]
  windDirections?: EbWindDirection[]
  time?: ISO8601String
  remark?: string
}

export type MeteSubAreaWindSpeed = {
  areaName?: string
  sentence?: MeteSentence
  base?: MeteBaseWindSpeed
  temporaries?: MeteBaseWindSpeed[]
  becomings?: MeteBaseWindSpeed[]
  locals?: MeteLocalWindSpeed[]
  windSpeeds?: EbWindSpeed[]
  time?: ISO8601String
  remark?: string
}

export type MeteSunshinePart = {
  base?: MeteBaseSunshine
  sunshines?: EbSunshine[]
  time?: ISO8601String
  remark?: string
}

export type MeteSynopsisPart = {
  synopses: EbSynopsis[]
  time?: ISO8601String
  remark?: string
}

export type MeteTemperaturePart = {
  sentence?: MeteSentence
  base?: MeteBaseTemperature
  temporaries?: MeteBaseTemperature[]
  becomings?: MeteBaseTemperature[]
  subAreas?: MeteSubAreaTemperature[]
  temperatures?: EbTemperature[]
  time?: ISO8601String
  remark?: string
}

export type MeteText = {
  value: string
  type: string
}

export type MeteTidalLevelPart = {
  sentence?: MeteSentence
  base?: MeteBaseTidalLevel
  temporaries?: MeteBaseTidalLevel[]
  becomings?: MeteBaseTidalLevel[]
  subAreas?: MeteSubAreaTidalLevel[]
  tidalLevels?: EbTidalLevel[]
  time?: ISO8601String
  remark?: string
}

export type MeteTimeDefine = {
  timeId: number
  dateTime: EbDateTime
  duration?: Duration
  name?: string
}

export type MeteTimeDefines = {
  timeDefines: MeteTimeDefine[]
}

export type MeteTimeSeriesInfo = {
  timeDefines: MeteTimeDefines
  items: MeteItem[]
}

export type MeteTyphoonNamePart = {
  name?: string
  nameKana?: string
  number?: string
  time?: ISO8601String
  remark?: string
}

export type MeteUvIndexPart = {
  uvIndexes: EbUvIndex[]
  text?: string
}

export type MeteVisibilityPart = {
  sentence?: MeteSentence
  base?: MeteBaseVisibility
  temporaries?: MeteBaseVisibility[]
  becomings?: MeteBaseVisibility[]
  subAreas?: MeteSubAreaVisibility[]
  visibilities?: EbVisibility[]
  time?: ISO8601String
  remark?: string
}

export type MeteWarning = {
  type: string
  items: MeteItem[]
}

export type MeteWarningAreaPart = {
  type: string
  windSpeeds: EbWindSpeed[]
  circle: EbCircle
}

export type MeteWarningNotice = {
  startTime: MeteForecastTerm
  note: string
}

export type MeteWaterLevelPart = {
  waterLevels?: EbWaterLevel[]
}

export type MeteWaveHeightForecastPart = {
  refID: number
  sentence?: MeteSentence
  base?: MeteBaseWaveHeight
  temporaries?: MeteBaseWaveHeight[]
  becomings?: MeteBaseWaveHeight[]
  subAreas?: MeteSubAreaWaveHeight[]
  waveHeights?: EbWaveHeight[]
  time?: ISO8601String
  remark?: string
}

export type MeteWaveHeightPart = {
  sentence?: MeteSentence
  base?: MeteBaseWaveHeight
  temporaries?: MeteBaseWaveHeight[]
  becomings?: MeteBaseWaveHeight[]
  subAreas?: MeteSubAreaWaveHeight[]
  waveHeights?: EbWaveHeight[]
  time?: ISO8601String
  remark?: string
}

export type MeteWeatherCodePart = {
  weatherCodes: EbWeatherCode[]
}

export type MeteWeatherForecastPart = {
  refID: number
  sentence?: MeteSentence
  base?: MeteBaseWeather
  temporaries?: MeteBaseWeather[]
  becomings?: MeteBaseWeather[]
  subAreas?: MeteSubAreaWeather[]
  weathers?: EbWeather[]
  time?: ISO8601String
  remark?: string
}

export type MeteWeatherPart = {
  sentence?: MeteSentence
  base?: MeteBaseWeather
  temporaries?: MeteBaseWeather[]
  becomings?: MeteBaseWeather[]
  subAreas?: MeteSubAreaWeather[]
  weathers?: EbWeather[]
  time?: ISO8601String
  remark?: string
}

export type MeteWindDirectionPart = {
  sentence?: MeteSentence
  base?: MeteBaseWindDirection
  temporaries?: MeteBaseWindDirection[]
  becomings?: MeteBaseWindDirection[]
  subAreas?: MeteSubAreaWindDirection[]
  windDirections?: EbWindDirection[]
  time?: ISO8601String
  remark?: string
}

export type MeteWindForecastPart = {
  refID: number
  sentence?: MeteSentence
  base?: MeteBaseWind
  temporaries?: MeteBaseWind[]
  becomings?: MeteBaseWind[]
  subAreas?: MeteSubAreaWind[]
  windDirections?: EbWindDirection[]
  windSpeeds?: EbWindSpeed[]
  time?: ISO8601String
  remark?: string
}

export type MeteWindPart = {
  sentence?: MeteSentence
  base?: MeteBaseWind
  temporaries?: MeteBaseWind[]
  becomings?: MeteBaseWind[]
  subAreas?: MeteSubAreaWind[]
  windDirections?: EbWindDirection[]
  windDegrees?: EbWindDegree[]
  windSpeeds?: EbWindSpeed[]
  windScales?: EbWindScale[]
  time?: ISO8601String
  remark?: string
}

export type MeteWindSpeedLevel = {
  value: number | null
  type: "風速階級"
  refID: number
  description?: string
  ranges: string[]
}

export type MeteWindSpeedPart = {
  sentence?: MeteSentence
  base?: MeteBaseWindSpeed
  temporaries?: MeteBaseWindSpeed[]
  becomings?: MeteBaseWindSpeed[]
  subAreas?: MeteSubAreaWindSpeed[]
  windSpeeds?: EbWindSpeed[]
  windSpeedLevels?: MeteWindSpeedLevel[]
  time?: ISO8601String
  remark?: string
}

export type SeisAccuracy = {
  epicenter: SeisAccuracyEpicenter
  depth: SeisAccuracyDepth
  magnitudeCalculation: SeisAccuracyMagnitude
  numberOfMagnitudeCalculation: number
}

export type SeisAccuracyDepth = {
  value: number | null
  rank: number
}

export type SeisAccuracyEpicenter = {
  value: number | null
  rank: number
  rank2: number
}

export type SeisAccuracyMagnitude = {
  value: number | null
  rank: number
}

export type SeisAftershockItem = {
  startTime: ISO8601String
  endTime: ISO8601String
  probabilityOfAftershock: EbProbabilityOfAftershock
  targetMagnitude: EbMagnitude
  text?: string
}

export type SeisAftershocks = {
  items: SeisAftershockItem[]
  text?: string
}

export type SeisBody = {
  naming?: SeisNaming
  tsunami?: SeisTsunami
  earthquakes?: SeisEarthquake[]
  intensity?: SeisIntensity
  tokai?: SeisTokai
  earthquakeInfo?: SeisEarthquakeInfo
  earthquakeCount?: SeisEarthquakeCount
  aftershock?: SeisAftershocks
  text?: string
  nextAdvisory?: string
  comments?: SeisComment
}

export type SeisCategory = {
  kind: SeisKind
  lastKind?: SeisKind
}

export type SeisCodeDefine = {
  types: SeisCodeDefineType[]
}

export type SeisCodeDefineType = {
  value: string
  xpath: string
}

export type SeisComment = {
  warningComment?: SeisCommentForm
  forecastComment?: SeisCommentForm
  observationComment?: SeisCommentForm
  varComment?: SeisCommentForm
  freeFormComment?: string
  uRI?: string
}

export type SeisCommentForm = {
  codeType: string
  text: string
  codes: string[]
}

export type SeisCountData = {
  type: string
  startTime: ISO8601String
  endTime: ISO8601String
  number: number
  feltNumber: number
  condition?: string
}

export type SeisCurrentHeight = {
  startTime?: ISO8601String
  endTime?: ISO8601String
  condition?: string
  tsunamiHeight?: EbTsunamiHeight
}

export type SeisEarthquake = {
  originTime?: ISO8601String
  arrivalTime: ISO8601String
  condition?: string
  hypocenter?: SeisHypocenter
  magnitudes: EbMagnitude[]
}

export type SeisEarthquakeCount = {
  items: SeisCountData[]
}

export type SeisEarthquakeInfo = {
  type: string
  infoKind: string
  infoSerial?: SeisInfoSerial
  text: string
  appendix?: string
}

export type SeisFirstHeight = {
  arrivalTimeFrom?: ISO8601String
  arrivalTimeTo?: ISO8601String
  arrivalTime?: ISO8601String
  condition?: string
  initial?: string
  tsunamiHeight?: EbTsunamiHeight
  revise?: string
  period?: number | null
}

export type SeisForecastArea = {
  name: string
  code: string
  cities?: SeisForecastCity[]
}

export type SeisForecastCity = {
  name: string
  code: string
}

export type SeisForecastInt = {
  bound?: string
  from?: string
  to?: string
}

export type SeisForecastLgInt = {
  bound?: string
  from?: string
  to?: string
}

export type SeisHypoArea = {
  name: string
  code: SeisHypoAreaCode
  coordinates: EbCoordinate[]
  reduceName?: string
  reduceCode?: SeisHypoAreaReduceCode
  detailedName?: string
  detailedCode?: SeisHypoAreaDetailedCode
  nameFromMark?: string
  markCode?: SeisHypoAreaMarkCode
  direction?: string
  distance?: SeisHypoAreaDistance
  landOrSea?: "内陸" | "海域"
}

export type SeisHypoAreaCode = {
  value: string
  type: string
}

export type SeisHypoAreaDetailedCode = {
  value: string
  type: string
}

export type SeisHypoAreaDistance = {
  value: number
  unit: string
}

export type SeisHypoAreaMarkCode = {
  value: string
  type: string
}

export type SeisHypoAreaReduceCode = {
  value: string
  type: string
}

export type SeisHypocenter = {
  area: SeisHypoArea
  source?: string
  accuracy?: SeisAccuracy
}

export type SeisInfoSerial = {
  codeType: string
  name: string
  code: string
}

export type SeisIntensity = {
  forecast?: SeisIntensityDetail
  observation?: SeisIntensityDetail
}

export type SeisIntensityAppendix = {
  maxIntChange: number
  maxLgIntChange?: number
  maxIntChangeReason: number
  maxLgIntChangeReason?: number
}

export type SeisIntensityArea = {
  name: string
  code: string
  category?: SeisCategory
  maxInt?: string
  maxLgInt?: string
  forecastInt?: SeisForecastInt
  forecastLgInt?: SeisForecastLgInt
  arrivalTime?: ISO8601String
  condition?: string
  revise?: string
  cities?: SeisIntensityCity[]
  intensityStations?: SeisIntensityStation[]
}

export type SeisIntensityCity = {
  name: string
  code: string
  category?: SeisCategory
  maxInt?: string
  maxLgInt?: string
  forecastInt?: SeisForecastInt
  forecastLgInt?: SeisForecastLgInt
  arrivalTime?: ISO8601String
  condition?: string
  revise?: string
  intensityStations?: SeisIntensityStation[]
}

export type SeisIntensityDetail = {
  codeDefine?: SeisCodeDefine
  maxInt?: string
  maxLgInt?: string
  lgCategory?: string
  forecastInt?: SeisForecastInt
  forecastLgInt?: SeisForecastLgInt
  appendix?: SeisIntensityAppendix
  prefs?: SeisIntensityPref[]
}

export type SeisIntensityPref = {
  name: string
  code: string
  category?: SeisCategory
  maxInt?: string
  maxLgInt?: string
  forecastInt?: SeisForecastInt
  forecastLgInt?: SeisForecastLgInt
  arrivalTime?: ISO8601String
  condition?: string
  revise?: string
  areas?: SeisIntensityArea[]
}

export type SeisIntensityStation = {
  name: string
  code: string
  int?: string
  k?: number | null
  lgInt?: string
  lgIntPerPeriods?: SeisLgIntPerPeriod[]
  sva?: SeisSva
  svaPerPeriods?: SeisSvaPerPeriod[]
  revise?: string
}

export type SeisKind = {
  name: string
  code: string
}

export type SeisLgIntPerPeriod = {
  value: string
  periodicBand?: number
  period?: number | null
  periodUnit?: string
}

export type SeisMaxHeight = {
  dateTime?: ISO8601String
  condition?: string
  tsunamiHeightFrom?: EbTsunamiHeight
  tsunamiHeightTo?: EbTsunamiHeight
  tsunamiHeight?: EbTsunamiHeight
  revise?: string
  period?: number | null
}

export type SeisNaming = {
  value: string
  english?: string
}

export type SeisSva = {
  value: number | null
  unit: string
}

export type SeisSvaPerPeriod = {
  value: number | null
  unit: string
  periodicBand?: number
  period?: number | null
  periodUnit?: string
}

export type SeisTokai = {
  infoKind: string
  infoSerial?: SeisInfoSerial
  text: string
}

export type SeisTsunami = {
  release?: string
  observation?: SeisTsunamiDetail
  estimation?: SeisTsunamiDetail
  forecast?: SeisTsunamiDetail
}

export type SeisTsunamiDetail = {
  codeDefine?: SeisCodeDefine
  items: SeisTsunamiItem[]
}

export type SeisTsunamiItem = {
  area: SeisForecastArea
  category?: SeisCategory
  firstHeight?: SeisFirstHeight
  maxHeight?: SeisMaxHeight
  duration?: Duration
  stations?: SeisTsunamiStation[]
}

export type SeisTsunamiStation = {
  name: string
  code: string
  sensor?: string
  highTideDateTime?: ISO8601String
  firstHeight: SeisFirstHeight
  maxHeight?: SeisMaxHeight
  currentHeight?: SeisCurrentHeight
}

export type VolcBody = {
  notice?: string
  volcanoInfos?: VolcVolcanoInfo[]
  ashInfos?: VolcAshInfos
  volcanoInfoContent?: VolcVolcanoInfoContent
  volcanoObservation?: VolcVolcanoObservation
  text?: string
}

export type VolcArea = {
  name: string
  code: string
  coordinate?: EbCoordinate
  areaFromMark?: string
  craterName?: string
  craterCoordinate?: EbCoordinate
}

export type VolcAreas = {
  codeType: string
  areas: VolcArea[]
}

export type VolcAshInfo = {
  type: string
  startTime: ISO8601String
  endTime: ISO8601String
  items: VolcItem[]
}

export type VolcAshInfos = {
  type: string
  ashInfos: VolcAshInfo[]
}

export type VolcDistance = {
  value: string
  type?: string
  unit?: string
  description?: string
}

export type VolcEventTime = {
  eventDateTime?: EbDateTime
  eventDateTimeUTC?: EbDateTime
  eventDateTimeComment?: string
}

export type VolcItem = {
  eventTime?: VolcEventTime
  kind: VolcKind
  lastKind?: VolcKind
  areas: VolcAreas
}

export type VolcKind = {
  name: string
  formalName?: string
  code?: string
  condition?: string
  property?: VolcProperty
}

export type VolcPlume = {
  plumeHeightAboveCrater: EbPlumeHeight
  plumeHeightAboveSeaLevel?: EbPlumeHeight
  plumeDirection: EbPlumeDirection
  plumeComment?: string
}

export type VolcProperty = {
  size?: VolcSize
  polygons: EbCoordinate[]
  plumeDirection: EbPlumeDirection
  distance: VolcDistance
  remark?: string
}

export type VolcSize = {
  value: number | null
  type?: string
  unit?: string
}

export type VolcVolcanoInfo = {
  type: string
  items: VolcItem[]
}

export type VolcVolcanoInfoContent = {
  volcanoHeadline?: string
  volcanoActivity?: string
  volcanoPrevention?: string
  nextAdvisory?: string
  otherInfo?: string
  appendix?: string
  text?: string
}

export type VolcVolcanoObservation = {
  eventTime?: VolcEventTime
  colorPlume?: VolcPlume
  whitePlume?: VolcPlume
  windAboveCrater?: VolcWindAboveCrater
  otherObservation?: string
  appendix?: string
}

export type VolcWindAboveCrater = {
  dateTime: EbDateTime
  windAboveCraterElementses?: VolcWindAboveCraterElements[]
}

export type VolcWindAboveCraterElements = {
  heightProperty?: string
  description?: string
  windHeightAboveSeaLevel: EbPlumeHeight
  windDegree: EbWindDegree
  windSpeed: EbWindSpeed
}


/** RFC3339 (RFC3339) Date Time */
export type ISO8601String = string;

/** ISO8601 Duration */
export type Duration = string;

/** Report document */
export type Report = {
  control: Control;
  head: IbHead;
  meteBody? : MeteBody;
  seisBody? : SeisBody;
  volcBody? : VolcBody;
};
