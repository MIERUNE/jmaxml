// Code generated by jmx_codegen; DO NOT EDIT.

use serde::{Deserialize, Deserializer, Serialize};

pub use super::builtins::*;

fn trim_string<'de, D>(deserializer: D) -> Result<String, D::Error>
where
    D: Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    Ok(s.trim_ascii_start().trim_end().to_string())
}

fn trim_opt_string<'de, D>(deserializer: D) -> Result<Option<String>, D::Error>
where
    D: Deserializer<'de>,
{
    let s = Option::<String>::deserialize(deserializer)?;
    match s {
        Some(s) => Ok(Some(s.trim_ascii_start().trim_end().to_string())),
        None => Ok(None),
    }
}

fn float_or_null<'de, D>(deserializer: D) -> Result<f64, D::Error>
where
    D: Deserializer<'de>,
{
    let v = Option::<f64>::deserialize(deserializer)?;
    Ok(v.unwrap_or(f64::NAN))
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Control {
    /// 情報名称
    ///
    /// 電文の種別を示すための情報名称を示す。
    #[serde(alias = "Title", rename = "title", deserialize_with = "trim_string")]
    pub title: String,
    /// 発表時刻
    ///
    /// 発表時刻。実発表時刻と異なってよいが、未来時刻にはならない。
    #[serde(alias = "DateTime", rename = "dateTime")]
    pub date_time: DateTime,
    /// 運用種別
    ///
    /// 本情報の位置づけ。
    #[serde(alias = "Status", rename = "status")]
    pub status: String,
    /// 編集官署名
    ///
    /// 実際に発表作業を行った「編集官署名」を示す。
    #[serde(
        alias = "EditorialOffice",
        rename = "editorialOffice",
        deserialize_with = "trim_string"
    )]
    pub editorial_office: String,
    /// 発表官署名
    ///
    /// 本情報を業務的に発表した発表官署名を示す。xs:list型で複数表記される。
    #[serde(alias = "PublishingOffice", rename = "publishingOffices")]
    pub publishing_offices: StringList,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbAreaClass {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbAxes {
    /// 軸
    #[serde(
        alias = "Axis",
        rename = "axes",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub axes: Vec<EbAxis>,
    /// 長軸
    #[serde(
        alias = "LongAxis",
        rename = "longAxes",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub long_axes: Vec<EbAxis>,
    /// 短軸
    #[serde(
        alias = "ShortAxis",
        rename = "shortAxes",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub short_axes: Vec<EbAxis>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbAxis {
    /// 方向
    ///
    /// 軸の方向（8方位、16方位で利用）
    #[serde(
        alias = "Direction",
        rename = "directions",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub directions: Vec<EbDirection>,
    /// 方向
    ///
    /// 軸の方向（36方位で利用）
    #[serde(
        alias = "Bearings",
        rename = "bearings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub bearings: Vec<EbBearings>,
    /// 半径
    ///
    /// 軸の半径
    #[serde(alias = "Radius", rename = "radiuses")]
    pub radiuses: Vec<EbRadius>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbBearings {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<i64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbCircle {
    /// 分類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 基点
    ///
    /// 円の基点
    #[serde(
        alias = "BasePoint",
        rename = "basePoints",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub base_points: Vec<EbCoordinate>,
    /// 軸
    ///
    /// 基点からの軸群を示す
    #[serde(
        alias = "Axes",
        rename = "axes",
        skip_serializing_if = "Option::is_none"
    )]
    pub axes: Option<EbAxes>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbClassThresholdOfAverage {
    /// かなり低い（少ない）ときの最小値
    #[serde(
        alias = "ThresholdOfMinimum",
        rename = "thresholdOfMinimum",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_minimum: Option<EbThreshold>,
    /// 平年よりかなり低い（少ない）となる閾値
    #[serde(
        alias = "ThresholdOfSignificantlyBelowNormal",
        rename = "thresholdOfSignificantlyBelowNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_below_normal: Option<EbThreshold>,
    /// 平年より低い（少ない）となる閾値
    #[serde(
        alias = "ThresholdOfBelowNormal",
        rename = "thresholdOfBelowNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_below_normal: Option<EbThreshold>,
    /// 平年より高い（多い）となる閾値
    #[serde(
        alias = "ThresholdOfAboveNormal",
        rename = "thresholdOfAboveNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_above_normal: Option<EbThreshold>,
    /// 平年よりかなり高い（多い）となる閾値
    #[serde(
        alias = "ThresholdOfSignificantlyAboveNormal",
        rename = "thresholdOfSignificantlyAboveNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_above_normal: Option<EbThreshold>,
    /// かなり高い（多い）となるときの最大値
    #[serde(
        alias = "ThresholdOfMaximum",
        rename = "thresholdOfMaximum",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_maximum: Option<EbThreshold>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbClimateFeature {
    /// 天候表現平文
    ///
    /// 出現の可能性が最も大きい天候
    #[serde(
        alias = "GeneralSituationText",
        rename = "generalSituationTexts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub general_situation_texts: Vec<EbReferableString>,
    /// 特徴のある気温、降水量、日照時間等の確率
    #[serde(
        alias = "SignificantClimateElement",
        rename = "significantClimateElements",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significant_climate_elements: Vec<EbSignificantClimateElement>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbClimateProbabilityValues {
    /// 対象気象要素
    #[serde(alias = "@kind", rename = "kind")]
    pub kind: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 平年より低い（少ない）確率
    #[serde(
        alias = "ProbabilityOfBelowNormal",
        rename = "probabilityOfBelowNormal"
    )]
    pub probability_of_below_normal: EbProbability,
    /// 平年並の確率
    #[serde(alias = "ProbabilityOfNormal", rename = "probabilityOfNormal")]
    pub probability_of_normal: EbProbability,
    /// 平年より高い（多い）確率
    #[serde(
        alias = "ProbabilityOfAboveNormal",
        rename = "probabilityOfAboveNormal"
    )]
    pub probability_of_above_normal: EbProbability,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbComparison {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbCoordinate {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    ///
    /// 地理空間情報の分類を示す。
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 測地系
    ///
    /// 測地系を示す（日本測地系の場合のみ表現する）。
    #[serde(
        alias = "@datum",
        rename = "datum",
        skip_serializing_if = "Option::is_none"
    )]
    pub datum: Option<String>,
    /// 状態
    ///
    /// 震源がごく浅い場合などで例外的な状態を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbDateTime {
    #[serde(alias = "$text", rename = "value")]
    pub value: DateTime,
    /// 分類
    ///
    /// 時刻の分類を示す。
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 有効桁
    ///
    /// 時刻の有効部分（「"年月日時"まで」など）を示す。
    #[serde(
        alias = "@significant",
        rename = "significant",
        skip_serializing_if = "Option::is_none"
    )]
    pub significant: Option<String>,
    /// 正確さ
    ///
    /// 時刻の幅（「日頃」など）を示す。
    #[serde(
        alias = "@precision",
        rename = "precision",
        skip_serializing_if = "Option::is_none"
    )]
    pub precision: Option<String>,
    /// あいまいさ
    ///
    /// 時刻のあいまいさ（時刻の幅で示せない場合）を示す。
    #[serde(
        alias = "@dubious",
        rename = "dubious",
        skip_serializing_if = "Option::is_none"
    )]
    pub dubious: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbDirection {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbDischarge {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「正常」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbFloodDepth {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 補足情報
    ///
    /// 補足する情報を示す
    #[serde(
        alias = "@bound",
        rename = "bound",
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbHumidity {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbIcing {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbIntensityClass {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbMagnitude {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// M種別
    ///
    /// 分類を示す。
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbPlumeDirection {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbPlumeHeight {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<i64>,
    /// 分類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbPossibilityRankOfWarning {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「提供なし」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbPrecipitation {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbPrecipitationBasedIndex {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbPressure {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbProbability {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 補足情報
    ///
    /// 確率を補足する情報を示す
    #[serde(
        alias = "@bound",
        rename = "bound",
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    /// 特徴的か否か
    ///
    /// 天候を特徴づける確率の場合に true とする
    #[serde(
        alias = "@significant",
        rename = "significant",
        skip_serializing_if = "Option::is_none"
    )]
    pub significant: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbProbabilityOfAftershock {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    ///
    /// 単位を示す(%)
    #[serde(alias = "@unit", rename = "unit")]
    pub unit: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbProbabilityOfPrecipitation {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<i64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbRadius {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbReferableString {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 文章の種類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbReliabilityClass {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbReliabilityValue {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSeaIce {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSignificantClimateElement {
    /// 対象気象要素
    ///
    /// 特徴のある気象の要素
    #[serde(alias = "@kind", rename = "kind")]
    pub kind: String,
    /// 確率平文表現
    ///
    /// 特徴のある気温、降水量、日照時間等の確率の平文表現
    #[serde(alias = "Text", rename = "texts")]
    pub texts: Vec<EbReferableString>,
    /// 平年より低い（少ない）確率
    ///
    /// 特徴のある確率
    #[serde(
        alias = "ProbabilityOfBelowNormal",
        rename = "probabilityOfBelowNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_below_normal: Option<EbProbability>,
    /// 平年並の確率
    ///
    /// 特徴のある確率
    #[serde(
        alias = "ProbabilityOfNormal",
        rename = "probabilityOfNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_normal: Option<EbProbability>,
    /// 平年より高い（多い）確率
    ///
    /// 特徴のある確率
    #[serde(
        alias = "ProbabilityOfAboveNormal",
        rename = "probabilityOfAboveNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_above_normal: Option<EbProbability>,
    /// 平年よりかなり低い（少ない）確率
    ///
    /// 特徴のある確率
    #[serde(
        alias = "ProbabilityOfSignificantlyBelowNormal",
        rename = "probabilityOfSignificantlyBelowNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_significantly_below_normal: Option<EbProbability>,
    /// 平年よりかなり高い（多い）確率
    ///
    /// 特徴のある確率
    #[serde(
        alias = "ProbabilityOfSignificantlyAboveNormal",
        rename = "probabilityOfSignificantlyAboveNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_significantly_above_normal: Option<EbProbability>,
    /// 平年より低い（少ない）となる閾値
    #[serde(
        alias = "ThresholdOfBelowNormal",
        rename = "thresholdOfBelowNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_below_normal: Option<EbThreshold>,
    /// 平年より高い（多い）となる閾値
    #[serde(
        alias = "ThresholdOfAboveNormal",
        rename = "thresholdOfAboveNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_above_normal: Option<EbThreshold>,
    /// 平年よりかなり低い（少ない）となる閾値
    #[serde(
        alias = "ThresholdOfSignificantlyBelowNormal",
        rename = "thresholdOfSignificantlyBelowNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_below_normal: Option<EbThreshold>,
    /// 平年よりかなり高い（多い）となる閾値
    #[serde(
        alias = "ThresholdOfSignificantlyAboveNormal",
        rename = "thresholdOfSignificantlyAboveNormal",
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_above_normal: Option<EbThreshold>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSnowDepth {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSnowfallDepth {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSolarZenithAngle {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSpeed {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSunshine {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbSynopsis {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbTemperature {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbThreshold {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 分類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 代替文字列
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    /// 補足情報
    ///
    /// 階級区分閾値を補足する情報を示す
    #[serde(
        alias = "@bound",
        rename = "bound",
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbTidalLevel {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbTidalPeriod {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbTsunamiHeight {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(alias = "@unit", rename = "unit")]
    pub unit: String,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbTyphoonClass {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbUvIndex {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbVisibility {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWaterLevel {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「正常」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWaveHeight {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWeather {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWeatherCode {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<i64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWeatherForecastProbability {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 時系列での参照番号
    ///
    /// 天気予報を時系列で表現する場合の参照番号
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWindDegree {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWindDirection {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWindScale {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<i64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EbWindSpeed {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 状態
    ///
    /// 値の状態（「不明」など）を示す。
    #[serde(
        alias = "@condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IbInformation {
    /// 防災気象情報事項の種別
    ///
    /// この要素が示す防災気象情報事項の種別を示す。個々の種別間は独立している。
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 個々の防災気象情報要素
    ///
    /// 防災気象情報事項について、防災気象情報要素と地点等の一組の防災気象情報要素を示す。
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<IbItem>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IbArea {
    /// 対象地域・地点名称
    ///
    /// 対象地域・地点名を示す。
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 対象地域・地点コード
    ///
    /// 対象地域・地点コードを示す（コード辞書参照）。
    #[serde(
        alias = "Code",
        rename = "code",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub code: Option<String>,
    /// 対象地域（円）
    ///
    /// 台風と低気圧の対象地域（円）を示す。
    #[serde(
        alias = "Circle",
        rename = "circles",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub circles: Vec<EbCircle>,
    /// 対象地域（点）の座標
    #[serde(
        alias = "Coordinate",
        rename = "coordinates",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    /// 対象地域(線)の座標
    ///
    /// 対象地域（線）の座標を示す。
    #[serde(
        alias = "Line",
        rename = "lines",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lines: Vec<EbCoordinate>,
    /// 対象地域（多角形）の座標
    #[serde(
        alias = "Polygon",
        rename = "polygons",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub polygons: Vec<EbCoordinate>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IbAreas {
    /// 対象地域・地点コード種別
    ///
    /// この要素下に存在するcodeの種別を示す。
    #[serde(alias = "@codeType", rename = "codeType")]
    pub code_type: String,
    /// 対象地域・地点
    ///
    /// 個々の対象地域・地点を示す。
    #[serde(alias = "Area", rename = "areas")]
    pub areas: Vec<IbArea>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IbHead {
    /// 標題
    ///
    /// 情報を示す標題。具体的な内容が判別できる名称であり、可視化を目的として利用する。
    #[serde(alias = "Title", rename = "title", deserialize_with = "trim_string")]
    pub title: String,
    /// 発表時刻
    ///
    /// 本情報の公式な発表時刻を示す。
    #[serde(alias = "ReportDateTime", rename = "reportDateTime")]
    pub report_date_time: DateTime,
    /// 基点時刻
    ///
    /// 本情報の対象となる時刻・時間帯の基点時刻を示す。
    #[serde(alias = "TargetDateTime", rename = "targetDateTime")]
    pub target_date_time: NullableDateTime,
    /// 基点時刻のあいまいさ
    #[serde(
        alias = "TargetDTDubious",
        rename = "targetDTDubious",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub target_dt_dubious: Option<String>,
    /// 基点時刻からの取りうる時間
    ///
    /// 本情報の対象が時間幅を持つ場合、targetDateTimeを基点とした時間の幅を示す。有効期間を示す場合が多い。
    #[serde(
        alias = "TargetDuration",
        rename = "targetDuration",
        skip_serializing_if = "Option::is_none"
    )]
    pub target_duration: Option<Duration>,
    /// 失効時刻
    ///
    /// 本情報の失効時刻がある場合、これを示す。
    #[serde(
        alias = "ValidDateTime",
        rename = "validDateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub valid_date_time: Option<DateTime>,
    /// 識別情報
    ///
    /// 本情報の識別情報を示し、本要素が同じものについては、一連の情報であることを示す。
    #[serde(
        alias = "EventID",
        rename = "eventID",
        deserialize_with = "trim_string"
    )]
    pub event_id: String,
    /// 情報形態
    ///
    /// 本情報の形態を示す。
    #[serde(
        alias = "InfoType",
        rename = "infoType",
        deserialize_with = "trim_string"
    )]
    pub info_type: String,
    /// 情報番号
    ///
    /// 情報の番号。
    #[serde(alias = "Serial", rename = "serial", deserialize_with = "trim_string")]
    pub serial: String,
    /// スキーマの運用種別情報
    ///
    /// 同一スキーマ上における情報分類に応じた運用を示す種別情報である。
    #[serde(
        alias = "InfoKind",
        rename = "infoKind",
        deserialize_with = "trim_string"
    )]
    pub info_kind: String,
    /// スキーマの運用種別情報のバージョン番号
    ///
    /// スキーマの運用種別情報におけるバージョン番号を示す。
    #[serde(
        alias = "InfoKindVersion",
        rename = "infoKindVersion",
        deserialize_with = "trim_string"
    )]
    pub info_kind_version: String,
    /// 見出し要素
    ///
    /// 防災気象情報事項となる見出し要素を示す。
    #[serde(alias = "Headline", rename = "headline")]
    pub headline: IbHeadline,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IbHeadline {
    /// 見出し文
    ///
    /// 防災気象情報事項である見出し文のテキスト情報を示す。
    #[serde(alias = "Text", rename = "text", deserialize_with = "trim_string")]
    pub text: String,
    /// 見出し防災気象情報事項
    ///
    /// 防災気象情報事項である見出し要素を示す。
    #[serde(
        alias = "Information",
        rename = "informations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub informations: Vec<IbInformation>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IbItem {
    /// 防災気象情報要素
    #[serde(alias = "Kind", rename = "kinds")]
    pub kinds: Vec<IbKind>,
    /// 直前の防災気象情報要素
    ///
    /// 直前の防災気象情報要素の状況を示す。
    #[serde(
        alias = "LastKind",
        rename = "lastKinds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub last_kinds: Vec<IbKind>,
    /// 対象地域・地点全体
    ///
    /// 対象となる地域・地点群を示す。
    #[serde(alias = "Areas", rename = "areas")]
    pub areas: IbAreas,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IbKind {
    /// 防災気象情報要素名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 防災気象情報要素コード
    #[serde(
        alias = "Code",
        rename = "code",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub code: Option<String>,
    /// 状況
    ///
    /// 防災気象情報要素やこの防災気象情報事項について状況を示す。
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteAddition {
    /// 付加事項の内容
    ///
    /// 付加事項の内容を文字列で示す
    #[serde(alias = "Note", rename = "notes")]
    pub notes: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteAdditionalInfo {
    /// 観測の付加事項
    ///
    /// 生物季節観測、特殊観測で利用する付加事項
    #[serde(
        alias = "ObservationAddition",
        rename = "observationAddition",
        skip_serializing_if = "Option::is_none"
    )]
    pub observation_addition: Option<MeteObservationAddition>,
    /// 季節予報の付加事項
    ///
    /// 季節予報で利用する付加事項
    #[serde(
        alias = "ClimateForecastAddition",
        rename = "climateForecastAddition",
        skip_serializing_if = "Option::is_none"
    )]
    pub climate_forecast_addition: Option<MeteClimateForecastAddition>,
    /// 指定河川洪水予報の付加事項
    ///
    /// 指定河川洪水予報で利用する付加事項
    #[serde(
        alias = "FloodForecastAddition",
        rename = "floodForecastAddition",
        skip_serializing_if = "Option::is_none"
    )]
    pub flood_forecast_addition: Option<MeteFloodForecastAddition>,
    /// 高潮警報の付加事項
    ///
    /// 高潮警報で利用する付加事項
    #[serde(
        alias = "TidalWarningAddition",
        rename = "tidalWarningAdditions",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_warning_additions: Vec<MeteTidalWarningAddition>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteArea {
    /// 地域コード種別
    ///
    /// この要素の子要素であるCode要素のコード種別を示す
    #[serde(
        alias = "@codeType",
        rename = "codeType",
        skip_serializing_if = "Option::is_none"
    )]
    pub code_type: Option<String>,
    /// 対象地域・地点名称
    ///
    /// 対象地域・地点名を示す
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 対象地域・地点コード
    ///
    /// 対象地域・地点コードを示す（コード辞書参照）
    #[serde(
        alias = "Code",
        rename = "code",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub code: Option<String>,
    /// 都道府県
    #[serde(
        alias = "Prefecture",
        rename = "prefecture",
        skip_serializing_if = "Option::is_none"
    )]
    pub prefecture: Option<MetePrefectureCity>,
    /// 都道府県コード
    ///
    /// 5桁の都道府県コード
    #[serde(
        alias = "PrefectureCode",
        rename = "prefectureCode",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub prefecture_code: Option<String>,
    /// 都道府県のリスト
    ///
    /// xs:list型で記述
    #[serde(
        alias = "PrefectureList",
        rename = "prefectureList",
        skip_serializing_if = "Option::is_none"
    )]
    pub prefecture_list: Option<StringList>,
    /// 都道府県コードのリスト
    ///
    /// 5桁の市町村コードをxs:list型で記述
    #[serde(
        alias = "PrefectureCodeList",
        rename = "prefectureCodeList",
        skip_serializing_if = "Option::is_none"
    )]
    pub prefecture_code_list: Option<StringList>,
    /// 支庁
    #[serde(
        alias = "SubPrefecture",
        rename = "subPrefecture",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub sub_prefecture: Option<String>,
    /// 支庁コード
    ///
    /// 5桁の市町村コード
    #[serde(
        alias = "SubPrefectureCode",
        rename = "subPrefectureCode",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub sub_prefecture_code: Option<String>,
    /// 支庁のリスト
    ///
    /// xs:list型で記述
    #[serde(
        alias = "SubPrefectureList",
        rename = "subPrefectureList",
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_prefecture_list: Option<StringList>,
    /// 支庁コードのリスト
    ///
    /// 5桁の市町村コードをxs:list型で記述
    #[serde(
        alias = "SubPrefectureCodeList",
        rename = "subPrefectureCodeList",
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_prefecture_code_list: Option<StringList>,
    /// 市町村
    #[serde(
        alias = "City",
        rename = "city",
        skip_serializing_if = "Option::is_none"
    )]
    pub city: Option<MetePrefectureCity>,
    /// 市町村コード
    ///
    /// 5桁の市町村コード又は末尾に'00'をつけた7桁のコード
    #[serde(
        alias = "CityCode",
        rename = "cityCode",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub city_code: Option<String>,
    /// 市町村のリスト
    ///
    /// xs:list型で記述
    #[serde(
        alias = "CityList",
        rename = "cityList",
        skip_serializing_if = "Option::is_none"
    )]
    pub city_list: Option<StringList>,
    /// 市町村コードのリスト
    ///
    /// 5桁の市町村コード又は末尾に'00'をつけた7桁のコードをxs:list型で記述
    #[serde(
        alias = "CityCodeList",
        rename = "cityCodeList",
        skip_serializing_if = "Option::is_none"
    )]
    pub city_code_list: Option<StringList>,
    /// 市町村を細分する領域
    #[serde(
        alias = "SubCity",
        rename = "subCity",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub sub_city: Option<String>,
    /// 市町村を細分する領域のコード
    ///
    /// 気象庁で拡張した7桁の市町村コード
    #[serde(
        alias = "SubCityCode",
        rename = "subCityCode",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub sub_city_code: Option<String>,
    /// 市町村を細分する領域のリスト
    ///
    /// xs:list型で記述。ただし、指定河川洪水予報では既存の細分区によらず浸水想定地区を記述し、SubCityCodeListは使用しない。
    #[serde(
        alias = "SubCityList",
        rename = "subCityList",
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_city_list: Option<StringList>,
    /// 市町村を細分する領域のコードのリスト
    ///
    /// 気象庁で拡張した7桁の市町村コードをxs:list型で記述
    #[serde(
        alias = "SubCityCodeList",
        rename = "subCityCodeList",
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_city_code_list: Option<StringList>,
    /// 対象地域・地点コードのリスト
    ///
    /// 対象地域・地点名が複数の対象地域・地点コードにより示される場合にxs:list型で記述
    #[serde(
        alias = "CodeList",
        rename = "codeList",
        skip_serializing_if = "Option::is_none"
    )]
    pub code_list: Option<StringList>,
    /// 対象地域（円）
    ///
    /// 台風と低気圧の対象地域（円）を示す。
    #[serde(
        alias = "Circle",
        rename = "circles",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub circles: Vec<EbCircle>,
    /// 対象地域（点）の座標
    #[serde(
        alias = "Coordinate",
        rename = "coordinates",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    /// 対象地域(線)の座標
    ///
    /// 対象地域（線）の座標を示す。
    #[serde(
        alias = "Line",
        rename = "lines",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lines: Vec<EbCoordinate>,
    /// 対象地域（多角形）の座標
    #[serde(
        alias = "Polygon",
        rename = "polygons",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub polygons: Vec<EbCoordinate>,
    /// 領域の存在域
    #[serde(
        alias = "Location",
        rename = "location",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub location: Option<String>,
    /// 領域表現の状況
    ///
    /// 領域表現の状況について補足が必要な場合その内容を示す
    #[serde(
        alias = "Status",
        rename = "status",
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteAreas {
    /// コード種別
    ///
    /// この要素の子要素であるArea要素のCode要素のコード種別を示す
    #[serde(
        alias = "@codeType",
        rename = "codeType",
        skip_serializing_if = "Option::is_none"
    )]
    pub code_type: Option<String>,
    /// 対象地域
    ///
    /// 個々の対象地域を示す。
    #[serde(alias = "Area", rename = "areas")]
    pub areas: Vec<MeteArea>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteAttention {
    /// 特記事項の内容
    ///
    /// 特記事項の内容を文字列で示す
    #[serde(alias = "Note", rename = "notes")]
    pub notes: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseCriteria {
    /// 文章形式の表現
    ///
    /// 基準到達に係る内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 基準のクラス・レベル
    ///
    /// 基準が示すクラス・レベルの内容を示す。
    #[serde(
        alias = "CriteriaClass",
        rename = "criteriaClass",
        skip_serializing_if = "Option::is_none"
    )]
    pub criteria_class: Option<MeteCriteriaClass>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalCriteria>,
    /// 基準到達時刻
    ///
    /// 基準値に到達する時刻
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 期間の長さ
    #[serde(
        alias = "Duration",
        rename = "duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    /// 注意事項・付加事項
    ///
    /// 注意事項・付加事項を示す（注意警戒事項を示す）
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseEvent {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 文章形式の表現
    ///
    /// 事象の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalEvent>,
    /// 領域の存在域
    #[serde(
        alias = "Coordinate",
        rename = "coordinate",
        skip_serializing_if = "Option::is_none"
    )]
    pub coordinate: Option<MeteCoordinatePart>,
    /// 領域の存在域
    #[serde(
        alias = "Location",
        rename = "location",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub location: Option<String>,
    /// 事象名
    ///
    /// 事象を示す
    #[serde(
        alias = "Event",
        rename = "events",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub events: Vec<MeteEvent>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseHumidity {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 湿度
    #[serde(
        alias = "Humidity",
        rename = "humidities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalHumidity>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseIcing {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 着氷
    #[serde(
        alias = "Icing",
        rename = "icings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalIcing>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBasePrecipitation {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 降水量
    #[serde(
        alias = "Precipitation",
        rename = "precipitations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPrecipitation>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBasePrecipitationBasedIndex {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 雨量関連指数
    #[serde(
        alias = "PrecipitationBasedIndex",
        rename = "precipitationBasedIndexes",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_based_indexes: Vec<EbPrecipitationBasedIndex>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPrecipitationBasedIndex>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBasePressure {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 気圧
    #[serde(
        alias = "Pressure",
        rename = "pressures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPressure>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseSeaIce {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 海氷
    #[serde(
        alias = "SeaIce",
        rename = "seaIces",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSeaIce>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseSignificancy {
    /// 危険度
    ///
    /// 危険度又は警戒レベルを示す
    #[serde(
        alias = "Significancy",
        rename = "significancies",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significancies: Vec<MeteSignificancy>,
    /// 文章形式の表現
    ///
    /// 予報期間を超えて危険度又は警戒レベルが継続することを文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// ピーク時刻
    ///
    /// 時系列では表現できないピーク時刻を記述する
    #[serde(
        alias = "PeakTime",
        rename = "peakTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub peak_time: Option<MeteForecastTerm>,
    /// 特記事項
    #[serde(
        alias = "Attention",
        rename = "attention",
        skip_serializing_if = "Option::is_none"
    )]
    pub attention: Option<MeteAttention>,
    /// 付加事項
    #[serde(
        alias = "Addition",
        rename = "addition",
        skip_serializing_if = "Option::is_none"
    )]
    pub addition: Option<MeteAddition>,
    /// 地域
    ///
    /// 三次細分を用いた表現をする場合
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSignificancy>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseSnowDepth {
    /// 積雪深
    #[serde(
        alias = "SnowDepth",
        rename = "snowDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snow_depths: Vec<EbSnowDepth>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSnowDepth>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseSnowfallDepth {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 降雪量
    #[serde(
        alias = "SnowfallDepth",
        rename = "snowfallDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSnowfallDepth>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseSunshine {
    /// 日照
    #[serde(
        alias = "Sunshine",
        rename = "sunshines",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sunshines: Vec<EbSunshine>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseTemperature {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 気温
    #[serde(
        alias = "Temperature",
        rename = "temperatures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTemperature>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseTidalLevel {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 潮位
    #[serde(
        alias = "TidalLevel",
        rename = "tidalLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    /// 周期
    ///
    /// 潮位変動の周期を示す
    #[serde(
        alias = "TidalPeriod",
        rename = "tidalPeriods",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_periods: Vec<EbTidalPeriod>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTidalLevel>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 連続
    ///
    /// 連続した内容を示す
    #[serde(
        alias = "Sequence",
        rename = "sequences",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sequences: Vec<MeteSequenceTidalLevel>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseVisibility {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 視程
    #[serde(
        alias = "Visibility",
        rename = "visibilities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalVisibility>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseWaveHeight {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 波高
    #[serde(
        alias = "WaveHeight",
        rename = "waveHeights",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWaveHeight>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseWeather {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 天気
    #[serde(
        alias = "Weather",
        rename = "weathers",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWeather>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseWind {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 風向（数値）
    ///
    /// 風向の数値表現を示す
    #[serde(
        alias = "WindDegree",
        rename = "windDegrees",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 風力
    #[serde(
        alias = "WindScale",
        rename = "windScales",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWind>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseWindDirection {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindDirection>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBaseWindSpeed {
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindSpeed>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteBody {
    /// 対象地域
    #[serde(
        alias = "TargetArea",
        rename = "targetArea",
        skip_serializing_if = "Option::is_none"
    )]
    pub target_area: Option<MeteArea>,
    /// お知らせ
    ///
    /// お知らせの文章を示す
    #[serde(
        alias = "Notice",
        rename = "notices",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub notices: Vec<String>,
    /// 警報
    ///
    /// 警報・注意報等の注意・警戒を要する事項の内容を示す
    #[serde(
        alias = "Warning",
        rename = "warnings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub warnings: Vec<MeteWarning>,
    /// 気象情報
    ///
    /// 予報や観測等に関する事項を示す
    #[serde(
        alias = "MeteorologicalInfos",
        rename = "meteorologicalInfos",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub meteorological_infos: Vec<MeteMeteorologicalInfos>,
    /// 文章
    #[serde(
        alias = "Comment",
        rename = "comment",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<MeteComment>,
    /// 担当部署
    ///
    /// 担当部署に関する事項を示す
    #[serde(
        alias = "OfficeInfo",
        rename = "officeInfo",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_info: Option<MeteOfficeInfo>,
    /// 付加事項
    ///
    /// 共通要素で記述できない要素がある電文の個別付加事項を記述する
    #[serde(
        alias = "AdditionalInfo",
        rename = "additionalInfo",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_info: Option<MeteAdditionalInfo>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteCenterPart {
    /// 中心位置
    ///
    /// 熱帯擾乱や低気圧、高気圧の中心位置を示す
    #[serde(
        alias = "Coordinate",
        rename = "coordinates",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    /// 予報円
    ///
    /// 予報円の諸要素を示す
    #[serde(
        alias = "ProbabilityCircle",
        rename = "probabilityCircles",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub probability_circles: Vec<EbCircle>,
    /// 存在域
    ///
    /// 台風や低気圧の存在域を示す
    #[serde(
        alias = "Location",
        rename = "location",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub location: Option<String>,
    /// 移動方向
    ///
    /// 熱帯擾乱や低気圧、高気圧の移動方向を示す
    #[serde(
        alias = "Direction",
        rename = "directions",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub directions: Vec<EbDirection>,
    /// 移動速度
    ///
    /// 熱帯擾乱や低気圧、高気圧の移動速度を示す
    #[serde(
        alias = "Speed",
        rename = "speeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub speeds: Vec<EbSpeed>,
    /// 中心気圧
    ///
    /// 熱帯擾乱や低気圧、高気圧の中心気圧を示す
    #[serde(
        alias = "Pressure",
        rename = "pressure",
        skip_serializing_if = "Option::is_none"
    )]
    pub pressure: Option<EbPressure>,
    /// 予報円半径
    ///
    /// 熱帯擾乱や低気圧の予報円半径を示す
    #[serde(
        alias = "Radius",
        rename = "radiuses",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub radiuses: Vec<EbRadius>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteClassPart {
    /// 熱帯擾乱種類
    ///
    /// 熱帯擾乱の種類を示す
    #[serde(
        alias = "TyphoonClass",
        rename = "typhoonClass",
        skip_serializing_if = "Option::is_none"
    )]
    pub typhoon_class: Option<EbTyphoonClass>,
    /// 大きさ階級
    ///
    /// 台風の大きさ階級を示す
    #[serde(
        alias = "AreaClass",
        rename = "areaClass",
        skip_serializing_if = "Option::is_none"
    )]
    pub area_class: Option<EbAreaClass>,
    /// 強さ階級
    ///
    /// 台風の強さ階級を示す
    #[serde(
        alias = "IntensityClass",
        rename = "intensityClass",
        skip_serializing_if = "Option::is_none"
    )]
    pub intensity_class: Option<EbIntensityClass>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteClimateForecastAddition {
    /// 予報対象期間に関する説明
    #[serde(
        alias = "TargetDateTimeNotice",
        rename = "targetDateTimeNotice",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub target_date_time_notice: Option<String>,
    /// 季節予報の次回発表予定
    ///
    /// 季節予報の次回発表予定日
    #[serde(
        alias = "NextForecastSchedule",
        rename = "nextForecastSchedules",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub next_forecast_schedules: Vec<MeteForecastSchedule>,
    /// 最新資料利用の注意喚起等
    #[serde(
        alias = "NoticeOfSchedule",
        rename = "noticeOfSchedule",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub notice_of_schedule: Option<String>,
    /// その他のお知らせ
    ///
    /// 暖・寒候期予報の見直し結果等
    #[serde(
        alias = "AdditionalNotice",
        rename = "additionalNotice",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub additional_notice: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteClimateProbabilityValuesPart {
    /// 気温、降水量、日照時間等の確率
    #[serde(
        alias = "ClimateProbabilityValues",
        rename = "climateProbabilityValues"
    )]
    pub climate_probability_values: Vec<EbClimateProbabilityValues>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteClimateValuesPart {
    /// 気候要素の種類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 気温の値
    ///
    /// 平均気温、最高気温又は最低気温
    #[serde(
        alias = "Temperature",
        rename = "temperatures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    /// 降水量
    #[serde(
        alias = "Precipitation",
        rename = "precipitations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    /// 日照時間
    #[serde(
        alias = "Sunshine",
        rename = "sunshines",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sunshines: Vec<EbSunshine>,
    /// 降雪量
    #[serde(
        alias = "SnowfallDepth",
        rename = "snowfallDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    /// 積雪の深さ
    #[serde(
        alias = "SnowDepth",
        rename = "snowDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snow_depths: Vec<EbSnowDepth>,
    /// 平年や前年等との差（比）
    #[serde(
        alias = "Comparison",
        rename = "comparisons",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub comparisons: Vec<EbComparison>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteComment {
    /// 文章の領域
    #[serde(alias = "Text", rename = "texts")]
    pub texts: Vec<MeteText>,
    /// 付加文コード
    ///
    /// 付加文コードを示す。複数表記の場合はxs:list型を用いること。
    #[serde(
        alias = "Code",
        rename = "codes",
        skip_serializing_if = "Option::is_none"
    )]
    pub codes: Option<StringList>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteCoordinatePart {
    /// 対象地域（点）の座標
    #[serde(
        alias = "Coordinate",
        rename = "coordinates",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    /// 対象地域（線）の座標
    #[serde(
        alias = "Line",
        rename = "lines",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lines: Vec<EbCoordinate>,
    /// 対象地域（多角形）の座標
    #[serde(
        alias = "Polygon",
        rename = "polygons",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub polygons: Vec<EbCoordinate>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteCriteriaClass {
    /// クラスの種別名
    ///
    /// 基準が示すクラス・レベルの種別を示す。
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// クラス・レベルの名前
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// クラス・レベルのコード
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 状況の補足説明
    ///
    /// クラス・レベルの状況を記述する
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 注意事項・付加事項
    ///
    /// 注意事項・付加事項等を示す
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteCriteriaPeriod {
    /// 文章形式の表現
    ///
    /// 基準到達期間部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseCriteria>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseCriteria>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseCriteria>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalCriteria>,
    /// 基準のクラス・レベル
    ///
    /// 基準が示すクラス・レベルの内容を示す。
    #[serde(
        alias = "CriteriaClass",
        rename = "criteriaClass",
        skip_serializing_if = "Option::is_none"
    )]
    pub criteria_class: Option<MeteCriteriaClass>,
    /// 基準到達時刻
    ///
    /// 基準値に到達する時刻
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 期間の長さ
    #[serde(
        alias = "Duration",
        rename = "duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    /// 注意事項・付加事項
    ///
    /// 注意事項・付加事項を示す（注意警戒事項を示す）
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteDetailForecast {
    /// 詳細天気部分
    ///
    /// 天気予報の詳細
    #[serde(
        alias = "WeatherForecastPart",
        rename = "weatherForecastParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weather_forecast_parts: Vec<MeteWeatherForecastPart>,
    /// 雨量の詳細部分
    ///
    /// 雨量予報の詳細
    #[serde(
        alias = "PrecipitationForecastPart",
        rename = "precipitationForecastParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_forecast_parts: Vec<MetePrecipitationPart>,
    /// 降雪量の詳細部分
    ///
    /// 降雪量予報の詳細
    #[serde(
        alias = "SnowfallDepthForecastPart",
        rename = "snowfallDepthForecastParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depth_forecast_parts: Vec<MeteSnowfallDepthPart>,
    /// 詳細風部分
    ///
    /// 風予報の詳細
    #[serde(
        alias = "WindForecastPart",
        rename = "windForecastParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_forecast_parts: Vec<MeteWindForecastPart>,
    /// 詳細波部分
    ///
    /// 波予報の詳細
    #[serde(
        alias = "WaveHeightForecastPart",
        rename = "waveHeightForecastParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_height_forecast_parts: Vec<MeteWaveHeightForecastPart>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteDischargePart {
    /// 流量
    #[serde(
        alias = "Discharge",
        rename = "discharges",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub discharges: Vec<EbDischarge>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteEvent {
    /// 事象の種別名
    ///
    /// 事象の種別を示す。
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 文章形式の表現
    ///
    /// 事象の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 事象名
    ///
    /// 事象の名称を示す
    #[serde(
        alias = "EventName",
        rename = "eventNames",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub event_names: Vec<String>,
    /// 事象のクラス・レベル
    ///
    /// 事象が示すクラス・レベルの内容を示す。
    #[serde(
        alias = "EventClass",
        rename = "eventClasses",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub event_classes: Vec<String>,
    /// 事象発生時刻
    ///
    /// 事象が発生したまたは発生しうる時刻
    #[serde(
        alias = "Time",
        rename = "times",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub times: Vec<MeteEventTime>,
    /// 期間の長さ
    ///
    /// 事象の発生している期間の長さを示す
    #[serde(
        alias = "Duration",
        rename = "durations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub durations: Vec<MeteEventDuration>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteEventDate {
    #[serde(alias = "$text", rename = "value")]
    pub value: String,
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    #[serde(
        alias = "@dubious",
        rename = "dubious",
        skip_serializing_if = "Option::is_none"
    )]
    pub dubious: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteEventDatePart {
    /// 事象の月日
    #[serde(
        alias = "Date",
        rename = "dates",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub dates: Vec<MeteEventDate>,
    /// 平年の月日
    ///
    /// 事象の平年の月日を示す
    #[serde(
        alias = "Normal",
        rename = "normals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub normals: Vec<MeteEventDate>,
    /// 昨年の月日
    ///
    /// 事象の昨年の月日を示す
    #[serde(
        alias = "LastYear",
        rename = "lastYears",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub last_years: Vec<MeteEventDate>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteEventDuration {
    #[serde(alias = "$text", rename = "value")]
    pub value: Duration,
    /// クラスの種別名
    ///
    /// 事象が示すクラス・レベルの種別を示す。
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteEventPart {
    /// 文章形式の表現
    ///
    /// 事象の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseEvent>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseEvent>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseEvent>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalEvent>,
    /// 領域の存在域
    #[serde(
        alias = "Coordinate",
        rename = "coordinate",
        skip_serializing_if = "Option::is_none"
    )]
    pub coordinate: Option<MeteCoordinatePart>,
    /// 領域の名称
    ///
    /// 領域の存在域を示す
    #[serde(
        alias = "Location",
        rename = "location",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub location: Option<String>,
    /// 事象名
    ///
    /// 事象を示す
    #[serde(
        alias = "Event",
        rename = "events",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub events: Vec<MeteEvent>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteEventTime {
    #[serde(alias = "$text", rename = "value")]
    pub value: DateTime,
    /// 事象の種別名
    ///
    /// 事象の種別を示す。
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteFiftyKtWindProbabilityPart {
    /// 暴風域に入る確率
    #[serde(alias = "FiftyKtWindProbability", rename = "fiftyKtWindProbabilities")]
    pub fifty_kt_wind_probabilities: Vec<EbWeatherForecastProbability>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteFloodAssumptionPart {
    /// 浸水区域
    #[serde(
        alias = "FloodAssumptionArea",
        rename = "floodAssumptionArea",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub flood_assumption_area: Option<String>,
    /// 氾濫水到達時刻
    #[serde(
        alias = "AttainmentTime",
        rename = "attainmentTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub attainment_time: Option<EbDateTime>,
    /// 浸水深
    #[serde(
        alias = "FloodDepth",
        rename = "floodDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub flood_depths: Vec<EbFloodDepth>,
    /// 氾濫水最深時刻
    #[serde(
        alias = "AttainmentDeepestTime",
        rename = "attainmentDeepestTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub attainment_deepest_time: Option<EbDateTime>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteFloodAssumptionTable {
    /// 対象地域河川
    ///
    /// 個々の対象地域河川を示す。
    #[serde(alias = "Area", rename = "area")]
    pub area: MeteArea,
    /// 浸水対象
    ///
    /// 浸水対象地域や時刻を示す。
    #[serde(
        alias = "FloodAssumptionPart",
        rename = "floodAssumptionParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub flood_assumption_parts: Vec<MeteFloodAssumptionPart>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteFloodForecastAddition {
    /// 水位・流量観測所付加情報
    ///
    /// 水位観測所の受け持ち区間と基準の諸要素を示す
    #[serde(alias = "HydrometricStationPart", rename = "hydrometricStationParts")]
    pub hydrometric_station_parts: Vec<MeteHydrometricStationPart>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteForecastSchedule {
    #[serde(alias = "@target", rename = "target")]
    pub target: String,
    /// 季節予報発表予定日平文
    ///
    /// 季節予報発表予定日
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
    /// 季節予報発表予定日
    #[serde(
        alias = "DateTime",
        rename = "dateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<DateTime>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteForecastTerm {
    /// 日付
    ///
    /// 日付を文字列で示す
    #[serde(
        alias = "Date",
        rename = "date",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub date: Option<String>,
    /// 時間
    ///
    /// 時間表現を文字列で示す
    #[serde(
        alias = "Term",
        rename = "term",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub term: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteHumidityPart {
    /// 文章形式の表現
    ///
    /// 湿度部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseHumidity>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseHumidity>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseHumidity>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaHumidity>,
    /// 湿度
    #[serde(
        alias = "Humidity",
        rename = "humidities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteHydrometricStationCriteria {
    /// 水位基準
    #[serde(
        alias = "WaterLevel",
        rename = "waterLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub water_levels: Vec<EbWaterLevel>,
    /// 流量基準
    #[serde(
        alias = "Discharge",
        rename = "discharges",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub discharges: Vec<EbDischarge>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteHydrometricStationPart {
    /// 対象水位観測所
    #[serde(alias = "Area", rename = "area")]
    pub area: MeteArea,
    /// 受け持ち区間
    ///
    /// 水位・流量観測所の受け持ち区間を示す
    #[serde(
        alias = "ChargeSection",
        rename = "chargeSections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub charge_sections: Vec<String>,
    /// 水位・流量基準
    ///
    /// 水位・流量観測所の水位・流量基準の諸要素を示す
    #[serde(
        alias = "Criteria",
        rename = "criterias",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub criterias: Vec<MeteHydrometricStationCriteria>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteIcingPart {
    /// 文章形式の表現
    ///
    /// 着氷の状態を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseIcing>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseIcing>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseIcing>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaIcing>,
    /// 着氷
    #[serde(
        alias = "Icing",
        rename = "icings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteIsobarPart {
    /// 気圧
    ///
    /// 等圧線の気圧を示す
    #[serde(alias = "Pressure", rename = "pressure")]
    pub pressure: EbPressure,
    /// 線
    ///
    /// 等圧線の座標を示す（閉じていない場合）
    #[serde(
        alias = "Line",
        rename = "line",
        skip_serializing_if = "Option::is_none"
    )]
    pub line: Option<EbCoordinate>,
    /// 多角形
    ///
    /// 等圧線の座標を示す（閉じている場合）
    #[serde(
        alias = "Polygon",
        rename = "polygon",
        skip_serializing_if = "Option::is_none"
    )]
    pub polygon: Option<EbCoordinate>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteItem {
    /// 特別警報・警報・注意報、観測情報
    ///
    /// 特別警報・警報・注意報、観測の個々の要素を示す
    #[serde(alias = "Kind", rename = "kinds")]
    pub kinds: Vec<MeteKind>,
    /// 地域名要素全体
    ///
    /// 複数の対象地域がある場合、この要素の子要素に記述する（将来の拡張用）
    #[serde(
        alias = "Areas",
        rename = "areas",
        skip_serializing_if = "Option::is_none"
    )]
    pub areas: Option<MeteAreas>,
    /// 地点要素全体
    ///
    /// 複数の対象地点がある場合、この要素の子要素に記述する（将来の拡張用）
    #[serde(
        alias = "Stations",
        rename = "stations",
        skip_serializing_if = "Option::is_none"
    )]
    pub stations: Option<MeteStations>,
    /// 地域名要素
    ///
    /// 個々の対象地域・地点を示す
    #[serde(
        alias = "Area",
        rename = "area",
        skip_serializing_if = "Option::is_none"
    )]
    pub area: Option<MeteArea>,
    /// 地点要素
    ///
    /// 対象地点を示す
    #[serde(
        alias = "Station",
        rename = "station",
        skip_serializing_if = "Option::is_none"
    )]
    pub station: Option<MeteStation>,
    /// 内容の変更点の有無
    ///
    /// 対象地域・地点毎の内容の変更点の有無を示す
    #[serde(
        alias = "ChangeStatus",
        rename = "changeStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub change_status: Option<String>,
    /// 域内全域又は一部を示す
    ///
    /// 発表対象が領域の全域または一部であるかを示す
    #[serde(
        alias = "FullStatus",
        rename = "fullStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub full_status: Option<String>,
    /// 編集識別子
    ///
    /// 複数の領域をまとめるときの識別として利用する
    #[serde(
        alias = "EditingMark",
        rename = "editingMark",
        skip_serializing_if = "Option::is_none"
    )]
    pub editing_mark: Option<String>,
    /// 他情報参照
    ///
    /// 土砂災害警戒情報などの発表状況を記載する
    #[serde(
        alias = "OtherReport",
        rename = "otherReports",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub other_reports: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteKind {
    /// 項目名
    ///
    /// 特別警報・警報・注意報名、警戒レベル等を示す
    #[serde(
        alias = "Name",
        rename = "name",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub name: Option<String>,
    /// 警報等情報要素コード
    ///
    /// 特別警報・警報・注意報、警戒レベル、生物季節現象等のコードを示す（コード辞書参照）
    #[serde(
        alias = "Code",
        rename = "code",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub code: Option<String>,
    /// 情報の状況
    ///
    /// 警報・注意報等の切り替え、発表、解除などの状況を示す
    #[serde(
        alias = "Status",
        rename = "status",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub status: Option<String>,
    /// 観測対象の品種または総称
    #[serde(
        alias = "ClassName",
        rename = "className",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub class_name: Option<String>,
    /// 種別の補足説明
    ///
    /// "土砂災害"など大雨警報などを説明する、観測の補足説明をする文字列等を示す
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 前回の発表状況
    ///
    /// 前回発表した警報等を示す
    #[serde(
        alias = "LastKind",
        rename = "lastKind",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_kind: Option<MeteNextKind>,
    /// 警報・注意報、気象警戒レベルの引上げの可能性
    #[serde(
        alias = "NextKinds",
        rename = "nextKinds",
        skip_serializing_if = "Option::is_none"
    )]
    pub next_kinds: Option<MeteNextKinds>,
    /// 特記事項
    #[serde(
        alias = "Attention",
        rename = "attention",
        skip_serializing_if = "Option::is_none"
    )]
    pub attention: Option<MeteAttention>,
    /// 警報等への切り替え予告
    ///
    /// 警報等への切り替えの予告を示す
    #[serde(
        alias = "WarningNotice",
        rename = "warningNotice",
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_notice: Option<MeteWarningNotice>,
    /// 付加事項
    #[serde(
        alias = "Addition",
        rename = "addition",
        skip_serializing_if = "Option::is_none"
    )]
    pub addition: Option<MeteAddition>,
    /// 日時
    ///
    /// Kind要素で示している内容の有効日時や起時を示す
    #[serde(
        alias = "DateTime",
        rename = "dateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<EbDateTime>,
    /// 予報・観測要素
    ///
    /// 量的予想などの詳細事項を示す
    #[serde(
        alias = "Property",
        rename = "properties",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub properties: Vec<MeteProperty>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalCriteria {
    /// 地域の名称
    ///
    /// 一部領域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        deserialize_with = "trim_string"
    )]
    pub area_name: String,
    /// 文章形式の表現
    ///
    /// 一部領域の基準到達に係る内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 基準のクラス・レベル
    ///
    /// 基準が示すクラス・レベルの内容を示す。
    #[serde(alias = "CriteriaClass", rename = "criteriaClass")]
    pub criteria_class: MeteCriteriaClass,
    /// 基準到達時刻
    ///
    /// 基準値に到達する時刻
    #[serde(alias = "Time", rename = "time")]
    pub time: DateTime,
    /// 期間の長さ
    #[serde(
        alias = "Duration",
        rename = "duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    /// 注意事項・付加事項
    ///
    /// 注意事項・付加事項を示す（注意警戒事項を示す）
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalEvent {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        deserialize_with = "trim_string"
    )]
    pub area_name: String,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の事象の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 領域の存在域
    #[serde(
        alias = "Coordinate",
        rename = "coordinate",
        skip_serializing_if = "Option::is_none"
    )]
    pub coordinate: Option<MeteCoordinatePart>,
    /// 領域の存在域
    #[serde(
        alias = "Location",
        rename = "location",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub location: Option<String>,
    /// 事象名
    ///
    /// 事象を示す
    #[serde(
        alias = "Event",
        rename = "events",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub events: Vec<MeteEvent>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalHumidity {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 湿度
    #[serde(
        alias = "Humidity",
        rename = "humidities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalIcing {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 着氷
    #[serde(
        alias = "Icing",
        rename = "icings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalPrecipitation {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 降水量
    #[serde(
        alias = "Precipitation",
        rename = "precipitations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalPrecipitationBasedIndex {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 雨量関連指数
    #[serde(
        alias = "PrecipitationBasedIndex",
        rename = "precipitationBasedIndexes",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_based_indexes: Vec<EbPrecipitationBasedIndex>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalPressure {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 気圧
    #[serde(
        alias = "Pressure",
        rename = "pressures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalSeaIce {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 海氷
    #[serde(
        alias = "SeaIce",
        rename = "seaIces",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalSignificancy {
    /// 地域の名称
    ///
    /// 三次細分の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        deserialize_with = "trim_string"
    )]
    pub area_name: String,
    /// 危険度
    ///
    /// 危険度又は警戒レベルを示す
    #[serde(
        alias = "Significancy",
        rename = "significancies",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significancies: Vec<MeteSignificancy>,
    /// 文章形式の表現
    ///
    /// 予報期間を超えて危険度又は警戒レベルが継続することを文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// ピーク時刻
    ///
    /// 時系列では表現できないピーク時刻を記述する
    #[serde(
        alias = "PeakTime",
        rename = "peakTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub peak_time: Option<MeteForecastTerm>,
    /// 特記事項
    #[serde(
        alias = "Attention",
        rename = "attention",
        skip_serializing_if = "Option::is_none"
    )]
    pub attention: Option<MeteAttention>,
    /// 付加事項
    #[serde(
        alias = "Addition",
        rename = "addition",
        skip_serializing_if = "Option::is_none"
    )]
    pub addition: Option<MeteAddition>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalSnowDepth {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 積雪深
    #[serde(
        alias = "SnowDepth",
        rename = "snowDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snow_depths: Vec<EbSnowDepth>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalSnowfallDepth {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 降雪量
    #[serde(
        alias = "SnowfallDepth",
        rename = "snowfallDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalTemperature {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 気温
    #[serde(
        alias = "Temperature",
        rename = "temperatures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalTidalLevel {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 潮位
    #[serde(
        alias = "TidalLevel",
        rename = "tidalLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    /// 周期
    ///
    /// 潮位変動の周期を示す
    #[serde(
        alias = "TidalPeriod",
        rename = "tidalPeriods",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_periods: Vec<EbTidalPeriod>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 連続
    ///
    /// 連続した内容を示す
    #[serde(
        alias = "Sequence",
        rename = "sequences",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sequences: Vec<MeteSequenceTidalLevel>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalVisibility {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 視程
    #[serde(
        alias = "Visibility",
        rename = "visibilities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalWaveHeight {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 波高
    #[serde(
        alias = "WaveHeight",
        rename = "waveHeights",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalWeather {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 天気
    #[serde(
        alias = "Weather",
        rename = "weathers",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalWind {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 風向（数値）
    ///
    /// 風向の数値表現を示す
    #[serde(
        alias = "WindDegree",
        rename = "windDegrees",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 風力
    #[serde(
        alias = "WindScale",
        rename = "windScales",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalWindDirection {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteLocalWindSpeed {
    /// 地域の名称
    ///
    /// 領域の一部の区域の名称、表現を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteMeteorologicalInfo {
    /// 種類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 予報・観測の基点時刻
    ///
    /// 予報期間、観測時間の基点時刻を示す
    #[serde(alias = "DateTime", rename = "dateTime")]
    pub date_time: EbDateTime,
    /// 予報・観測期間の長さ
    ///
    /// 予報期間の長さを示す
    #[serde(
        alias = "Duration",
        rename = "duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    /// 予報・観測時間の内容
    ///
    /// 予報期間、観測時間を文章で示す
    #[serde(
        alias = "Name",
        rename = "name",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub name: Option<String>,
    /// 予報・観測の内容
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<MeteItem>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteMeteorologicalInfos {
    /// 予報・観測の種別
    ///
    /// この要素が示す予報や観測事項の種別を示す
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 予報・観測の時間
    ///
    /// この要素が示す予報や観測事項の時間を示す
    #[serde(
        alias = "MeteorologicalInfo",
        rename = "meteorologicalInfos",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub meteorological_infos: Vec<MeteMeteorologicalInfo>,
    /// 時系列情報
    ///
    /// 予報や観測等を時系列的に表現する
    #[serde(
        alias = "TimeSeriesInfo",
        rename = "timeSeriesInfos",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub time_series_infos: Vec<MeteTimeSeriesInfo>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteNextKind {
    /// 項目名
    ///
    /// 発表の可能性を述べる警報等の種類を記述
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 警報等情報要素コード
    ///
    /// Name要素に対応したコードを示す（コード辞書参照）
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 状況の補足説明
    ///
    /// 警報等の状況を記述する
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 日時
    ///
    /// 警報等の発表の可能性のあるコマを記述
    #[serde(
        alias = "DateTime",
        rename = "dateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<EbDateTime>,
    /// 文章形式の表現
    ///
    /// 警報等の発表の可能性について文章で記述
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub sentence: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteNextKinds {
    /// 警報等の発表の可能性
    #[serde(alias = "NextKind", rename = "nextKinds")]
    pub next_kinds: Vec<MeteNextKind>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteObservationAddition {
    /// 平年差
    ///
    /// 平年に観測した日との差を示す
    #[serde(
        alias = "DeviationFromNormal",
        rename = "deviationFromNormal",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub deviation_from_normal: Option<String>,
    /// 昨年差
    ///
    /// 昨年に観測した日との差を示す
    #[serde(
        alias = "DeviationFromLastYear",
        rename = "deviationFromLastYear",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub deviation_from_last_year: Option<String>,
    /// 記事
    ///
    /// 観測結果を補足する事項を示す
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteOffice {
    /// 担当部署の種別
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 担当部署の属する組織名
    ///
    /// 担当部署名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// コード
    ///
    /// 担当部署コードで、指定河川洪水予報のみで利用する
    #[serde(
        alias = "Code",
        rename = "code",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub code: Option<String>,
    /// 連絡先
    ///
    /// 担当部署の連絡先の電話番号と部署名
    #[serde(
        alias = "ContactInfo",
        rename = "contactInfo",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub contact_info: Option<String>,
    /// 参考URI
    ///
    /// 参考となるURIで、指定河川洪水予報のみで利用する
    #[serde(alias = "URI", rename = "uRI", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteOfficeInfo {
    /// 担当部署
    ///
    /// 担当部署の諸要素を示す
    #[serde(alias = "Office", rename = "offices")]
    pub offices: Vec<MeteOffice>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MetePeriod {
    /// 開始時間情報
    ///
    /// 対象要素の開始時間を文字列で示す
    #[serde(
        alias = "StartTime",
        rename = "startTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_time: Option<MeteForecastTerm>,
    /// 終了時間情報
    ///
    /// 対象要素の終了時間を文字列で示す
    #[serde(
        alias = "EndTime",
        rename = "endTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub end_time: Option<MeteForecastTerm>,
    /// 継続時間情報
    ///
    /// 対象要素が引き続く事を文字列で示す
    #[serde(
        alias = "OverTime",
        rename = "overTime",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub over_time: Option<String>,
    /// 単一時間情報
    ///
    /// 対象要素を単一時間で示す場合の文字列
    #[serde(
        alias = "ZoneTime",
        rename = "zoneTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub zone_time: Option<MeteForecastTerm>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MetePossibilityRankOfWarningPart {
    /// 警報級の可能性
    #[serde(
        alias = "PossibilityRankOfWarning",
        rename = "possibilityRankOfWarnings"
    )]
    pub possibility_rank_of_warnings: Vec<EbPossibilityRankOfWarning>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MetePrecipitationBasedIndexPart {
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 文章形式の表現
    ///
    /// 降水量部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePrecipitationBasedIndex>,
    /// 雨量関連指数
    #[serde(
        alias = "PrecipitationBasedIndex",
        rename = "precipitationBasedIndexes",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_based_indexes: Vec<EbPrecipitationBasedIndex>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MetePrecipitationPart {
    /// 時系列での参照番号
    ///
    /// 天気予報を時系列で表現する場合の参照番号
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 文章形式の表現
    ///
    /// 降水量部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePrecipitation>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePrecipitation>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePrecipitation>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaPrecipitation>,
    /// 降水量
    #[serde(
        alias = "Precipitation",
        rename = "precipitations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MetePrefectureCity {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 領域のタイプ
    ///
    /// この要素の下に存在するcodeの種別を示す
    #[serde(
        alias = "@partType",
        rename = "partType",
        skip_serializing_if = "Option::is_none"
    )]
    pub part_type: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MetePressurePart {
    /// 文章形式の表現
    ///
    /// 気圧部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePressure>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePressure>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePressure>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaPressure>,
    /// 気圧
    #[serde(
        alias = "Pressure",
        rename = "pressures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteProbabilityOfPrecipitationPart {
    /// 降水確率
    #[serde(
        alias = "ProbabilityOfPrecipitation",
        rename = "probabilityOfPrecipitations"
    )]
    pub probability_of_precipitations: Vec<EbProbabilityOfPrecipitation>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteProperty {
    /// 気象要素名
    ///
    /// 量的予想などの種類を示す
    #[serde(alias = "Type", rename = "type", deserialize_with = "trim_string")]
    pub ty: String,
    /// 危険度部分
    ///
    /// 危険度についての諸要素を示す
    #[serde(
        alias = "SignificancyPart",
        rename = "significancyParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significancy_parts: Vec<MeteSignificancyPart>,
    /// 予報期間を超えた危険度部分
    ///
    /// 予報期間を超えた危険度の継続についての諸要素を示す
    #[serde(
        alias = "SubsequentSignificancyPart",
        rename = "subsequentSignificancyParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub subsequent_significancy_parts: Vec<MeteSignificancyPart>,
    /// 警戒期間
    ///
    /// 対象要素の警戒期間を示す
    #[serde(
        alias = "WarningPeriod",
        rename = "warningPeriod",
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_period: Option<MetePeriod>,
    /// 注意期間
    ///
    /// 対象要素の注意期間を示す
    #[serde(
        alias = "AdvisoryPeriod",
        rename = "advisoryPeriod",
        skip_serializing_if = "Option::is_none"
    )]
    pub advisory_period: Option<MetePeriod>,
    /// 基準到達期間
    ///
    /// 対象要素の基準到達期間を示す。
    #[serde(
        alias = "CriteriaPeriod",
        rename = "criteriaPeriod",
        skip_serializing_if = "Option::is_none"
    )]
    pub criteria_period: Option<MeteCriteriaPeriod>,
    /// 最大値発現時間情報
    ///
    /// 対象要素のピーク時間を文字列で示す
    #[serde(
        alias = "PeakTime",
        rename = "peakTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub peak_time: Option<MeteForecastTerm>,
    /// 詳細予報
    ///
    /// 詳細予報についての諸要素を示す
    #[serde(
        alias = "DetailForecast",
        rename = "detailForecast",
        skip_serializing_if = "Option::is_none"
    )]
    pub detail_forecast: Option<MeteDetailForecast>,
    /// 風部分
    ///
    /// 風についての諸要素を示す
    #[serde(
        alias = "WindPart",
        rename = "windPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_part: Option<MeteWindPart>,
    /// 風向部分
    ///
    /// 風向についての諸要素を示す
    #[serde(
        alias = "WindDirectionPart",
        rename = "windDirectionPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_direction_part: Option<MeteWindDirectionPart>,
    /// 風速部分
    ///
    /// 風速についての諸要素を示す
    #[serde(
        alias = "WindSpeedPart",
        rename = "windSpeedPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_speed_part: Option<MeteWindSpeedPart>,
    /// 警戒領域部分
    ///
    /// 警戒領域部分についての諸要素を示す
    #[serde(
        alias = "WarningAreaPart",
        rename = "warningAreaParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub warning_area_parts: Vec<MeteWarningAreaPart>,
    /// 天気部分
    ///
    /// 天気についての諸要素を示す
    #[serde(
        alias = "WeatherPart",
        rename = "weatherPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub weather_part: Option<MeteWeatherPart>,
    /// 気圧部分
    ///
    /// 気圧についての諸要素を示す
    #[serde(
        alias = "PressurePart",
        rename = "pressurePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub pressure_part: Option<MetePressurePart>,
    /// 気温部分
    ///
    /// 気温についての諸要素を示す
    #[serde(
        alias = "TemperaturePart",
        rename = "temperaturePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub temperature_part: Option<MeteTemperaturePart>,
    /// 視程部分
    ///
    /// 視程についての諸要素を示す
    #[serde(
        alias = "VisibilityPart",
        rename = "visibilityPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub visibility_part: Option<MeteVisibilityPart>,
    /// 気象要因部分
    ///
    /// 気象要因についての諸要素を示す
    #[serde(
        alias = "SynopsisPart",
        rename = "synopsisPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub synopsis_part: Option<MeteSynopsisPart>,
    /// 波高部分
    ///
    /// 波高についての諸要素を示す
    #[serde(
        alias = "WaveHeightPart",
        rename = "waveHeightPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub wave_height_part: Option<MeteWaveHeightPart>,
    /// 降水量部分
    ///
    /// 降水量についての諸要素を示す
    #[serde(
        alias = "PrecipitationPart",
        rename = "precipitationParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_parts: Vec<MetePrecipitationPart>,
    /// 雨量関連指数部分
    ///
    /// 雨量関連指数についての諸要素を示す
    #[serde(
        alias = "PrecipitationBasedIndexPart",
        rename = "precipitationBasedIndexParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_based_index_parts: Vec<MetePrecipitationBasedIndexPart>,
    /// 降雪量部分
    ///
    /// 降雪量についての諸要素を示す
    #[serde(
        alias = "SnowfallDepthPart",
        rename = "snowfallDepthPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub snowfall_depth_part: Option<MeteSnowfallDepthPart>,
    /// 積雪深部分
    ///
    /// 積雪深についての諸要素を示す
    #[serde(
        alias = "SnowDepthPart",
        rename = "snowDepthPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub snow_depth_part: Option<MeteSnowDepthPart>,
    /// 湿度部分
    ///
    /// 湿度についての諸要素を示す
    #[serde(
        alias = "HumidityPart",
        rename = "humidityParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidity_parts: Vec<MeteHumidityPart>,
    /// 潮位部分
    ///
    /// 潮位についての諸要素を示す
    #[serde(
        alias = "TidalLevelPart",
        rename = "tidalLevelPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub tidal_level_part: Option<MeteTidalLevelPart>,
    /// 日照部分
    ///
    /// 日照についての諸要素を示す
    #[serde(
        alias = "SunshinePart",
        rename = "sunshinePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub sunshine_part: Option<MeteSunshinePart>,
    /// テロップ用天気予報用語部分
    ///
    /// テロップ用天気予報用語についての諸要素を示す
    #[serde(
        alias = "WeatherCodePart",
        rename = "weatherCodePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub weather_code_part: Option<MeteWeatherCodePart>,
    /// 降水確率部分
    ///
    /// 降水確率についての諸要素を示す
    #[serde(
        alias = "ProbabilityOfPrecipitationPart",
        rename = "probabilityOfPrecipitationPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_precipitation_part: Option<MeteProbabilityOfPrecipitationPart>,
    /// 海氷部分
    ///
    /// 海氷についての諸要素を示す
    #[serde(
        alias = "SeaIcePart",
        rename = "seaIcePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub sea_ice_part: Option<MeteSeaIcePart>,
    /// 着氷部分
    ///
    /// 着氷についての諸要素を示す
    #[serde(
        alias = "IcingPart",
        rename = "icingPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub icing_part: Option<MeteIcingPart>,
    /// 信頼度階級部分
    ///
    /// 信頼度階級についての諸要素を示す
    #[serde(
        alias = "ReliabilityClassPart",
        rename = "reliabilityClassPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub reliability_class_part: Option<MeteReliabilityClassPart>,
    /// 信頼度数値部分
    ///
    /// 信頼度数値についての諸要素を示す
    #[serde(
        alias = "ReliabilityValuePart",
        rename = "reliabilityValuePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub reliability_value_part: Option<MeteReliabilityValuePart>,
    /// 階級部分
    ///
    /// 階級についての諸要素を示す
    #[serde(
        alias = "ClassPart",
        rename = "classPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub class_part: Option<MeteClassPart>,
    /// 警報級の可能性部分
    ///
    /// 警報級の可能性についての諸要素を示す
    #[serde(
        alias = "PossibilityRankOfWarningPart",
        rename = "possibilityRankOfWarningPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub possibility_rank_of_warning_part: Option<MetePossibilityRankOfWarningPart>,
    /// 台風呼名部分
    ///
    /// 台風呼名についての諸要素を示す
    #[serde(
        alias = "TyphoonNamePart",
        rename = "typhoonNamePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub typhoon_name_part: Option<MeteTyphoonNamePart>,
    /// 中心部分
    ///
    /// 台風や低気圧等の中心についての諸要素を示す
    #[serde(
        alias = "CenterPart",
        rename = "centerPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub center_part: Option<MeteCenterPart>,
    /// 座標部分
    ///
    /// 座標についての諸要素を示す
    #[serde(
        alias = "CoordinatePart",
        rename = "coordinatePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub coordinate_part: Option<MeteCoordinatePart>,
    /// 等圧線部分
    ///
    /// 等圧線についての諸要素を示す
    #[serde(
        alias = "IsobarPart",
        rename = "isobarPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub isobar_part: Option<MeteIsobarPart>,
    /// 水位部分
    ///
    /// 水位についての諸要素を示す
    #[serde(
        alias = "WaterLevelPart",
        rename = "waterLevelPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub water_level_part: Option<MeteWaterLevelPart>,
    /// 浸水部分
    ///
    /// 浸水についての諸要素を示す
    #[serde(
        alias = "FloodAssumptionTable",
        rename = "floodAssumptionTable",
        skip_serializing_if = "Option::is_none"
    )]
    pub flood_assumption_table: Option<MeteFloodAssumptionTable>,
    /// 流量部分
    ///
    /// 流量についての諸要素を示す
    #[serde(
        alias = "DischargePart",
        rename = "dischargePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub discharge_part: Option<MeteDischargePart>,
    /// 天候の特徴
    ///
    /// 「出現の可能性が最も大きい天候」並びに「特徴のある気温、降水量、日照時間等の確率」を示す
    #[serde(
        alias = "ClimateFeaturePart",
        rename = "climateFeatureParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub climate_feature_parts: Vec<EbClimateFeature>,
    /// 気温、降水量、日照時間等の、値と平年差など
    ///
    /// 気温、降水量、日照時間等の、値と平年差等を示す
    #[serde(
        alias = "ClimateValuesPart",
        rename = "climateValuesParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub climate_values_parts: Vec<MeteClimateValuesPart>,
    /// 気温、降水量、日照時間等の確率
    #[serde(
        alias = "ClimateProbabilityValuesPart",
        rename = "climateProbabilityValuesPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub climate_probability_values_part: Option<MeteClimateProbabilityValuesPart>,
    /// 事象の月日
    ///
    /// 事象の月日（梅雨入り見込みの日付、等）
    #[serde(
        alias = "EventDatePart",
        rename = "eventDatePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_date_part: Option<MeteEventDatePart>,
    /// 平年値の階級閾値
    ///
    /// 週間予報で7日間降水量の平年値の階級閾値を示す
    #[serde(
        alias = "PrecipitationClassPart",
        rename = "precipitationClassPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub precipitation_class_part: Option<EbClassThresholdOfAverage>,
    /// 太陽天頂角部分
    ///
    /// 太陽天頂角
    #[serde(
        alias = "SolarZenithAnglePart",
        rename = "solarZenithAnglePart",
        skip_serializing_if = "Option::is_none"
    )]
    pub solar_zenith_angle_part: Option<MeteSolarZenithAnglePart>,
    /// ＵＶインデックス部分
    ///
    /// ＵＶインデックス
    #[serde(
        alias = "UvIndexPart",
        rename = "uvIndexPart",
        skip_serializing_if = "Option::is_none"
    )]
    pub uv_index_part: Option<MeteUvIndexPart>,
    /// 暴風域に入る確率
    ///
    /// 暴風域（風速50kt以上）に入る確率
    #[serde(
        alias = "FiftyKtWindProbabilityPart",
        rename = "fiftyKtWindProbabilityParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub fifty_kt_wind_probability_parts: Vec<MeteFiftyKtWindProbabilityPart>,
    /// 事象部
    ///
    /// 発生したもしくは発生が見込まれる事象を示す
    #[serde(
        alias = "EventPart",
        rename = "eventParts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub event_parts: Vec<MeteEventPart>,
    /// 汎用で利用するテキスト形式
    ///
    /// テキスト形式で内容を示す。汎用で利用する。
    #[serde(
        alias = "Text",
        rename = "texts",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub texts: Vec<EbReferableString>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteReliabilityClassPart {
    /// 信頼度階級
    ///
    /// 信頼度の階級を示す
    #[serde(alias = "ReliabilityClass", rename = "reliabilityClasses")]
    pub reliability_classes: Vec<EbReliabilityClass>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteReliabilityValuePart {
    /// 信頼度数値
    ///
    /// 信頼度の数値を示す
    #[serde(alias = "ReliabilityValue", rename = "reliabilityValues")]
    pub reliability_values: Vec<EbReliabilityValue>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSeaIcePart {
    /// 文章形式の表現
    ///
    /// 海氷の状態を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSeaIce>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSeaIce>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSeaIce>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaSeaIce>,
    /// 海氷
    #[serde(
        alias = "SeaIce",
        rename = "seaIces",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSentence {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 種類
    ///
    /// この要素の種類を示す
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSequenceTidalLevel {
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 文章形式の表現
    ///
    /// 領域の一部の区域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 変化を表す時要素
    ///
    /// 変化を表す時間表現を示す
    #[serde(
        alias = "TimeModifier",
        rename = "timeModifier",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub time_modifier: Option<String>,
    /// 潮位
    #[serde(
        alias = "TidalLevel",
        rename = "tidalLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    /// 周期
    ///
    /// 潮位変動の周期を示す
    #[serde(
        alias = "TidalPeriod",
        rename = "tidalPeriods",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_periods: Vec<EbTidalPeriod>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSignificancy {
    /// 分類
    ///
    /// 危険度又は警戒レベルの分類を示す
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 文章形式の表現
    ///
    /// 予報期間を超えて危険度又は警戒レベルが継続することを文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 危険度の内容
    ///
    /// 危険度の内容を記述
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 危険度コード
    ///
    /// Name要素に対応したコードを示す
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 状況の補足説明
    ///
    /// 危険度の状況を記述する
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 注意事項・付加事項
    ///
    /// 注意事項・付加事項等を示す
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSignificancyPart {
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(alias = "Base", rename = "base")]
    pub base: MeteBaseSignificancy,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSnowDepthPart {
    /// 文章形式の表現
    ///
    /// 積雪深の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSnowDepth>,
    /// 積雪深
    #[serde(
        alias = "SnowDepth",
        rename = "snowDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snow_depths: Vec<EbSnowDepth>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSnowfallDepthPart {
    /// 時系列での参照番号
    ///
    /// 天気予報を時系列で表現する場合の参照番号
    #[serde(
        alias = "@refID",
        rename = "refID",
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    /// 文章形式の表現
    ///
    /// 降雪量部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSnowfallDepth>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSnowfallDepth>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSnowfallDepth>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaSnowfallDepth>,
    /// 降雪量
    #[serde(
        alias = "SnowfallDepth",
        rename = "snowfallDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSolarZenithAnglePart {
    /// 太陽天頂角
    #[serde(alias = "SolarZenithAngle", rename = "solarZenithAngles")]
    pub solar_zenith_angles: Vec<EbSolarZenithAngle>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteStation {
    /// 観測官署名称
    ///
    /// 都道府県市町村名につづけて気象官署名を記載する
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 観測官署コード
    #[serde(alias = "Code", rename = "codes")]
    pub codes: Vec<MeteStationCode>,
    /// 観測官署の場所
    #[serde(
        alias = "Location",
        rename = "location",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub location: Option<String>,
    /// 観測場所の状況
    ///
    /// 観測場所の状況について補足が必要な場合その内容を示す
    #[serde(
        alias = "Status",
        rename = "status",
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<String>,
    /// 観測官署の座標
    #[serde(
        alias = "Coordinate",
        rename = "coordinates",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteStationCode {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 観測官署コード種別
    ///
    /// この要素のコード種別を示す
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteStations {
    /// コード種別
    ///
    /// この要素の子要素であるStation要素のCode要素のコード種別を示す
    #[serde(
        alias = "@codeType",
        rename = "codeType",
        skip_serializing_if = "Option::is_none"
    )]
    pub code_type: Option<String>,
    /// 対象地点
    ///
    /// 個々の対象地点を示す。
    #[serde(alias = "Station", rename = "stations")]
    pub stations: Vec<MeteStation>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaHumidity {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseHumidity>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseHumidity>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseHumidity>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalHumidity>,
    /// 湿度
    #[serde(
        alias = "Humidity",
        rename = "humidities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaIcing {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseIcing>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseIcing>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseIcing>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalIcing>,
    /// 着氷
    #[serde(
        alias = "Icing",
        rename = "icings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaPrecipitation {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePrecipitation>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePrecipitation>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePrecipitation>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPrecipitation>,
    /// 降水量
    #[serde(
        alias = "Precipitation",
        rename = "precipitations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaPressure {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePressure>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePressure>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePressure>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPressure>,
    /// 気圧
    #[serde(
        alias = "Pressure",
        rename = "pressures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaSeaIce {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSeaIce>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSeaIce>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSeaIce>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSeaIce>,
    /// 海氷
    #[serde(
        alias = "SeaIce",
        rename = "seaIces",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaSnowfallDepth {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSnowfallDepth>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSnowfallDepth>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSnowfallDepth>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSnowfallDepth>,
    /// 降雪量
    #[serde(
        alias = "SnowfallDepth",
        rename = "snowfallDepths",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaTemperature {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTemperature>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTemperature>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTemperature>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTemperature>,
    /// 気温
    #[serde(
        alias = "Temperature",
        rename = "temperatures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaTidalLevel {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTidalLevel>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTidalLevel>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTidalLevel>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTidalLevel>,
    /// 潮位
    #[serde(
        alias = "TidalLevel",
        rename = "tidalLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    /// 周期
    ///
    /// 潮位変動の周期を示す
    #[serde(
        alias = "TidalPeriod",
        rename = "tidalPeriods",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_periods: Vec<EbTidalPeriod>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 連続
    ///
    /// 連続した内容を示す
    #[serde(
        alias = "Sequence",
        rename = "sequences",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sequences: Vec<MeteSequenceTidalLevel>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaVisibility {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseVisibility>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseVisibility>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseVisibility>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalVisibility>,
    /// 視程
    #[serde(
        alias = "Visibility",
        rename = "visibilities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaWaveHeight {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWaveHeight>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWaveHeight>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWaveHeight>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWaveHeight>,
    /// 波高
    #[serde(
        alias = "WaveHeight",
        rename = "waveHeights",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaWeather {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWeather>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWeather>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWeather>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWeather>,
    /// 天気
    #[serde(
        alias = "Weather",
        rename = "weathers",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaWind {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWind>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWind>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWind>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWind>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 風向（数値）
    ///
    /// 風向の数値表現を示す
    #[serde(
        alias = "WindDegree",
        rename = "windDegrees",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 風力
    #[serde(
        alias = "WindScale",
        rename = "windScales",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaWindDirection {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindDirection>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindDirection>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindDirection>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindDirection>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSubAreaWindSpeed {
    /// 地域の名称
    ///
    /// 一部領域の名称を示す
    #[serde(
        alias = "AreaName",
        rename = "areaName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_name: Option<String>,
    /// 文章形式の表現
    ///
    /// 一部領域の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindSpeed>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindSpeed>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindSpeed>,
    /// 地域
    ///
    /// 領域の一部の区域の内容を示す
    #[serde(
        alias = "Local",
        rename = "locals",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindSpeed>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSunshinePart {
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSunshine>,
    /// 日照
    #[serde(
        alias = "Sunshine",
        rename = "sunshines",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sunshines: Vec<EbSunshine>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteSynopsisPart {
    /// 気象要因
    #[serde(alias = "Synopsis", rename = "synopses")]
    pub synopses: Vec<EbSynopsis>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTemperaturePart {
    /// 文章形式の表現
    ///
    /// 気温部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTemperature>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTemperature>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTemperature>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaTemperature>,
    /// 気温
    #[serde(
        alias = "Temperature",
        rename = "temperatures",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteText {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 文章の種類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTidalAreaPart {
    /// 高潮予報区間の名称
    #[serde(alias = "Area", rename = "area")]
    pub area: MeteArea,
    /// 受け持ち区間
    ///
    /// 高潮予報区間の受け持ち区間を示す
    #[serde(
        alias = "ChargeSection",
        rename = "chargeSections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub charge_sections: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTidalLevelPart {
    /// 文章形式の表現
    ///
    /// 潮位部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTidalLevel>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTidalLevel>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTidalLevel>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaTidalLevel>,
    /// 潮位
    #[serde(
        alias = "TidalLevel",
        rename = "tidalLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    /// 周期
    ///
    /// 潮位変動の周期を示す
    #[serde(
        alias = "TidalPeriod",
        rename = "tidalPeriods",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_periods: Vec<EbTidalPeriod>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTidalWarningAddition {
    /// 高潮予報区間付加情報
    ///
    /// 高潮予報区間の諸要素を示す
    #[serde(alias = "TidalAreaPart", rename = "tidalAreaPart")]
    pub tidal_area_part: MeteTidalAreaPart,
    /// 水位・流量観測所付加情報
    ///
    /// 水位観測所の地点と基準の諸要素を示す
    #[serde(alias = "HydrometricStationPart", rename = "hydrometricStationParts")]
    pub hydrometric_station_parts: Vec<MeteHydrometricStationPart>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTimeDefine {
    /// 時刻ＩＤ
    #[serde(alias = "@timeId", rename = "timeId")]
    pub time_id: u8,
    /// 基点時刻
    ///
    /// この時刻ＩＤに対応する基点時刻を示す
    #[serde(alias = "DateTime", rename = "dateTime")]
    pub date_time: EbDateTime,
    /// 対象期間
    ///
    /// この時刻ＩＤに対応する対象期間を示す
    #[serde(
        alias = "Duration",
        rename = "duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    /// 予報・観測時間の内容
    ///
    /// 予報期間、観測時間を文章で示す
    #[serde(
        alias = "Name",
        rename = "name",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub name: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTimeDefines {
    /// 個々の時刻定義
    ///
    /// 時系列の時刻定義を示す
    #[serde(alias = "TimeDefine", rename = "timeDefines")]
    pub time_defines: Vec<MeteTimeDefine>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTimeSeriesInfo {
    /// 時系列の時刻定義セット
    ///
    /// この要素が示す時系列の時刻の定義群を示す
    #[serde(alias = "TimeDefines", rename = "timeDefines")]
    pub time_defines: MeteTimeDefines,
    /// 予報の内容
    ///
    /// 時系列予報の内容を示す
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<MeteItem>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteTyphoonNamePart {
    /// 呼名（英字）
    ///
    /// 台風の英字の呼名を示す
    #[serde(
        alias = "Name",
        rename = "name",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub name: Option<String>,
    /// 呼名（かな）
    ///
    /// 台風のかなの呼名を示す
    #[serde(
        alias = "NameKana",
        rename = "nameKana",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub name_kana: Option<String>,
    /// 台風番号
    #[serde(
        alias = "Number",
        rename = "number",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub number: Option<String>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteUvIndexPart {
    /// ＵＶインデックス
    ///
    /// UVインデックス
    #[serde(alias = "UvIndex", rename = "uvIndexes")]
    pub uv_indexes: Vec<EbUvIndex>,
    /// 汎用で利用するテキスト形式
    ///
    /// テキスト形式で内容を示す。汎用で利用する。
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteVisibilityPart {
    /// 文章形式の表現
    ///
    /// 視程部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseVisibility>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseVisibility>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseVisibility>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaVisibility>,
    /// 視程
    #[serde(
        alias = "Visibility",
        rename = "visibilities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWarning {
    /// 種別
    ///
    /// この要素が示す注意・警戒事項の種別を示す
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 注意・警戒事項の内容
    ///
    /// 対象地域で発表されている特別警報・警報・注意報を示す
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<MeteItem>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWarningAreaPart {
    /// 分類
    ///
    /// 警戒領域部分の分類を示す
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 風速
    ///
    /// 警戒領域の風速（強風域は15メートル、30ノット、暴風域は25メートル、50ノット）
    #[serde(alias = "WindSpeed", rename = "windSpeeds")]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 円
    ///
    /// 警戒領域（円）の諸要素を示す
    #[serde(alias = "Circle", rename = "circle")]
    pub circle: EbCircle,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWarningNotice {
    /// 開始時間情報
    ///
    /// 警報等への切り替えの開始時間を文字列で示す
    #[serde(alias = "StartTime", rename = "startTime")]
    pub start_time: MeteForecastTerm,
    /// 警報等への切り替え
    ///
    /// 警報等への切り替えの可能性を文字列で示す
    #[serde(alias = "Note", rename = "note", deserialize_with = "trim_string")]
    pub note: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWaterLevelPart {
    /// 水位
    #[serde(
        alias = "WaterLevel",
        rename = "waterLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub water_levels: Vec<EbWaterLevel>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWaveHeightForecastPart {
    /// 時系列での参照番号
    ///
    /// 波予報を時系列で表現する場合の参照番号
    #[serde(alias = "@refID", rename = "refID")]
    pub ref_id: u8,
    /// 文章形式の表現
    ///
    /// 波高部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWaveHeight>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWaveHeight>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWaveHeight>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWaveHeight>,
    /// 波高
    #[serde(
        alias = "WaveHeight",
        rename = "waveHeights",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWaveHeightPart {
    /// 文章形式の表現
    ///
    /// 波高部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWaveHeight>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWaveHeight>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWaveHeight>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWaveHeight>,
    /// 波高
    #[serde(
        alias = "WaveHeight",
        rename = "waveHeights",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWeatherCodePart {
    /// テロップ用天気予報用語番号
    #[serde(alias = "WeatherCode", rename = "weatherCodes")]
    pub weather_codes: Vec<EbWeatherCode>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWeatherForecastPart {
    /// 時系列での参照番号
    ///
    /// 天気予報を時系列で表現する場合の参照番号
    #[serde(alias = "@refID", rename = "refID")]
    pub ref_id: u8,
    /// 文章形式の表現
    ///
    /// 天気部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWeather>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWeather>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWeather>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWeather>,
    /// 天気
    #[serde(
        alias = "Weather",
        rename = "weathers",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWeatherPart {
    /// 文章形式の表現
    ///
    /// 天気部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWeather>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWeather>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWeather>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWeather>,
    /// 天気
    #[serde(
        alias = "Weather",
        rename = "weathers",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWindDirectionPart {
    /// 文章形式の表現
    ///
    /// 風向部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindDirection>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindDirection>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindDirection>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWindDirection>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWindForecastPart {
    /// 時系列での参照番号
    ///
    /// 風予報を時系列で表現する場合の参照番号
    #[serde(alias = "@refID", rename = "refID")]
    pub ref_id: u8,
    /// 文章形式の表現
    ///
    /// 風部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWind>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWind>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWind>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWind>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWindPart {
    /// 文章形式の表現
    ///
    /// 風部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWind>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWind>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWind>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWind>,
    /// 風向
    #[serde(
        alias = "WindDirection",
        rename = "windDirections",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    /// 風向（数値）
    ///
    /// 風向の数値表現を示す
    #[serde(
        alias = "WindDegree",
        rename = "windDegrees",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 風力
    #[serde(
        alias = "WindScale",
        rename = "windScales",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWindSpeedLevel {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 時系列での参照番号
    ///
    /// 時系列で表現する場合の参照番号を示す。
    #[serde(alias = "@refID", rename = "refID")]
    pub ref_id: u8,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    /// 範囲
    ///
    /// 階級の最低風速、最大風速をxs:list型で示す。
    #[serde(alias = "@range", rename = "ranges")]
    pub ranges: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MeteWindSpeedPart {
    /// 文章形式の表現
    ///
    /// 風速部分の内容を文章形式で示す
    #[serde(
        alias = "Sentence",
        rename = "sentence",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    /// 卓越もしくは変化前
    ///
    /// 卓越する内容、もしくは変化前の内容を示す
    #[serde(
        alias = "Base",
        rename = "base",
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindSpeed>,
    /// 断続現象
    ///
    /// 断続的に発生する現象の内容を示す
    #[serde(
        alias = "Temporary",
        rename = "temporaries",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindSpeed>,
    /// 変化後
    ///
    /// 変化後の内容を示す
    #[serde(
        alias = "Becoming",
        rename = "becomings",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindSpeed>,
    /// 地域
    ///
    /// 領域全体と同じ予報表現を行う一部領域の内容を示す
    #[serde(
        alias = "SubArea",
        rename = "subAreas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWindSpeed>,
    /// 風速
    #[serde(
        alias = "WindSpeed",
        rename = "windSpeeds",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    /// 風速レベル
    ///
    /// 府県天気予報の3時間内代表風で利用する風速レベルを示す
    #[serde(
        alias = "WindSpeedLevel",
        rename = "windSpeedLevels",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speed_levels: Vec<MeteWindSpeedLevel>,
    /// 起時
    ///
    /// 発生時刻を示す
    #[serde(
        alias = "Time",
        rename = "time",
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisAccuracy {
    /// 震源位置の精度値
    #[serde(alias = "Epicenter", rename = "epicenter")]
    pub epicenter: SeisAccuracyEpicenter,
    /// 深さの精度値
    #[serde(alias = "Depth", rename = "depth")]
    pub depth: SeisAccuracyDepth,
    /// Mの精度値
    #[serde(alias = "MagnitudeCalculation", rename = "magnitudeCalculation")]
    pub magnitude_calculation: SeisAccuracyMagnitude,
    /// M計算使用観測点数
    #[serde(
        alias = "NumberOfMagnitudeCalculation",
        rename = "numberOfMagnitudeCalculation"
    )]
    pub number_of_magnitude_calculation: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisAccuracyDepth {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 深さ精度のランク
    #[serde(alias = "@rank", rename = "rank")]
    pub rank: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisAccuracyEpicenter {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 震源位置の精度のランク
    #[serde(alias = "@rank", rename = "rank")]
    pub rank: i64,
    /// 震源位置の精度のランク２
    #[serde(alias = "@rank2", rename = "rank2")]
    pub rank2: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisAccuracyMagnitude {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// M精度のランク
    #[serde(alias = "@rank", rename = "rank")]
    pub rank: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisAftershockItem {
    /// 開始時刻
    ///
    /// 余震確率の予想開始時刻を示す
    #[serde(alias = "StartTime", rename = "startTime")]
    pub start_time: DateTime,
    /// 終了時刻
    ///
    /// 余震確率の予想終了時刻を示す
    #[serde(alias = "EndTime", rename = "endTime")]
    pub end_time: DateTime,
    /// 余震確率
    #[serde(alias = "ProbabilityOfAftershock", rename = "probabilityOfAftershock")]
    pub probability_of_aftershock: EbProbabilityOfAftershock,
    /// 対象マグニチュード
    ///
    /// 余震確率の対象となるマグニチュードを示す
    #[serde(alias = "TargetMagnitude", rename = "targetMagnitude")]
    pub target_magnitude: EbMagnitude,
    /// 情報文
    ///
    /// 余震確率に関する内容を示す
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisAftershocks {
    /// 個々の余震確率を示す
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<SeisAftershockItem>,
    /// 情報文
    ///
    /// 余震確率に関する内容を示す
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisBody {
    /// 命名要素
    ///
    /// 命名に関する要素を示す
    #[serde(
        alias = "Naming",
        rename = "naming",
        skip_serializing_if = "Option::is_none"
    )]
    pub naming: Option<SeisNaming>,
    /// 津波要素
    ///
    /// 津波の諸要素を示す
    #[serde(
        alias = "Tsunami",
        rename = "tsunami",
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami: Option<SeisTsunami>,
    /// 震源要素
    ///
    /// 地震の諸要素を示す
    #[serde(
        alias = "Earthquake",
        rename = "earthquakes",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub earthquakes: Vec<SeisEarthquake>,
    /// 震度要素
    ///
    /// 震度・長周期地震動階級の諸要素を示す
    #[serde(
        alias = "Intensity",
        rename = "intensity",
        skip_serializing_if = "Option::is_none"
    )]
    pub intensity: Option<SeisIntensity>,
    /// 東海関連情報要素
    ///
    /// 東海関連情報の要素を示す
    #[serde(
        alias = "Tokai",
        rename = "tokai",
        skip_serializing_if = "Option::is_none"
    )]
    pub tokai: Option<SeisTokai>,
    /// 地震関連情報要素
    ///
    /// 地震関連情報の要素を示す
    #[serde(
        alias = "EarthquakeInfo",
        rename = "earthquakeInfo",
        skip_serializing_if = "Option::is_none"
    )]
    pub earthquake_info: Option<SeisEarthquakeInfo>,
    /// 地震回数
    ///
    /// 地震回数の諸要素を示す
    #[serde(
        alias = "EarthquakeCount",
        rename = "earthquakeCount",
        skip_serializing_if = "Option::is_none"
    )]
    pub earthquake_count: Option<SeisEarthquakeCount>,
    /// 余震確率
    ///
    /// 余震確率の諸要素を示す
    #[serde(
        alias = "Aftershock",
        rename = "aftershock",
        skip_serializing_if = "Option::is_none"
    )]
    pub aftershock: Option<SeisAftershocks>,
    /// テキスト要素
    ///
    /// お知らせ、自由文の要素を示す
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
    /// 次回発表予定
    ///
    /// 次回発表予定の予告を行う(情報発表の終了を含む)
    #[serde(
        alias = "NextAdvisory",
        rename = "nextAdvisory",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub next_advisory: Option<String>,
    /// 付加文要素
    ///
    /// 付加文の諸要素を示す
    #[serde(
        alias = "Comments",
        rename = "comments",
        skip_serializing_if = "Option::is_none"
    )]
    pub comments: Option<SeisComment>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisCategory {
    /// 今回予報
    ///
    /// 今回の予報カテゴリーを示す
    #[serde(alias = "Kind", rename = "kind")]
    pub kind: SeisKind,
    /// 前回予報
    ///
    /// 前回の予報カテゴリーを示す
    #[serde(
        alias = "LastKind",
        rename = "lastKind",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_kind: Option<SeisKind>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisCodeDefine {
    /// コード種別
    #[serde(alias = "Type", rename = "types")]
    pub types: Vec<SeisCodeDefineType>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisCodeDefineType {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 定義する相対xpath
    ///
    /// 本要素の親要素からみた定義対象となる要素の相対xpathを記述する。
    #[serde(alias = "@xpath", rename = "xpath")]
    pub xpath: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisComment {
    /// 警報付加文
    ///
    /// 警報の固定付加文の諸要素を示す
    #[serde(
        alias = "WarningComment",
        rename = "warningComment",
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_comment: Option<SeisCommentForm>,
    /// 予報付加文
    ///
    /// 予報の固定付加文の諸要素を示す
    #[serde(
        alias = "ForecastComment",
        rename = "forecastComment",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_comment: Option<SeisCommentForm>,
    /// 観測付加文
    ///
    /// 観測値の固定付加文の諸要素を示す
    #[serde(
        alias = "ObservationComment",
        rename = "observationComment",
        skip_serializing_if = "Option::is_none"
    )]
    pub observation_comment: Option<SeisCommentForm>,
    /// 用途限定しない付加文
    ///
    /// 上記以外の範疇の固定付加文の諸要素を示す
    #[serde(
        alias = "VarComment",
        rename = "varComment",
        skip_serializing_if = "Option::is_none"
    )]
    pub var_comment: Option<SeisCommentForm>,
    /// 自由付加文
    #[serde(
        alias = "FreeFormComment",
        rename = "freeFormComment",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub free_form_comment: Option<String>,
    /// 参考URI
    ///
    /// 参考となるURIで、長周期地震動に関する観測情報のみで利用する
    #[serde(alias = "URI", rename = "uRI", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisCommentForm {
    /// コード種別
    #[serde(alias = "@codeType", rename = "codeType")]
    pub code_type: String,
    /// 付加文内容
    ///
    /// 付加文を示す
    #[serde(alias = "Text", rename = "text", deserialize_with = "trim_string")]
    pub text: String,
    /// 付加文コード
    ///
    /// 付加文コードを示す。複数表記の場合はxs:list型を用いること。
    #[serde(alias = "Code", rename = "codes")]
    pub codes: StringList,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisCountData {
    /// 回数要素の内容を示す
    ///
    /// 1時間回数や累積回数などの具体的な回数内容を示す
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 開始時刻
    #[serde(alias = "StartTime", rename = "startTime")]
    pub start_time: DateTime,
    /// 終了時刻
    #[serde(alias = "EndTime", rename = "endTime")]
    pub end_time: DateTime,
    /// 地震回数
    #[serde(alias = "Number", rename = "number")]
    pub number: i64,
    /// 有感地震回数
    #[serde(alias = "FeltNumber", rename = "feltNumber")]
    pub felt_number: i64,
    /// 状況
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisCurrentHeight {
    /// 観測時刻(始まり)
    ///
    /// 現在波の開始時刻を示す
    #[serde(
        alias = "StartTime",
        rename = "startTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_time: Option<DateTime>,
    /// 観測時刻(終わり)
    ///
    /// 現在波の終了時刻を示す
    #[serde(
        alias = "EndTime",
        rename = "endTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub end_time: Option<DateTime>,
    /// 観測状況
    ///
    /// 現在波の状況を示す
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 高さの値
    ///
    /// 現在波の高さの値を示す
    #[serde(
        alias = "TsunamiHeight",
        rename = "tsunamiHeight",
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height: Option<EbTsunamiHeight>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisEarthquake {
    /// 地震発生時刻
    #[serde(
        alias = "OriginTime",
        rename = "originTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub origin_time: Option<DateTime>,
    /// 地震発現時刻
    ///
    /// 地震発現時刻(観測点で地震を検知した時刻)
    #[serde(alias = "ArrivalTime", rename = "arrivalTime")]
    pub arrival_time: DateTime,
    /// 震源要素の補足情報を示す
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 震源要素
    #[serde(
        alias = "Hypocenter",
        rename = "hypocenter",
        skip_serializing_if = "Option::is_none"
    )]
    pub hypocenter: Option<SeisHypocenter>,
    /// マグニチュード
    ///
    /// マグニチュードの諸要素を示す
    #[serde(alias = "Magnitude", rename = "magnitudes")]
    pub magnitudes: Vec<EbMagnitude>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisEarthquakeCount {
    /// 個々の回数要素を含む
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<SeisCountData>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisEarthquakeInfo {
    /// 種別
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 情報名称
    #[serde(
        alias = "InfoKind",
        rename = "infoKind",
        deserialize_with = "trim_string"
    )]
    pub info_kind: String,
    /// 情報種別番号
    #[serde(
        alias = "InfoSerial",
        rename = "infoSerial",
        skip_serializing_if = "Option::is_none"
    )]
    pub info_serial: Option<SeisInfoSerial>,
    /// 本文
    ///
    /// 地震関連情報本文を示す
    #[serde(alias = "Text", rename = "text", deserialize_with = "trim_string")]
    pub text: String,
    /// 参考情報
    #[serde(
        alias = "Appendix",
        rename = "appendix",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub appendix: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisFirstHeight {
    /// 到達時刻
    ///
    /// 第1波の到達予想時刻(早い方)を示す
    #[serde(
        alias = "ArrivalTimeFrom",
        rename = "arrivalTimeFrom",
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time_from: Option<DateTime>,
    /// 到達時刻
    ///
    /// 第1波の到達予想時刻(遅い方)を示す
    #[serde(
        alias = "ArrivalTimeTo",
        rename = "arrivalTimeTo",
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time_to: Option<DateTime>,
    /// 第1波の時刻
    #[serde(
        alias = "ArrivalTime",
        rename = "arrivalTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    /// 第1波状況
    ///
    /// 第1波の状況を示す
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 極性
    ///
    /// 第1波の極性を示す
    #[serde(
        alias = "Initial",
        rename = "initial",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub initial: Option<String>,
    /// 高さの値
    ///
    /// 第1波の高さの値を示す
    #[serde(
        alias = "TsunamiHeight",
        rename = "tsunamiHeight",
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height: Option<EbTsunamiHeight>,
    /// 修正情報
    ///
    /// 修正が発生した場合に記載する
    #[serde(
        alias = "Revise",
        rename = "revise",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub revise: Option<String>,
    /// 周期
    ///
    /// 第1波の周期を示す
    #[serde(
        alias = "Period",
        rename = "period",
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisForecastArea {
    /// 予報区名
    ///
    /// 予報区名称を示す
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 予報区コード
    ///
    /// 予報区のコードを示す
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 該当市町村
    ///
    /// 予報区に所属する市町村(現在より分解能の細かい予報区分)を示す
    #[serde(
        alias = "City",
        rename = "cities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub cities: Vec<SeisForecastCity>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisForecastCity {
    /// 市町村名
    ///
    /// 市町村名称を示す
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 市町村コード
    ///
    /// 市町村のコードを示す
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisForecastInt {
    /// 補足情報
    #[serde(
        alias = "@bound",
        rename = "bound",
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    /// 最小震度
    ///
    /// 予測震度の最小を示す
    #[serde(
        alias = "From",
        rename = "from",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub from: Option<String>,
    /// 最大震度
    ///
    /// 予測震度の最大を示す
    #[serde(
        alias = "To",
        rename = "to",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub to: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisForecastLgInt {
    /// 補足情報
    #[serde(
        alias = "@bound",
        rename = "bound",
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    /// 最小長周期地震動階級
    ///
    /// 予測長周期地震動階級の最小を示す
    #[serde(
        alias = "From",
        rename = "from",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub from: Option<String>,
    /// 最大長周期地震動階級
    ///
    /// 予測長周期地震動階級の最大を示す
    #[serde(
        alias = "To",
        rename = "to",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub to: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisHypoArea {
    /// 震央地名
    ///
    /// 震源位置の地名を示す
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 震央地名コード
    ///
    /// 震央地名のコードを示す
    #[serde(alias = "Code", rename = "code")]
    pub code: SeisHypoAreaCode,
    /// 震源要素
    ///
    /// 震源の緯度、経度、深さの位置を示す
    #[serde(alias = "Coordinate", rename = "coordinates")]
    pub coordinates: Vec<EbCoordinate>,
    /// 短縮用震央地名
    ///
    /// 短縮用震源位置の地名を示す
    #[serde(
        alias = "ReduceName",
        rename = "reduceName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub reduce_name: Option<String>,
    /// 短縮用震央地名コード
    ///
    /// 短縮用震央地名のコードを示す
    #[serde(
        alias = "ReduceCode",
        rename = "reduceCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub reduce_code: Option<SeisHypoAreaReduceCode>,
    /// 詳細震央地名
    ///
    /// 海外の詳細な震源位置の地名を示す
    #[serde(
        alias = "DetailedName",
        rename = "detailedName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub detailed_name: Option<String>,
    /// 詳細震央地名コード
    ///
    /// 詳細震央地名のコードを示す
    #[serde(
        alias = "DetailedCode",
        rename = "detailedCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_code: Option<SeisHypoAreaDetailedCode>,
    /// 震央補助表現
    #[serde(
        alias = "NameFromMark",
        rename = "nameFromMark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub name_from_mark: Option<String>,
    /// 震央補助表現コード
    ///
    /// 震央補助表現のコードを示す
    #[serde(
        alias = "MarkCode",
        rename = "markCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub mark_code: Option<SeisHypoAreaMarkCode>,
    /// 方向
    ///
    /// 16方位で方向を示す
    #[serde(
        alias = "Direction",
        rename = "direction",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub direction: Option<String>,
    /// 距離
    ///
    /// 震源と対象地点の距離を示す(10km単位)
    #[serde(
        alias = "Distance",
        rename = "distance",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance: Option<SeisHypoAreaDistance>,
    /// 内陸判定
    ///
    /// 震源位置が内陸か海域かを判定する
    #[serde(
        alias = "LandOrSea",
        rename = "landOrSea",
        skip_serializing_if = "Option::is_none"
    )]
    pub land_or_sea: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisHypoAreaCode {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// コード種別
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisHypoAreaDetailedCode {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// コード種別
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisHypoAreaDistance {
    #[serde(alias = "$text", rename = "value")]
    pub value: i64,
    /// 単位
    #[serde(alias = "@unit", rename = "unit")]
    pub unit: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisHypoAreaMarkCode {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// コード種別
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisHypoAreaReduceCode {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// コード種別
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisHypocenter {
    /// 震源位置要素
    ///
    /// 震源位置の諸要素を示す
    #[serde(alias = "Area", rename = "area")]
    pub area: SeisHypoArea,
    /// 震源決定機関
    ///
    /// 震源決定を行った機関を示す
    #[serde(
        alias = "Source",
        rename = "source",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub source: Option<String>,
    /// 精度情報
    ///
    /// 精度情報の諸要素を示す
    #[serde(
        alias = "Accuracy",
        rename = "accuracy",
        skip_serializing_if = "Option::is_none"
    )]
    pub accuracy: Option<SeisAccuracy>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisInfoSerial {
    /// コード種別
    #[serde(alias = "@codeType", rename = "codeType")]
    pub code_type: String,
    /// 情報種別番号名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 情報種別番号コード
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisIntensity {
    /// 震度・長周期地震動階級予測要素
    ///
    /// 震度・長周期地震動階級予測の諸要素を示す
    #[serde(
        alias = "Forecast",
        rename = "forecast",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast: Option<SeisIntensityDetail>,
    /// 震度・長周期地震動階級観測要素
    ///
    /// 震度・長周期地震動階級観測の諸要素を示す
    #[serde(
        alias = "Observation",
        rename = "observation",
        skip_serializing_if = "Option::is_none"
    )]
    pub observation: Option<SeisIntensityDetail>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisIntensityAppendix {
    /// 最大予測震度変化
    #[serde(alias = "MaxIntChange", rename = "maxIntChange")]
    pub max_int_change: i64,
    /// 最大予測長周期地震動階級変化
    #[serde(
        alias = "MaxLgIntChange",
        rename = "maxLgIntChange",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int_change: Option<i64>,
    /// 最大予測震度変化の理由
    #[serde(alias = "MaxIntChangeReason", rename = "maxIntChangeReason")]
    pub max_int_change_reason: i64,
    /// 最大予測長周期地震動変化の理由
    ///
    /// 最大予測長周期地震動変化の理由を示す(現状使用しない)
    #[serde(
        alias = "MaxLgIntChangeReason",
        rename = "maxLgIntChangeReason",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int_change_reason: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisIntensityArea {
    /// 地域名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 地域コード
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 予報カテゴリー
    ///
    /// 予報カテゴリーの要素を示す
    #[serde(
        alias = "Category",
        rename = "category",
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    /// 最大震度
    ///
    /// 最大（予測）震度を示す
    #[serde(
        alias = "MaxInt",
        rename = "maxInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_int: Option<String>,
    /// 最大長周期地震動階級（全周期）
    #[serde(
        alias = "MaxLgInt",
        rename = "maxLgInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_lg_int: Option<String>,
    /// 予測震度
    #[serde(
        alias = "ForecastInt",
        rename = "forecastInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    /// 予測長周期地震動階級
    #[serde(
        alias = "ForecastLgInt",
        rename = "forecastLgInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    /// 到達予想時刻
    #[serde(
        alias = "ArrivalTime",
        rename = "arrivalTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    /// 状況
    ///
    /// 状況等を示す
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 修正情報
    ///
    /// 修正が発生した場合に記載する
    #[serde(
        alias = "Revise",
        rename = "revise",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub revise: Option<String>,
    /// 市町村要素
    ///
    /// 市町村の諸要素を示す
    #[serde(
        alias = "City",
        rename = "cities",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub cities: Vec<SeisIntensityCity>,
    /// 観測点要素
    ///
    /// 観測点の諸要素を示す
    #[serde(
        alias = "IntensityStation",
        rename = "intensityStations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub intensity_stations: Vec<SeisIntensityStation>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisIntensityCity {
    /// 市町村名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 市町村コード
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 予報カテゴリー
    ///
    /// 予報カテゴリーの要素を示す(現状使用しない)
    #[serde(
        alias = "Category",
        rename = "category",
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    /// 最大震度
    ///
    /// 最大（予測）震度を示す
    #[serde(
        alias = "MaxInt",
        rename = "maxInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_int: Option<String>,
    /// 最大長周期地震動階級（全周期）
    #[serde(
        alias = "MaxLgInt",
        rename = "maxLgInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_lg_int: Option<String>,
    /// 予測震度
    #[serde(
        alias = "ForecastInt",
        rename = "forecastInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    /// 予測長周期地震動階級
    #[serde(
        alias = "ForecastLgInt",
        rename = "forecastLgInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    /// 到達予想時刻
    ///
    /// 到達予想時刻を示す(現状使用しない)
    #[serde(
        alias = "ArrivalTime",
        rename = "arrivalTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    /// 状況
    ///
    /// 状況等を示す
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 修正情報
    ///
    /// 修正が発生した場合に記載する
    #[serde(
        alias = "Revise",
        rename = "revise",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub revise: Option<String>,
    /// 観測点要素
    ///
    /// 観測点の諸要素を示す
    #[serde(
        alias = "IntensityStation",
        rename = "intensityStations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub intensity_stations: Vec<SeisIntensityStation>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisIntensityDetail {
    /// 使うコード体系の定義
    ///
    /// 各item個要素内におけるcodeのコード体系を定義する。
    #[serde(
        alias = "CodeDefine",
        rename = "codeDefine",
        skip_serializing_if = "Option::is_none"
    )]
    pub code_define: Option<SeisCodeDefine>,
    /// 最大震度
    #[serde(
        alias = "MaxInt",
        rename = "maxInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_int: Option<String>,
    /// 最大長周期地震動階級（全周期）
    #[serde(
        alias = "MaxLgInt",
        rename = "maxLgInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_lg_int: Option<String>,
    /// 長周期地震動に関する観測情報の種類
    ///
    /// 観測された長周期地震動階級と震度の状況の分類 を示す
    #[serde(
        alias = "LgCategory",
        rename = "lgCategory",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub lg_category: Option<String>,
    /// 予測震度
    #[serde(
        alias = "ForecastInt",
        rename = "forecastInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    /// 予測長周期地震動階級
    #[serde(
        alias = "ForecastLgInt",
        rename = "forecastLgInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    /// 予測震度付加要素
    ///
    /// 予測震度の付加要素を示す
    #[serde(
        alias = "Appendix",
        rename = "appendix",
        skip_serializing_if = "Option::is_none"
    )]
    pub appendix: Option<SeisIntensityAppendix>,
    /// 都道府県要素
    ///
    /// 都道府県の諸要素を示す
    #[serde(
        alias = "Pref",
        rename = "prefs",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub prefs: Vec<SeisIntensityPref>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisIntensityPref {
    /// 都道府県名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 都道府県コード
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 予報カテゴリー
    ///
    /// 予報カテゴリーの要素を示す
    #[serde(
        alias = "Category",
        rename = "category",
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    /// 最大震度
    #[serde(
        alias = "MaxInt",
        rename = "maxInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_int: Option<String>,
    /// 最大長周期地震動階級（全周期）
    #[serde(
        alias = "MaxLgInt",
        rename = "maxLgInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub max_lg_int: Option<String>,
    /// 予測震度
    #[serde(
        alias = "ForecastInt",
        rename = "forecastInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    /// 予測長周期地震動階級
    #[serde(
        alias = "ForecastLgInt",
        rename = "forecastLgInt",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    /// 到達予想時刻
    ///
    /// 到達予想時刻を示す(現状使用しない)
    #[serde(
        alias = "ArrivalTime",
        rename = "arrivalTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    /// 状況
    ///
    /// 状況等を示す
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 修正情報
    ///
    /// 修正が発生した場合に記載する
    #[serde(
        alias = "Revise",
        rename = "revise",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub revise: Option<String>,
    /// 地域要素
    ///
    /// 地域の諸要素を示す
    #[serde(
        alias = "Area",
        rename = "areas",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub areas: Vec<SeisIntensityArea>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisIntensityStation {
    /// 観測点名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 観測点コード
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 震度階級
    ///
    /// 震度を示す(1～4、5-、5+、6-、6+、7)
    #[serde(
        alias = "Int",
        rename = "int",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub int: Option<String>,
    /// 計測震度
    #[serde(alias = "K", rename = "k", skip_serializing_if = "Option::is_none")]
    pub k: Option<f64>,
    /// 長周期地震動階級（全周期）
    ///
    /// 長周期地震動階級を示す（全周期）
    #[serde(
        alias = "LgInt",
        rename = "lgInt",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub lg_int: Option<String>,
    /// 長周期地震動の周期別階級
    #[serde(
        alias = "LgIntPerPeriod",
        rename = "lgIntPerPeriods",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lg_int_per_periods: Vec<SeisLgIntPerPeriod>,
    /// 絶対速度応答スペクトルの最大値（全周期）
    ///
    /// 絶対速度応答スペクトルの最大値を示す（全周期）
    #[serde(alias = "Sva", rename = "sva", skip_serializing_if = "Option::is_none")]
    pub sva: Option<SeisSva>,
    /// 絶対速度応答スペクトルの周期帯における最大値
    #[serde(
        alias = "SvaPerPeriod",
        rename = "svaPerPeriods",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sva_per_periods: Vec<SeisSvaPerPeriod>,
    /// 修正情報
    ///
    /// 修正が発生した場合に記載する
    #[serde(
        alias = "Revise",
        rename = "revise",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub revise: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisKind {
    /// 警報名
    ///
    /// 注警報、予報の名称を示す
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 警報コード
    ///
    /// 注警報、予報のコードを示す
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisLgIntPerPeriod {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 対象とする周期帯
    #[serde(
        alias = "@PeriodicBand",
        rename = "periodicBand",
        skip_serializing_if = "Option::is_none"
    )]
    pub periodic_band: Option<i64>,
    /// 対象とする周期
    ///
    /// 対象とする周期を示す（現状使用しない）
    #[serde(
        alias = "@Period",
        rename = "period",
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
    /// 対象とする周期帯の単位
    #[serde(
        alias = "@PeriodUnit",
        rename = "periodUnit",
        skip_serializing_if = "Option::is_none"
    )]
    pub period_unit: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisMaxHeight {
    /// 最大波等の時刻
    #[serde(
        alias = "DateTime",
        rename = "dateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<DateTime>,
    /// 最大波等の状況
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 高さの予測値(小さい方)
    ///
    /// 最大波等の高さの予測値を示す
    #[serde(
        alias = "TsunamiHeightFrom",
        rename = "tsunamiHeightFrom",
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height_from: Option<EbTsunamiHeight>,
    /// 高さの予測値(大きな方)
    ///
    /// 最大波等の高さの予測値を示す
    #[serde(
        alias = "TsunamiHeightTo",
        rename = "tsunamiHeightTo",
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height_to: Option<EbTsunamiHeight>,
    /// 高さの値
    ///
    /// 最大波等の高さの予測値、観測値を示す
    #[serde(
        alias = "TsunamiHeight",
        rename = "tsunamiHeight",
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height: Option<EbTsunamiHeight>,
    /// 修正情報
    ///
    /// 修正が発生した場合に記載する
    #[serde(
        alias = "Revise",
        rename = "revise",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub revise: Option<String>,
    /// 周期
    ///
    /// 最大波等の周期を示す
    #[serde(
        alias = "Period",
        rename = "period",
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisNaming {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 英語の命名
    ///
    /// 英語版の命名の内容
    #[serde(
        alias = "@english",
        rename = "english",
        skip_serializing_if = "Option::is_none"
    )]
    pub english: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisSva {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 単位
    #[serde(alias = "@unit", rename = "unit")]
    pub unit: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisSvaPerPeriod {
    #[serde(alias = "$text", rename = "value", deserialize_with = "float_or_null")]
    pub value: f64,
    /// 絶対速度応答スペクトルの単位
    #[serde(alias = "@unit", rename = "unit")]
    pub unit: String,
    /// 対象とする周期帯
    #[serde(
        alias = "@PeriodicBand",
        rename = "periodicBand",
        skip_serializing_if = "Option::is_none"
    )]
    pub periodic_band: Option<i64>,
    /// 対象とする周期
    ///
    /// 対象とする周期を示す（現状使用しない）
    #[serde(
        alias = "@Period",
        rename = "period",
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
    /// 対象とする周期帯の単位
    #[serde(
        alias = "@PeriodUnit",
        rename = "periodUnit",
        skip_serializing_if = "Option::is_none"
    )]
    pub period_unit: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisTokai {
    /// 情報名称
    ///
    /// 情報名を示す
    #[serde(
        alias = "InfoKind",
        rename = "infoKind",
        deserialize_with = "trim_string"
    )]
    pub info_kind: String,
    /// 情報番号
    #[serde(
        alias = "InfoSerial",
        rename = "infoSerial",
        skip_serializing_if = "Option::is_none"
    )]
    pub info_serial: Option<SeisInfoSerial>,
    /// 情報本文
    ///
    /// 東海関連情報本文を示す
    #[serde(alias = "Text", rename = "text", deserialize_with = "trim_string")]
    pub text: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisTsunami {
    /// 津波注警報発表状況
    ///
    /// 津波注警報の発表状況を示す
    #[serde(
        alias = "Release",
        rename = "release",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub release: Option<String>,
    /// 津波観測
    ///
    /// 津波観測の諸要素を示す
    #[serde(
        alias = "Observation",
        rename = "observation",
        skip_serializing_if = "Option::is_none"
    )]
    pub observation: Option<SeisTsunamiDetail>,
    /// 津波推測
    ///
    /// 津波の早期推測の諸要素を示す
    #[serde(
        alias = "Estimation",
        rename = "estimation",
        skip_serializing_if = "Option::is_none"
    )]
    pub estimation: Option<SeisTsunamiDetail>,
    /// 津波注警報・予報
    ///
    /// 津波注警報・予報の諸要素を示す
    #[serde(
        alias = "Forecast",
        rename = "forecast",
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast: Option<SeisTsunamiDetail>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisTsunamiDetail {
    /// 使うコード体系の定義
    ///
    /// 各item個要素内におけるcodeのコード体系を定義する。
    #[serde(
        alias = "CodeDefine",
        rename = "codeDefine",
        skip_serializing_if = "Option::is_none"
    )]
    pub code_define: Option<SeisCodeDefine>,
    /// 個々の警報事項
    ///
    /// 個々の予報区毎の警報事項を示す
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<SeisTsunamiItem>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisTsunamiItem {
    /// 津波予報区
    ///
    /// 津波予報区の要素を示す
    #[serde(alias = "Area", rename = "area")]
    pub area: SeisForecastArea,
    /// 予報カテゴリー
    ///
    /// 予報カテゴリーの要素を示す
    #[serde(
        alias = "Category",
        rename = "category",
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    /// 第1波
    ///
    /// 第1波の要素を示す
    #[serde(
        alias = "FirstHeight",
        rename = "firstHeight",
        skip_serializing_if = "Option::is_none"
    )]
    pub first_height: Option<SeisFirstHeight>,
    /// 最大波
    ///
    /// 最大波の要素を示す
    #[serde(
        alias = "MaxHeight",
        rename = "maxHeight",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_height: Option<SeisMaxHeight>,
    /// 継続時間
    ///
    /// 津波の予想継続時間を示す
    #[serde(
        alias = "Duration",
        rename = "duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    /// 津波観測点
    ///
    /// 津波観測点の要素を示す
    #[serde(
        alias = "Station",
        rename = "stations",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub stations: Vec<SeisTsunamiStation>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SeisTsunamiStation {
    /// 潮位観測点名
    ///
    /// 潮位観測点名称を示す
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 潮位観測点コード
    ///
    /// 潮位観測点のコードを示す
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 観測機器
    ///
    /// 特殊観測機器のみ名称を示す
    #[serde(
        alias = "Sensor",
        rename = "sensor",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub sensor: Option<String>,
    /// 満潮時刻
    #[serde(
        alias = "HighTideDateTime",
        rename = "highTideDateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub high_tide_date_time: Option<DateTime>,
    /// 第1波
    ///
    /// 第1波の要素を示す
    #[serde(alias = "FirstHeight", rename = "firstHeight")]
    pub first_height: SeisFirstHeight,
    /// 最大波
    ///
    /// 最大波の要素を示す
    #[serde(
        alias = "MaxHeight",
        rename = "maxHeight",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_height: Option<SeisMaxHeight>,
    /// 現在波
    ///
    /// 現在波の要素を示す
    #[serde(
        alias = "CurrentHeight",
        rename = "currentHeight",
        skip_serializing_if = "Option::is_none"
    )]
    pub current_height: Option<SeisCurrentHeight>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcBody {
    /// お知らせ
    ///
    /// お知らせの文章を示す。
    #[serde(
        alias = "Notice",
        rename = "notice",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub notice: Option<String>,
    /// 防災気象情報
    #[serde(
        alias = "VolcanoInfo",
        rename = "volcanoInfos",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub volcano_infos: Vec<VolcVolcanoInfo>,
    /// 降灰に関する情報
    ///
    /// 降灰に関する情報の詳細予報事項を示す。
    #[serde(
        alias = "AshInfos",
        rename = "ashInfos",
        skip_serializing_if = "Option::is_none"
    )]
    pub ash_infos: Option<VolcAshInfos>,
    /// 本文
    ///
    /// 噴火警報・予報、解説情報、海上警報・予報の本文を示す。
    #[serde(
        alias = "VolcanoInfoContent",
        rename = "volcanoInfoContent",
        skip_serializing_if = "Option::is_none"
    )]
    pub volcano_info_content: Option<VolcVolcanoInfoContent>,
    /// 本文
    ///
    /// 噴火に関する火山観測報の本文を示す。
    #[serde(
        alias = "VolcanoObservation",
        rename = "volcanoObservation",
        skip_serializing_if = "Option::is_none"
    )]
    pub volcano_observation: Option<VolcVolcanoObservation>,
    /// テキスト要素
    ///
    /// お知らせ、自由文の要素を示す
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcArea {
    /// 対象地域・地点名称
    ///
    /// 対象火山名・対象市町村等を示す。
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 対象地域・地点コード
    ///
    /// 対象火山コード・対象市町村コードを示す。
    #[serde(alias = "Code", rename = "code", deserialize_with = "trim_string")]
    pub code: String,
    /// 対象火山座標
    ///
    /// 対象火山の緯度経度を示す。
    #[serde(
        alias = "Coordinate",
        rename = "coordinate",
        skip_serializing_if = "Option::is_none"
    )]
    pub coordinate: Option<EbCoordinate>,
    /// 基準ポイントからみた位置
    ///
    /// 対象火山の位置を示すための基準ポイントからみた位置の情報
    #[serde(
        alias = "AreaFromMark",
        rename = "areaFromMark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub area_from_mark: Option<String>,
    /// 対象火口名称
    ///
    /// 対象火口名を示す。
    #[serde(
        alias = "CraterName",
        rename = "craterName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub crater_name: Option<String>,
    /// 対象火口座標
    #[serde(
        alias = "CraterCoordinate",
        rename = "craterCoordinate",
        skip_serializing_if = "Option::is_none"
    )]
    pub crater_coordinate: Option<EbCoordinate>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcAreas {
    /// 対象地域・地点コード種別
    ///
    /// この要素下に存在するcodeの種別を示す。
    #[serde(alias = "@codeType", rename = "codeType")]
    pub code_type: String,
    /// 対象地域・地点
    ///
    /// 個々の対象地域・地点を示す。
    #[serde(alias = "Area", rename = "areas")]
    pub areas: Vec<VolcArea>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcAshInfo {
    /// 降灰予報の時刻
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 予報の開始時刻
    #[serde(alias = "StartTime", rename = "startTime")]
    pub start_time: DateTime,
    /// 予報の終了時刻
    #[serde(alias = "EndTime", rename = "endTime")]
    pub end_time: DateTime,
    /// 個々の防災気象情報要素
    ///
    /// 防災気象情報事項について、防災気象情報要素と地点等の一組の防災気象情報要素を示す。
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<VolcItem>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcAshInfos {
    /// 降灰予報の種別
    ///
    /// この要素が示す降灰予報の種別を示す。個々の種別間は独立している。
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 個々の時間における降灰予報
    ///
    /// 防災気象情報を示す。
    #[serde(alias = "AshInfo", rename = "ashInfos")]
    pub ash_infos: Vec<VolcAshInfo>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcDistance {
    #[serde(
        alias = "$text",
        rename = "value",
        default,
        deserialize_with = "trim_string"
    )]
    pub value: String,
    /// 分類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcEventTime {
    /// 現象の日本時間での日時
    #[serde(
        alias = "EventDateTime",
        rename = "eventDateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_date_time: Option<EbDateTime>,
    /// 現象の世界標準時での日時
    #[serde(
        alias = "EventDateTimeUTC",
        rename = "eventDateTimeUTC",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_date_time_utc: Option<EbDateTime>,
    /// 現象の日時についての付加文
    #[serde(
        alias = "EventDateTimeComment",
        rename = "eventDateTimeComment",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub event_date_time_comment: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcItem {
    /// 現象の日時
    #[serde(
        alias = "EventTime",
        rename = "eventTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_time: Option<VolcEventTime>,
    /// 防災気象情報要素
    #[serde(alias = "Kind", rename = "kind")]
    pub kind: VolcKind,
    /// 直前の防災気象情報要素
    ///
    /// 直前の防災気象情報要素の状況を示す。
    #[serde(
        alias = "LastKind",
        rename = "lastKind",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_kind: Option<VolcKind>,
    /// 対象地域・地点全体
    ///
    /// 対象となる地域・地点群を示す。
    #[serde(alias = "Areas", rename = "areas")]
    pub areas: VolcAreas,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcKind {
    /// 防災気象情報要素名
    #[serde(alias = "Name", rename = "name", deserialize_with = "trim_string")]
    pub name: String,
    /// 防災気象情報要素名（正式名称）
    ///
    /// 防災気象情報要素の正式名称を示す。
    #[serde(
        alias = "FormalName",
        rename = "formalName",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub formal_name: Option<String>,
    /// 防災気象情報要素コード
    ///
    /// 防災気象情報要素コードを示す。(コード辞書参考)
    #[serde(
        alias = "Code",
        rename = "code",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub code: Option<String>,
    /// 状況
    ///
    /// 防災気象情報要素やこの防災気象情報事項について状況を示す。
    #[serde(
        alias = "Condition",
        rename = "condition",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub condition: Option<String>,
    /// 火山現象の要素
    ///
    /// 量的予想などの詳細事項を示す。
    #[serde(
        alias = "Property",
        rename = "property",
        skip_serializing_if = "Option::is_none"
    )]
    pub property: Option<VolcProperty>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcPlume {
    /// 火口縁上噴煙高度
    #[serde(alias = "PlumeHeightAboveCrater", rename = "plumeHeightAboveCrater")]
    pub plume_height_above_crater: EbPlumeHeight,
    /// 海抜噴煙高度
    #[serde(
        alias = "PlumeHeightAboveSeaLevel",
        rename = "plumeHeightAboveSeaLevel",
        skip_serializing_if = "Option::is_none"
    )]
    pub plume_height_above_sea_level: Option<EbPlumeHeight>,
    /// 噴煙の流向
    #[serde(alias = "PlumeDirection", rename = "plumeDirection")]
    pub plume_direction: EbPlumeDirection,
    /// 噴煙についての付加文
    #[serde(
        alias = "PlumeComment",
        rename = "plumeComment",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub plume_comment: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcProperty {
    /// 現象の量や大きさ
    ///
    /// 発生する現象の量や大きさを示す。
    #[serde(
        alias = "Size",
        rename = "size",
        skip_serializing_if = "Option::is_none"
    )]
    pub size: Option<VolcSize>,
    /// 多角形
    ///
    /// 等値線の座標を示す（閉じている場合）。
    #[serde(alias = "Polygon", rename = "polygons")]
    pub polygons: Vec<EbCoordinate>,
    /// 影響範囲の方向
    #[serde(alias = "PlumeDirection", rename = "plumeDirection")]
    pub plume_direction: EbPlumeDirection,
    /// 影響範囲の距離
    ///
    /// 影響範囲の火口からの距離を示す。
    #[serde(alias = "Distance", rename = "distance")]
    pub distance: VolcDistance,
    /// 注意事項・付加事項
    #[serde(
        alias = "Remark",
        rename = "remark",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcSize {
    #[serde(alias = "$text", rename = "value")]
    pub value: Option<f64>,
    /// 分類
    #[serde(
        alias = "@type",
        rename = "type",
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    /// 単位
    #[serde(
        alias = "@unit",
        rename = "unit",
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcVolcanoInfo {
    /// 防災気象情報事項の種別
    ///
    /// この要素が示す防災気象情報事項の種別を示す。個々の種別間は独立している。
    #[serde(alias = "@type", rename = "type")]
    pub ty: String,
    /// 個々の防災気象情報要素
    ///
    /// 防災気象情報事項について、防災気象情報要素と地点等の一組の防災気象情報要素を示す。
    #[serde(alias = "Item", rename = "items")]
    pub items: Vec<VolcItem>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcVolcanoInfoContent {
    /// 見出し
    ///
    /// 防災気象情報の見出し文を入れる
    #[serde(
        alias = "VolcanoHeadline",
        rename = "volcanoHeadline",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub volcano_headline: Option<String>,
    /// 火山の活動状況等
    ///
    /// 本文中の火山活動状況及び予報警報事項を示す。
    #[serde(
        alias = "VolcanoActivity",
        rename = "volcanoActivity",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub volcano_activity: Option<String>,
    /// 防災上の警戒事項
    ///
    /// 本文中の防災上の警戒事項を示す。
    #[serde(
        alias = "VolcanoPrevention",
        rename = "volcanoPrevention",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub volcano_prevention: Option<String>,
    /// 次の情報発表日時の予告
    ///
    /// 次情報の発表時刻を示す。(噴火予報・警報の場合は空)
    #[serde(
        alias = "NextAdvisory",
        rename = "nextAdvisory",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub next_advisory: Option<String>,
    /// その他必要と認める事項
    ///
    /// 本文中のその他必要と認める事項を示す。
    #[serde(
        alias = "OtherInfo",
        rename = "otherInfo",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub other_info: Option<String>,
    /// 補足
    ///
    /// 本文の補足事項を示す。
    #[serde(
        alias = "Appendix",
        rename = "appendix",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub appendix: Option<String>,
    /// テキスト要素
    ///
    /// 追加的な情報を記載する。
    #[serde(
        alias = "Text",
        rename = "text",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub text: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcVolcanoObservation {
    /// 現象の日時
    #[serde(
        alias = "EventTime",
        rename = "eventTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_time: Option<VolcEventTime>,
    /// 有色噴煙の状況
    #[serde(
        alias = "ColorPlume",
        rename = "colorPlume",
        skip_serializing_if = "Option::is_none"
    )]
    pub color_plume: Option<VolcPlume>,
    /// 白色噴煙の状況
    #[serde(
        alias = "WhitePlume",
        rename = "whitePlume",
        skip_serializing_if = "Option::is_none"
    )]
    pub white_plume: Option<VolcPlume>,
    /// 火口直上の風の状況
    #[serde(
        alias = "WindAboveCrater",
        rename = "windAboveCrater",
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_above_crater: Option<VolcWindAboveCrater>,
    /// 付加文
    #[serde(
        alias = "OtherObservation",
        rename = "otherObservation",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub other_observation: Option<String>,
    /// 補足
    ///
    /// その他の補足事項を示す。
    #[serde(
        alias = "Appendix",
        rename = "appendix",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "trim_opt_string",
        default
    )]
    pub appendix: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcWindAboveCrater {
    /// 火口直上の風の日本時間での予想時刻
    #[serde(alias = "DateTime", rename = "dateTime")]
    pub date_time: EbDateTime,
    /// 火口直上の風の要素
    #[serde(
        alias = "WindAboveCraterElements",
        rename = "windAboveCraterElementses",
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_above_crater_elementses: Vec<VolcWindAboveCraterElements>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VolcWindAboveCraterElements {
    /// 代表高度
    #[serde(
        alias = "@heightProperty",
        rename = "heightProperty",
        skip_serializing_if = "Option::is_none"
    )]
    pub height_property: Option<String>,
    /// 文字列表現
    ///
    /// 値を文字列で表示する場合の表記法を記述する。
    #[serde(
        alias = "@description",
        rename = "description",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    /// 火口直上の風の海抜高度
    #[serde(alias = "WindHeightAboveSeaLevel", rename = "windHeightAboveSeaLevel")]
    pub wind_height_above_sea_level: EbPlumeHeight,
    /// 火口直上の風の風向
    #[serde(alias = "WindDegree", rename = "windDegree")]
    pub wind_degree: EbWindDegree,
    /// 火口直上の風の風速
    #[serde(alias = "WindSpeed", rename = "windSpeed")]
    pub wind_speed: EbWindSpeed,
}
