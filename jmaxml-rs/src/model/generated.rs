// Code generated by jmx_codegen; DO NOT EDIT.

use serde::{Deserialize, Deserializer, Serialize};

pub use super::builtins::*;

fn trim_string<'de, D>(deserializer: D) -> Result<String, D::Error>
where
    D: Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    Ok(s.trim().to_string())
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Control {
    #[serde(
        rename(deserialize = "Title", serialize = "title"),
        deserialize_with = "trim_string"
    )]
    pub title: String,
    #[serde(rename(deserialize = "DateTime", serialize = "dateTime"))]
    pub date_time: DateTime,
    #[serde(rename(deserialize = "Status", serialize = "status"))]
    pub status: String,
    #[serde(
        rename(deserialize = "EditorialOffice", serialize = "editorialOffice"),
        deserialize_with = "trim_string"
    )]
    pub editorial_office: String,
    #[serde(rename(deserialize = "PublishingOffice", serialize = "publishingOffices"))]
    pub publishing_offices: StringList,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbAreaClass {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbAxes {
    #[serde(
        rename(deserialize = "Axis", serialize = "axes"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub axes: Vec<EbAxis>,
    #[serde(
        rename(deserialize = "LongAxis", serialize = "longAxes"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub long_axes: Vec<EbAxis>,
    #[serde(
        rename(deserialize = "ShortAxis", serialize = "shortAxes"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub short_axes: Vec<EbAxis>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbAxis {
    #[serde(
        rename(deserialize = "Direction", serialize = "directions"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub directions: Vec<EbDirection>,
    #[serde(
        rename(deserialize = "Bearings", serialize = "bearings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub bearings: Vec<EbBearings>,
    #[serde(rename(deserialize = "Radius", serialize = "radiuses"))]
    pub radiuses: Vec<EbRadius>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbBearings {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<i64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbCircle {
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "BasePoint", serialize = "basePoints"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub base_points: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Axes", serialize = "axes"),
        skip_serializing_if = "Option::is_none"
    )]
    pub axes: Option<EbAxes>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbClassThresholdOfAverage {
    #[serde(
        rename(deserialize = "ThresholdOfMinimum", serialize = "thresholdOfMinimum"),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_minimum: Option<EbThreshold>,
    #[serde(
        rename(
            deserialize = "ThresholdOfSignificantlyBelowNormal",
            serialize = "thresholdOfSignificantlyBelowNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_below_normal: Option<EbThreshold>,
    #[serde(
        rename(
            deserialize = "ThresholdOfBelowNormal",
            serialize = "thresholdOfBelowNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_below_normal: Option<EbThreshold>,
    #[serde(
        rename(
            deserialize = "ThresholdOfAboveNormal",
            serialize = "thresholdOfAboveNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_above_normal: Option<EbThreshold>,
    #[serde(
        rename(
            deserialize = "ThresholdOfSignificantlyAboveNormal",
            serialize = "thresholdOfSignificantlyAboveNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_above_normal: Option<EbThreshold>,
    #[serde(
        rename(deserialize = "ThresholdOfMaximum", serialize = "thresholdOfMaximum"),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_maximum: Option<EbThreshold>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbClimateFeature {
    #[serde(
        rename(
            deserialize = "GeneralSituationText",
            serialize = "generalSituationTexts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub general_situation_texts: Vec<EbReferableString>,
    #[serde(
        rename(
            deserialize = "SignificantClimateElement",
            serialize = "significantClimateElements"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significant_climate_elements: Vec<EbSignificantClimateElement>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbClimateProbabilityValues {
    #[serde(rename(deserialize = "@kind", serialize = "@kind"))]
    pub kind: String,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(rename(
        deserialize = "ProbabilityOfBelowNormal",
        serialize = "probabilityOfBelowNormal"
    ))]
    pub probability_of_below_normal: EbProbability,
    #[serde(rename(deserialize = "ProbabilityOfNormal", serialize = "probabilityOfNormal"))]
    pub probability_of_normal: EbProbability,
    #[serde(rename(
        deserialize = "ProbabilityOfAboveNormal",
        serialize = "probabilityOfAboveNormal"
    ))]
    pub probability_of_above_normal: EbProbability,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbComparison {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbCoordinate {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@datum", serialize = "@datum"),
        skip_serializing_if = "Option::is_none"
    )]
    pub datum: Option<String>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbDateTime {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: DateTime,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@significant", serialize = "@significant"),
        skip_serializing_if = "Option::is_none"
    )]
    pub significant: Option<String>,
    #[serde(
        rename(deserialize = "@precision", serialize = "@precision"),
        skip_serializing_if = "Option::is_none"
    )]
    pub precision: Option<String>,
    #[serde(
        rename(deserialize = "@dubious", serialize = "@dubious"),
        skip_serializing_if = "Option::is_none"
    )]
    pub dubious: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbDirection {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbDischarge {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbFloodDepth {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@bound", serialize = "@bound"),
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbHumidity {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbIcing {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbIntensityClass {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbMagnitude {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbPlumeDirection {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbPlumeHeight {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<i64>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbPossibilityRankOfWarning {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbPrecipitation {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbPressure {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbProbability {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@bound", serialize = "@bound"),
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    #[serde(
        rename(deserialize = "@significant", serialize = "@significant"),
        skip_serializing_if = "Option::is_none"
    )]
    pub significant: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbProbabilityOfAftershock {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "@unit", serialize = "@unit"))]
    pub unit: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbProbabilityOfPrecipitation {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<i64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbRadius {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbReferableString {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbReliabilityClass {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbReliabilityValue {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSeaIce {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSignificantClimateElement {
    #[serde(rename(deserialize = "@kind", serialize = "@kind"))]
    pub kind: String,
    #[serde(rename(deserialize = "Text", serialize = "texts"))]
    pub texts: Vec<EbReferableString>,
    #[serde(
        rename(
            deserialize = "ProbabilityOfBelowNormal",
            serialize = "probabilityOfBelowNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_below_normal: Option<EbProbability>,
    #[serde(
        rename(deserialize = "ProbabilityOfNormal", serialize = "probabilityOfNormal"),
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_normal: Option<EbProbability>,
    #[serde(
        rename(
            deserialize = "ProbabilityOfAboveNormal",
            serialize = "probabilityOfAboveNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_above_normal: Option<EbProbability>,
    #[serde(
        rename(
            deserialize = "ProbabilityOfSignificantlyBelowNormal",
            serialize = "probabilityOfSignificantlyBelowNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_significantly_below_normal: Option<EbProbability>,
    #[serde(
        rename(
            deserialize = "ProbabilityOfSignificantlyAboveNormal",
            serialize = "probabilityOfSignificantlyAboveNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_significantly_above_normal: Option<EbProbability>,
    #[serde(
        rename(
            deserialize = "ThresholdOfBelowNormal",
            serialize = "thresholdOfBelowNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_below_normal: Option<EbThreshold>,
    #[serde(
        rename(
            deserialize = "ThresholdOfAboveNormal",
            serialize = "thresholdOfAboveNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_above_normal: Option<EbThreshold>,
    #[serde(
        rename(
            deserialize = "ThresholdOfSignificantlyBelowNormal",
            serialize = "thresholdOfSignificantlyBelowNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_below_normal: Option<EbThreshold>,
    #[serde(
        rename(
            deserialize = "ThresholdOfSignificantlyAboveNormal",
            serialize = "thresholdOfSignificantlyAboveNormal"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub threshold_of_significantly_above_normal: Option<EbThreshold>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSnowDepth {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSnowfallDepth {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSolarZenithAngle {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSpeed {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSunshine {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbSynopsis {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbTemperature {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbThreshold {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    #[serde(
        rename(deserialize = "@bound", serialize = "@bound"),
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbTidalLevel {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbTsunamiHeight {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "@unit", serialize = "@unit"))]
    pub unit: String,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbTyphoonClass {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbUvIndex {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbVisibility {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWaterLevel {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWaveHeight {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWeather {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWeatherCode {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<i64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWeatherForecastProbability {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWindDegree {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWindDirection {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWindScale {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<i64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EbWindSpeed {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "@condition", serialize = "@condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct IbInformation {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<IbItem>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct IbArea {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<String>,
    #[serde(
        rename(deserialize = "Circle", serialize = "circles"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub circles: Vec<EbCircle>,
    #[serde(
        rename(deserialize = "Coordinate", serialize = "coordinates"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Line", serialize = "lines"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lines: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Polygon", serialize = "polygons"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub polygons: Vec<EbCoordinate>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct IbAreas {
    #[serde(rename(deserialize = "@codeType", serialize = "@codeType"))]
    pub code_type: String,
    #[serde(rename(deserialize = "Area", serialize = "areas"))]
    pub areas: Vec<IbArea>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct IbHead {
    #[serde(
        rename(deserialize = "Title", serialize = "title"),
        deserialize_with = "trim_string"
    )]
    pub title: String,
    #[serde(rename(deserialize = "ReportDateTime", serialize = "reportDateTime"))]
    pub report_date_time: DateTime,
    #[serde(rename(deserialize = "TargetDateTime", serialize = "targetDateTime"))]
    pub target_date_time: NullableDateTime,
    #[serde(
        rename(deserialize = "TargetDTDubious", serialize = "targetDTDubious"),
        skip_serializing_if = "Option::is_none"
    )]
    pub target_dt_dubious: Option<String>,
    #[serde(
        rename(deserialize = "TargetDuration", serialize = "targetDuration"),
        skip_serializing_if = "Option::is_none"
    )]
    pub target_duration: Option<Duration>,
    #[serde(
        rename(deserialize = "ValidDateTime", serialize = "validDateTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub valid_date_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "EventID", serialize = "eventID"),
        deserialize_with = "trim_string"
    )]
    pub event_id: String,
    #[serde(
        rename(deserialize = "InfoType", serialize = "infoType"),
        deserialize_with = "trim_string"
    )]
    pub info_type: String,
    #[serde(
        rename(deserialize = "Serial", serialize = "serial"),
        deserialize_with = "trim_string"
    )]
    pub serial: String,
    #[serde(
        rename(deserialize = "InfoKind", serialize = "infoKind"),
        deserialize_with = "trim_string"
    )]
    pub info_kind: String,
    #[serde(
        rename(deserialize = "InfoKindVersion", serialize = "infoKindVersion"),
        deserialize_with = "trim_string"
    )]
    pub info_kind_version: String,
    #[serde(rename(deserialize = "Headline", serialize = "headline"))]
    pub headline: IbHeadline,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct IbHeadline {
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        deserialize_with = "trim_string"
    )]
    pub text: String,
    #[serde(
        rename(deserialize = "Information", serialize = "informations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub informations: Vec<IbInformation>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct IbItem {
    #[serde(rename(deserialize = "Kind", serialize = "kinds"))]
    pub kinds: Vec<IbKind>,
    #[serde(
        rename(deserialize = "LastKind", serialize = "lastKinds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub last_kinds: Vec<IbKind>,
    #[serde(rename(deserialize = "Areas", serialize = "areas"))]
    pub areas: IbAreas,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct IbKind {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<String>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteAddition {
    #[serde(rename(deserialize = "Note", serialize = "notes"))]
    pub notes: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteAdditionalInfo {
    #[serde(
        rename(deserialize = "ObservationAddition", serialize = "observationAddition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub observation_addition: Option<MeteObservationAddition>,
    #[serde(
        rename(
            deserialize = "ClimateForecastAddition",
            serialize = "climateForecastAddition"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub climate_forecast_addition: Option<MeteClimateForecastAddition>,
    #[serde(
        rename(
            deserialize = "FloodForecastAddition",
            serialize = "floodForecastAddition"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub flood_forecast_addition: Option<MeteFloodForecastAddition>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteArea {
    #[serde(
        rename(deserialize = "@codeType", serialize = "@codeType"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code_type: Option<String>,
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<String>,
    #[serde(
        rename(deserialize = "Prefecture", serialize = "prefecture"),
        skip_serializing_if = "Option::is_none"
    )]
    pub prefecture: Option<MetePrefectureCity>,
    #[serde(
        rename(deserialize = "PrefectureCode", serialize = "prefectureCode"),
        skip_serializing_if = "Option::is_none"
    )]
    pub prefecture_code: Option<String>,
    #[serde(
        rename(deserialize = "PrefectureList", serialize = "prefectureList"),
        skip_serializing_if = "Option::is_none"
    )]
    pub prefecture_list: Option<StringList>,
    #[serde(
        rename(deserialize = "PrefectureCodeList", serialize = "prefectureCodeList"),
        skip_serializing_if = "Option::is_none"
    )]
    pub prefecture_code_list: Option<StringList>,
    #[serde(
        rename(deserialize = "SubPrefecture", serialize = "subPrefecture"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_prefecture: Option<String>,
    #[serde(
        rename(deserialize = "SubPrefectureCode", serialize = "subPrefectureCode"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_prefecture_code: Option<String>,
    #[serde(
        rename(deserialize = "SubPrefectureList", serialize = "subPrefectureList"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_prefecture_list: Option<StringList>,
    #[serde(
        rename(
            deserialize = "SubPrefectureCodeList",
            serialize = "subPrefectureCodeList"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_prefecture_code_list: Option<StringList>,
    #[serde(
        rename(deserialize = "City", serialize = "city"),
        skip_serializing_if = "Option::is_none"
    )]
    pub city: Option<MetePrefectureCity>,
    #[serde(
        rename(deserialize = "CityCode", serialize = "cityCode"),
        skip_serializing_if = "Option::is_none"
    )]
    pub city_code: Option<String>,
    #[serde(
        rename(deserialize = "CityList", serialize = "cityList"),
        skip_serializing_if = "Option::is_none"
    )]
    pub city_list: Option<StringList>,
    #[serde(
        rename(deserialize = "CityCodeList", serialize = "cityCodeList"),
        skip_serializing_if = "Option::is_none"
    )]
    pub city_code_list: Option<StringList>,
    #[serde(
        rename(deserialize = "SubCity", serialize = "subCity"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_city: Option<String>,
    #[serde(
        rename(deserialize = "SubCityCode", serialize = "subCityCode"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_city_code: Option<String>,
    #[serde(
        rename(deserialize = "SubCityList", serialize = "subCityList"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_city_list: Option<StringList>,
    #[serde(
        rename(deserialize = "SubCityCodeList", serialize = "subCityCodeList"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_city_code_list: Option<StringList>,
    #[serde(
        rename(deserialize = "Circle", serialize = "circles"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub circles: Vec<EbCircle>,
    #[serde(
        rename(deserialize = "Coordinate", serialize = "coordinates"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Line", serialize = "lines"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lines: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Polygon", serialize = "polygons"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub polygons: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Location", serialize = "location"),
        skip_serializing_if = "Option::is_none"
    )]
    pub location: Option<String>,
    #[serde(
        rename(deserialize = "Status", serialize = "status"),
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteAreas {
    #[serde(
        rename(deserialize = "@codeType", serialize = "@codeType"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code_type: Option<String>,
    #[serde(rename(deserialize = "Area", serialize = "areas"))]
    pub areas: Vec<MeteArea>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteAttention {
    #[serde(rename(deserialize = "Note", serialize = "notes"))]
    pub notes: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseHumidity {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "Humidity", serialize = "humidities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalHumidity>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseIcing {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "Icing", serialize = "icings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalIcing>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBasePrecipitation {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "Precipitation", serialize = "precipitations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPrecipitation>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBasePressure {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "Pressure", serialize = "pressures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPressure>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseSeaIce {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "SeaIce", serialize = "seaIces"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSeaIce>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseSignificancy {
    #[serde(
        rename(deserialize = "Significancy", serialize = "significancies"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significancies: Vec<MeteSignificancy>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "PeakTime", serialize = "peakTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub peak_time: Option<MeteForecastTerm>,
    #[serde(
        rename(deserialize = "Attention", serialize = "attention"),
        skip_serializing_if = "Option::is_none"
    )]
    pub attention: Option<MeteAttention>,
    #[serde(
        rename(deserialize = "Addition", serialize = "addition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub addition: Option<MeteAddition>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSignificancy>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseSnowDepth {
    #[serde(
        rename(deserialize = "SnowDepth", serialize = "snowDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snow_depths: Vec<EbSnowDepth>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseSnowfallDepth {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "SnowfallDepth", serialize = "snowfallDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSnowfallDepth>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseSunshine {
    #[serde(
        rename(deserialize = "Sunshine", serialize = "sunshines"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sunshines: Vec<EbSunshine>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseTemperature {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "Temperature", serialize = "temperatures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTemperature>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseTidalLevel {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "TidalLevel", serialize = "tidalLevels"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTidalLevel>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseVisibility {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "Visibility", serialize = "visibilities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalVisibility>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseWaveHeight {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "WaveHeight", serialize = "waveHeights"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWaveHeight>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseWeather {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "Weather", serialize = "weathers"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWeather>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseWind {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "WindDegree", serialize = "windDegrees"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "WindScale", serialize = "windScales"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWind>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseWindDirection {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindDirection>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBaseWindSpeed {
    #[serde(
        rename(deserialize = "TimeModifier", serialize = "timeModifier"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time_modifier: Option<String>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindSpeed>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteBody {
    #[serde(
        rename(deserialize = "TargetArea", serialize = "targetArea"),
        skip_serializing_if = "Option::is_none"
    )]
    pub target_area: Option<MeteArea>,
    #[serde(
        rename(deserialize = "Notice", serialize = "notices"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub notices: Vec<String>,
    #[serde(
        rename(deserialize = "Warning", serialize = "warnings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub warnings: Vec<MeteWarning>,
    #[serde(
        rename(deserialize = "MeteorologicalInfos", serialize = "meteorologicalInfos"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub meteorological_infos: Vec<MeteMeteorologicalInfos>,
    #[serde(
        rename(deserialize = "Comment", serialize = "comment"),
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<MeteComment>,
    #[serde(
        rename(deserialize = "OfficeInfo", serialize = "officeInfo"),
        skip_serializing_if = "Option::is_none"
    )]
    pub office_info: Option<MeteOfficeInfo>,
    #[serde(
        rename(deserialize = "AdditionalInfo", serialize = "additionalInfo"),
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_info: Option<MeteAdditionalInfo>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteCenterPart {
    #[serde(
        rename(deserialize = "Coordinate", serialize = "coordinates"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "ProbabilityCircle", serialize = "probabilityCircles"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub probability_circles: Vec<EbCircle>,
    #[serde(
        rename(deserialize = "Location", serialize = "location"),
        skip_serializing_if = "Option::is_none"
    )]
    pub location: Option<String>,
    #[serde(
        rename(deserialize = "Direction", serialize = "directions"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub directions: Vec<EbDirection>,
    #[serde(
        rename(deserialize = "Speed", serialize = "speeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub speeds: Vec<EbSpeed>,
    #[serde(
        rename(deserialize = "Pressure", serialize = "pressure"),
        skip_serializing_if = "Option::is_none"
    )]
    pub pressure: Option<EbPressure>,
    #[serde(
        rename(deserialize = "Radius", serialize = "radiuses"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub radiuses: Vec<EbRadius>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteClassPart {
    #[serde(
        rename(deserialize = "TyphoonClass", serialize = "typhoonClass"),
        skip_serializing_if = "Option::is_none"
    )]
    pub typhoon_class: Option<EbTyphoonClass>,
    #[serde(
        rename(deserialize = "AreaClass", serialize = "areaClass"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_class: Option<EbAreaClass>,
    #[serde(
        rename(deserialize = "IntensityClass", serialize = "intensityClass"),
        skip_serializing_if = "Option::is_none"
    )]
    pub intensity_class: Option<EbIntensityClass>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteClimateForecastAddition {
    #[serde(
        rename(
            deserialize = "TargetDateTimeNotice",
            serialize = "targetDateTimeNotice"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub target_date_time_notice: Option<String>,
    #[serde(
        rename(
            deserialize = "NextForecastSchedule",
            serialize = "nextForecastSchedules"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub next_forecast_schedules: Vec<MeteForecastSchedule>,
    #[serde(
        rename(deserialize = "NoticeOfSchedule", serialize = "noticeOfSchedule"),
        skip_serializing_if = "Option::is_none"
    )]
    pub notice_of_schedule: Option<String>,
    #[serde(
        rename(deserialize = "AdditionalNotice", serialize = "additionalNotice"),
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_notice: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteClimateProbabilityValuesPart {
    #[serde(rename(
        deserialize = "ClimateProbabilityValues",
        serialize = "climateProbabilityValues"
    ))]
    pub climate_probability_values: Vec<EbClimateProbabilityValues>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteClimateValuesPart {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "Temperature", serialize = "temperatures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    #[serde(
        rename(deserialize = "Precipitation", serialize = "precipitations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    #[serde(
        rename(deserialize = "Sunshine", serialize = "sunshines"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sunshines: Vec<EbSunshine>,
    #[serde(
        rename(deserialize = "SnowfallDepth", serialize = "snowfallDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    #[serde(
        rename(deserialize = "SnowDepth", serialize = "snowDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snow_depths: Vec<EbSnowDepth>,
    #[serde(
        rename(deserialize = "Comparison", serialize = "comparisons"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub comparisons: Vec<EbComparison>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteComment {
    #[serde(rename(deserialize = "Text", serialize = "texts"))]
    pub texts: Vec<MeteText>,
    #[serde(
        rename(deserialize = "Code", serialize = "codes"),
        skip_serializing_if = "Option::is_none"
    )]
    pub codes: Option<StringList>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteCoordinatePart {
    #[serde(
        rename(deserialize = "Coordinate", serialize = "coordinates"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Line", serialize = "lines"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lines: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Polygon", serialize = "polygons"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub polygons: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteDetailForecast {
    #[serde(
        rename(
            deserialize = "WeatherForecastPart",
            serialize = "weatherForecastParts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weather_forecast_parts: Vec<MeteWeatherForecastPart>,
    #[serde(
        rename(
            deserialize = "PrecipitationForecastPart",
            serialize = "precipitationForecastParts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_forecast_parts: Vec<MetePrecipitationPart>,
    #[serde(
        rename(
            deserialize = "SnowfallDepthForecastPart",
            serialize = "snowfallDepthForecastParts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depth_forecast_parts: Vec<MeteSnowfallDepthPart>,
    #[serde(
        rename(deserialize = "WindForecastPart", serialize = "windForecastParts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_forecast_parts: Vec<MeteWindForecastPart>,
    #[serde(
        rename(
            deserialize = "WaveHeightForecastPart",
            serialize = "waveHeightForecastParts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_height_forecast_parts: Vec<MeteWaveHeightForecastPart>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteDischargePart {
    #[serde(
        rename(deserialize = "Discharge", serialize = "discharges"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub discharges: Vec<EbDischarge>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteEventDate {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: String,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    #[serde(
        rename(deserialize = "@dubious", serialize = "@dubious"),
        skip_serializing_if = "Option::is_none"
    )]
    pub dubious: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteEventDatePart {
    #[serde(
        rename(deserialize = "Date", serialize = "dates"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub dates: Vec<MeteEventDate>,
    #[serde(
        rename(deserialize = "Normal", serialize = "normals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub normals: Vec<MeteEventDate>,
    #[serde(
        rename(deserialize = "LastYear", serialize = "lastYears"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub last_years: Vec<MeteEventDate>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteFiftyKtWindProbabilityPart {
    #[serde(rename(
        deserialize = "FiftyKtWindProbability",
        serialize = "fiftyKtWindProbabilities"
    ))]
    pub fifty_kt_wind_probabilities: Vec<EbWeatherForecastProbability>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteFloodAssumptionPart {
    #[serde(
        rename(deserialize = "FloodAssumptionArea", serialize = "floodAssumptionArea"),
        skip_serializing_if = "Option::is_none"
    )]
    pub flood_assumption_area: Option<String>,
    #[serde(
        rename(deserialize = "AttainmentTime", serialize = "attainmentTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub attainment_time: Option<EbDateTime>,
    #[serde(
        rename(deserialize = "FloodDepth", serialize = "floodDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub flood_depths: Vec<EbFloodDepth>,
    #[serde(
        rename(
            deserialize = "AttainmentDeepestTime",
            serialize = "attainmentDeepestTime"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub attainment_deepest_time: Option<EbDateTime>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteFloodAssumptionTable {
    #[serde(rename(deserialize = "Area", serialize = "area"))]
    pub area: MeteArea,
    #[serde(
        rename(
            deserialize = "FloodAssumptionPart",
            serialize = "floodAssumptionParts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub flood_assumption_parts: Vec<MeteFloodAssumptionPart>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteFloodForecastAddition {
    #[serde(rename(
        deserialize = "HydrometricStationPart",
        serialize = "hydrometricStationParts"
    ))]
    pub hydrometric_station_parts: Vec<MeteHydrometricStationPart>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteForecastSchedule {
    #[serde(rename(deserialize = "@target", serialize = "@target"))]
    pub target: String,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
    #[serde(
        rename(deserialize = "DateTime", serialize = "dateTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<DateTime>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteForecastTerm {
    #[serde(
        rename(deserialize = "Date", serialize = "date"),
        skip_serializing_if = "Option::is_none"
    )]
    pub date: Option<String>,
    #[serde(
        rename(deserialize = "Term", serialize = "term"),
        skip_serializing_if = "Option::is_none"
    )]
    pub term: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteHumidityPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseHumidity>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseHumidity>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseHumidity>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaHumidity>,
    #[serde(
        rename(deserialize = "Humidity", serialize = "humidities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteHydrometricStationCriteria {
    #[serde(
        rename(deserialize = "WaterLevel", serialize = "waterLevels"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub water_levels: Vec<EbWaterLevel>,
    #[serde(
        rename(deserialize = "Discharge", serialize = "discharges"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub discharges: Vec<EbDischarge>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteHydrometricStationPart {
    #[serde(rename(deserialize = "Area", serialize = "area"))]
    pub area: MeteArea,
    #[serde(
        rename(deserialize = "ChargeSection", serialize = "chargeSections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub charge_sections: Vec<String>,
    #[serde(rename(deserialize = "Criteria", serialize = "criterias"))]
    pub criterias: Vec<MeteHydrometricStationCriteria>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteIcingPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseIcing>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseIcing>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseIcing>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaIcing>,
    #[serde(
        rename(deserialize = "Icing", serialize = "icings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteIsobarPart {
    #[serde(rename(deserialize = "Pressure", serialize = "pressure"))]
    pub pressure: EbPressure,
    #[serde(
        rename(deserialize = "Line", serialize = "line"),
        skip_serializing_if = "Option::is_none"
    )]
    pub line: Option<EbCoordinate>,
    #[serde(
        rename(deserialize = "Polygon", serialize = "polygon"),
        skip_serializing_if = "Option::is_none"
    )]
    pub polygon: Option<EbCoordinate>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteItem {
    #[serde(rename(deserialize = "Kind", serialize = "kinds"))]
    pub kinds: Vec<MeteKind>,
    #[serde(
        rename(deserialize = "Areas", serialize = "areas"),
        skip_serializing_if = "Option::is_none"
    )]
    pub areas: Option<MeteAreas>,
    #[serde(
        rename(deserialize = "Stations", serialize = "stations"),
        skip_serializing_if = "Option::is_none"
    )]
    pub stations: Option<MeteStations>,
    #[serde(
        rename(deserialize = "Area", serialize = "area"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area: Option<MeteArea>,
    #[serde(
        rename(deserialize = "Station", serialize = "station"),
        skip_serializing_if = "Option::is_none"
    )]
    pub station: Option<MeteStation>,
    #[serde(
        rename(deserialize = "ChangeStatus", serialize = "changeStatus"),
        skip_serializing_if = "Option::is_none"
    )]
    pub change_status: Option<String>,
    #[serde(
        rename(deserialize = "FullStatus", serialize = "fullStatus"),
        skip_serializing_if = "Option::is_none"
    )]
    pub full_status: Option<String>,
    #[serde(
        rename(deserialize = "EditingMark", serialize = "editingMark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub editing_mark: Option<String>,
    #[serde(
        rename(deserialize = "OtherReport", serialize = "otherReports"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub other_reports: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteKind {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<String>,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<String>,
    #[serde(
        rename(deserialize = "Status", serialize = "status"),
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<String>,
    #[serde(
        rename(deserialize = "ClassName", serialize = "className"),
        skip_serializing_if = "Option::is_none"
    )]
    pub class_name: Option<String>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "LastKind", serialize = "lastKind"),
        skip_serializing_if = "Option::is_none"
    )]
    pub last_kind: Option<MeteNextKind>,
    #[serde(
        rename(deserialize = "NextKinds", serialize = "nextKinds"),
        skip_serializing_if = "Option::is_none"
    )]
    pub next_kinds: Option<MeteNextKinds>,
    #[serde(
        rename(deserialize = "Attention", serialize = "attention"),
        skip_serializing_if = "Option::is_none"
    )]
    pub attention: Option<MeteAttention>,
    #[serde(
        rename(deserialize = "WarningNotice", serialize = "warningNotice"),
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_notice: Option<MeteWarningNotice>,
    #[serde(
        rename(deserialize = "Addition", serialize = "addition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub addition: Option<MeteAddition>,
    #[serde(
        rename(deserialize = "DateTime", serialize = "dateTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<EbDateTime>,
    #[serde(
        rename(deserialize = "Property", serialize = "properties"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub properties: Vec<MeteProperty>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalHumidity {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Humidity", serialize = "humidities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalIcing {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Icing", serialize = "icings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalPrecipitation {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Precipitation", serialize = "precipitations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalPressure {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Pressure", serialize = "pressures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalSeaIce {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "SeaIce", serialize = "seaIces"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalSignificancy {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        deserialize_with = "trim_string"
    )]
    pub area_name: String,
    #[serde(
        rename(deserialize = "Significancy", serialize = "significancies"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significancies: Vec<MeteSignificancy>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "PeakTime", serialize = "peakTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub peak_time: Option<MeteForecastTerm>,
    #[serde(
        rename(deserialize = "Attention", serialize = "attention"),
        skip_serializing_if = "Option::is_none"
    )]
    pub attention: Option<MeteAttention>,
    #[serde(
        rename(deserialize = "Addition", serialize = "addition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub addition: Option<MeteAddition>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalSnowfallDepth {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "SnowfallDepth", serialize = "snowfallDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalTemperature {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Temperature", serialize = "temperatures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalTidalLevel {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "TidalLevel", serialize = "tidalLevels"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalVisibility {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Visibility", serialize = "visibilities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalWaveHeight {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "WaveHeight", serialize = "waveHeights"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalWeather {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Weather", serialize = "weathers"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalWind {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "WindDegree", serialize = "windDegrees"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "WindScale", serialize = "windScales"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalWindDirection {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteLocalWindSpeed {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteMeteorologicalInfo {
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(rename(deserialize = "DateTime", serialize = "dateTime"))]
    pub date_time: EbDateTime,
    #[serde(
        rename(deserialize = "Duration", serialize = "duration"),
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<String>,
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<MeteItem>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteMeteorologicalInfos {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "MeteorologicalInfo", serialize = "meteorologicalInfos"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub meteorological_infos: Vec<MeteMeteorologicalInfo>,
    #[serde(
        rename(deserialize = "TimeSeriesInfo", serialize = "timeSeriesInfos"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub time_series_infos: Vec<MeteTimeSeriesInfo>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteNextKind {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "DateTime", serialize = "dateTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<EbDateTime>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteNextKinds {
    #[serde(rename(deserialize = "NextKind", serialize = "nextKinds"))]
    pub next_kinds: Vec<MeteNextKind>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteObservationAddition {
    #[serde(
        rename(deserialize = "DeviationFromNormal", serialize = "deviationFromNormal"),
        skip_serializing_if = "Option::is_none"
    )]
    pub deviation_from_normal: Option<String>,
    #[serde(
        rename(
            deserialize = "DeviationFromLastYear",
            serialize = "deviationFromLastYear"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub deviation_from_last_year: Option<String>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteOffice {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<String>,
    #[serde(
        rename(deserialize = "ContactInfo", serialize = "contactInfo"),
        deserialize_with = "trim_string"
    )]
    pub contact_info: String,
    #[serde(
        rename(deserialize = "URI", serialize = "uRI"),
        skip_serializing_if = "Option::is_none"
    )]
    pub uri: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteOfficeInfo {
    #[serde(rename(deserialize = "Office", serialize = "offices"))]
    pub offices: Vec<MeteOffice>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MetePeriod {
    #[serde(
        rename(deserialize = "StartTime", serialize = "startTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub start_time: Option<MeteForecastTerm>,
    #[serde(
        rename(deserialize = "EndTime", serialize = "endTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub end_time: Option<MeteForecastTerm>,
    #[serde(
        rename(deserialize = "OverTime", serialize = "overTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub over_time: Option<String>,
    #[serde(
        rename(deserialize = "ZoneTime", serialize = "zoneTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub zone_time: Option<MeteForecastTerm>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MetePossibilityRankOfWarningPart {
    #[serde(rename(
        deserialize = "PossibilityRankOfWarning",
        serialize = "possibilityRankOfWarnings"
    ))]
    pub possibility_rank_of_warnings: Vec<EbPossibilityRankOfWarning>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MetePrecipitationPart {
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePrecipitation>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePrecipitation>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePrecipitation>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaPrecipitation>,
    #[serde(
        rename(deserialize = "Precipitation", serialize = "precipitations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MetePrefectureCity {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@partType", serialize = "@partType"),
        skip_serializing_if = "Option::is_none"
    )]
    pub part_type: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MetePressurePart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePressure>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePressure>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePressure>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaPressure>,
    #[serde(
        rename(deserialize = "Pressure", serialize = "pressures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteProbabilityOfPrecipitationPart {
    #[serde(rename(
        deserialize = "ProbabilityOfPrecipitation",
        serialize = "probabilityOfPrecipitations"
    ))]
    pub probability_of_precipitations: Vec<EbProbabilityOfPrecipitation>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteProperty {
    #[serde(
        rename(deserialize = "Type", serialize = "type"),
        deserialize_with = "trim_string"
    )]
    pub ty: String,
    #[serde(
        rename(deserialize = "SignificancyPart", serialize = "significancyParts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub significancy_parts: Vec<MeteSignificancyPart>,
    #[serde(
        rename(
            deserialize = "SubsequentSignificancyPart",
            serialize = "subsequentSignificancyParts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub subsequent_significancy_parts: Vec<MeteSignificancyPart>,
    #[serde(
        rename(deserialize = "WarningPeriod", serialize = "warningPeriod"),
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_period: Option<MetePeriod>,
    #[serde(
        rename(deserialize = "AdvisoryPeriod", serialize = "advisoryPeriod"),
        skip_serializing_if = "Option::is_none"
    )]
    pub advisory_period: Option<MetePeriod>,
    #[serde(
        rename(deserialize = "PeakTime", serialize = "peakTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub peak_time: Option<MeteForecastTerm>,
    #[serde(
        rename(deserialize = "DetailForecast", serialize = "detailForecast"),
        skip_serializing_if = "Option::is_none"
    )]
    pub detail_forecast: Option<MeteDetailForecast>,
    #[serde(
        rename(deserialize = "WindPart", serialize = "windPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_part: Option<MeteWindPart>,
    #[serde(
        rename(deserialize = "WindDirectionPart", serialize = "windDirectionPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_direction_part: Option<MeteWindDirectionPart>,
    #[serde(
        rename(deserialize = "WindSpeedPart", serialize = "windSpeedPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_speed_part: Option<MeteWindSpeedPart>,
    #[serde(
        rename(deserialize = "WarningAreaPart", serialize = "warningAreaParts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub warning_area_parts: Vec<MeteWarningAreaPart>,
    #[serde(
        rename(deserialize = "WeatherPart", serialize = "weatherPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub weather_part: Option<MeteWeatherPart>,
    #[serde(
        rename(deserialize = "PressurePart", serialize = "pressurePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub pressure_part: Option<MetePressurePart>,
    #[serde(
        rename(deserialize = "TemperaturePart", serialize = "temperaturePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub temperature_part: Option<MeteTemperaturePart>,
    #[serde(
        rename(deserialize = "VisibilityPart", serialize = "visibilityPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub visibility_part: Option<MeteVisibilityPart>,
    #[serde(
        rename(deserialize = "SynopsisPart", serialize = "synopsisPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub synopsis_part: Option<MeteSynopsisPart>,
    #[serde(
        rename(deserialize = "WaveHeightPart", serialize = "waveHeightPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub wave_height_part: Option<MeteWaveHeightPart>,
    #[serde(
        rename(deserialize = "PrecipitationPart", serialize = "precipitationParts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitation_parts: Vec<MetePrecipitationPart>,
    #[serde(
        rename(deserialize = "SnowfallDepthPart", serialize = "snowfallDepthPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub snowfall_depth_part: Option<MeteSnowfallDepthPart>,
    #[serde(
        rename(deserialize = "SnowDepthPart", serialize = "snowDepthPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub snow_depth_part: Option<MeteSnowDepthPart>,
    #[serde(
        rename(deserialize = "HumidityPart", serialize = "humidityParts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidity_parts: Vec<MeteHumidityPart>,
    #[serde(
        rename(deserialize = "TidalLevelPart", serialize = "tidalLevelPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tidal_level_part: Option<MeteTidalLevelPart>,
    #[serde(
        rename(deserialize = "SunshinePart", serialize = "sunshinePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sunshine_part: Option<MeteSunshinePart>,
    #[serde(
        rename(deserialize = "WeatherCodePart", serialize = "weatherCodePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub weather_code_part: Option<MeteWeatherCodePart>,
    #[serde(
        rename(
            deserialize = "ProbabilityOfPrecipitationPart",
            serialize = "probabilityOfPrecipitationPart"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub probability_of_precipitation_part: Option<MeteProbabilityOfPrecipitationPart>,
    #[serde(
        rename(deserialize = "SeaIcePart", serialize = "seaIcePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sea_ice_part: Option<MeteSeaIcePart>,
    #[serde(
        rename(deserialize = "IcingPart", serialize = "icingPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub icing_part: Option<MeteIcingPart>,
    #[serde(
        rename(
            deserialize = "ReliabilityClassPart",
            serialize = "reliabilityClassPart"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub reliability_class_part: Option<MeteReliabilityClassPart>,
    #[serde(
        rename(
            deserialize = "ReliabilityValuePart",
            serialize = "reliabilityValuePart"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub reliability_value_part: Option<MeteReliabilityValuePart>,
    #[serde(
        rename(deserialize = "ClassPart", serialize = "classPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub class_part: Option<MeteClassPart>,
    #[serde(
        rename(
            deserialize = "PossibilityRankOfWarningPart",
            serialize = "possibilityRankOfWarningPart"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub possibility_rank_of_warning_part: Option<MetePossibilityRankOfWarningPart>,
    #[serde(
        rename(deserialize = "TyphoonNamePart", serialize = "typhoonNamePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub typhoon_name_part: Option<MeteTyphoonNamePart>,
    #[serde(
        rename(deserialize = "CenterPart", serialize = "centerPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub center_part: Option<MeteCenterPart>,
    #[serde(
        rename(deserialize = "CoordinatePart", serialize = "coordinatePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub coordinate_part: Option<MeteCoordinatePart>,
    #[serde(
        rename(deserialize = "IsobarPart", serialize = "isobarPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub isobar_part: Option<MeteIsobarPart>,
    #[serde(
        rename(deserialize = "WaterLevelPart", serialize = "waterLevelPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub water_level_part: Option<MeteWaterLevelPart>,
    #[serde(
        rename(
            deserialize = "FloodAssumptionTable",
            serialize = "floodAssumptionTable"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub flood_assumption_table: Option<MeteFloodAssumptionTable>,
    #[serde(
        rename(deserialize = "DischargePart", serialize = "dischargePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub discharge_part: Option<MeteDischargePart>,
    #[serde(
        rename(deserialize = "ClimateFeaturePart", serialize = "climateFeatureParts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub climate_feature_parts: Vec<EbClimateFeature>,
    #[serde(
        rename(deserialize = "ClimateValuesPart", serialize = "climateValuesParts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub climate_values_parts: Vec<MeteClimateValuesPart>,
    #[serde(
        rename(
            deserialize = "ClimateProbabilityValuesPart",
            serialize = "climateProbabilityValuesPart"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub climate_probability_values_part: Option<MeteClimateProbabilityValuesPart>,
    #[serde(
        rename(deserialize = "EventDatePart", serialize = "eventDatePart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub event_date_part: Option<MeteEventDatePart>,
    #[serde(
        rename(
            deserialize = "PrecipitationClassPart",
            serialize = "precipitationClassPart"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub precipitation_class_part: Option<EbClassThresholdOfAverage>,
    #[serde(
        rename(
            deserialize = "SolarZenithAnglePart",
            serialize = "solarZenithAnglePart"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub solar_zenith_angle_part: Option<MeteSolarZenithAnglePart>,
    #[serde(
        rename(deserialize = "UvIndexPart", serialize = "uvIndexPart"),
        skip_serializing_if = "Option::is_none"
    )]
    pub uv_index_part: Option<MeteUvIndexPart>,
    #[serde(
        rename(
            deserialize = "FiftyKtWindProbabilityPart",
            serialize = "fiftyKtWindProbabilityParts"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub fifty_kt_wind_probability_parts: Vec<MeteFiftyKtWindProbabilityPart>,
    #[serde(
        rename(deserialize = "Text", serialize = "texts"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub texts: Vec<EbReferableString>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteReliabilityClassPart {
    #[serde(rename(deserialize = "ReliabilityClass", serialize = "reliabilityClasses"))]
    pub reliability_classes: Vec<EbReliabilityClass>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteReliabilityValuePart {
    #[serde(rename(deserialize = "ReliabilityValue", serialize = "reliabilityValues"))]
    pub reliability_values: Vec<EbReliabilityValue>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSeaIcePart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSeaIce>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSeaIce>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSeaIce>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaSeaIce>,
    #[serde(
        rename(deserialize = "SeaIce", serialize = "seaIces"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSentence {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSignificancy {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSignificancyPart {
    #[serde(rename(deserialize = "Base", serialize = "base"))]
    pub base: MeteBaseSignificancy,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSnowDepthPart {
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSnowDepth>,
    #[serde(
        rename(deserialize = "SnowDepth", serialize = "snowDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snow_depths: Vec<EbSnowDepth>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSnowfallDepthPart {
    #[serde(
        rename(deserialize = "@refID", serialize = "@refID"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ref_id: Option<u8>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSnowfallDepth>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSnowfallDepth>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSnowfallDepth>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaSnowfallDepth>,
    #[serde(
        rename(deserialize = "SnowfallDepth", serialize = "snowfallDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSolarZenithAnglePart {
    #[serde(rename(deserialize = "SolarZenithAngle", serialize = "solarZenithAngles"))]
    pub solar_zenith_angles: Vec<EbSolarZenithAngle>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteStation {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(rename(deserialize = "Code", serialize = "codes"))]
    pub codes: Vec<MeteStationCode>,
    #[serde(
        rename(deserialize = "Location", serialize = "location"),
        skip_serializing_if = "Option::is_none"
    )]
    pub location: Option<String>,
    #[serde(
        rename(deserialize = "Status", serialize = "status"),
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<String>,
    #[serde(
        rename(deserialize = "Coordinate", serialize = "coordinates"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub coordinates: Vec<EbCoordinate>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteStationCode {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteStations {
    #[serde(
        rename(deserialize = "@codeType", serialize = "@codeType"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code_type: Option<String>,
    #[serde(rename(deserialize = "Station", serialize = "stations"))]
    pub stations: Vec<MeteStation>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaHumidity {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseHumidity>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseHumidity>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseHumidity>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalHumidity>,
    #[serde(
        rename(deserialize = "Humidity", serialize = "humidities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub humidities: Vec<EbHumidity>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaIcing {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseIcing>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseIcing>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseIcing>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalIcing>,
    #[serde(
        rename(deserialize = "Icing", serialize = "icings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub icings: Vec<EbIcing>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaPrecipitation {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePrecipitation>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePrecipitation>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePrecipitation>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPrecipitation>,
    #[serde(
        rename(deserialize = "Precipitation", serialize = "precipitations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub precipitations: Vec<EbPrecipitation>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaPressure {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBasePressure>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBasePressure>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBasePressure>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalPressure>,
    #[serde(
        rename(deserialize = "Pressure", serialize = "pressures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub pressures: Vec<EbPressure>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaSeaIce {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSeaIce>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSeaIce>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSeaIce>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSeaIce>,
    #[serde(
        rename(deserialize = "SeaIce", serialize = "seaIces"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sea_ices: Vec<EbSeaIce>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaSnowfallDepth {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSnowfallDepth>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseSnowfallDepth>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseSnowfallDepth>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalSnowfallDepth>,
    #[serde(
        rename(deserialize = "SnowfallDepth", serialize = "snowfallDepths"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub snowfall_depths: Vec<EbSnowfallDepth>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaTemperature {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTemperature>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTemperature>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTemperature>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTemperature>,
    #[serde(
        rename(deserialize = "Temperature", serialize = "temperatures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaTidalLevel {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTidalLevel>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTidalLevel>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTidalLevel>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalTidalLevel>,
    #[serde(
        rename(deserialize = "TidalLevel", serialize = "tidalLevels"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaVisibility {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseVisibility>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseVisibility>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseVisibility>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalVisibility>,
    #[serde(
        rename(deserialize = "Visibility", serialize = "visibilities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaWaveHeight {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWaveHeight>,
    #[serde(
        rename(deserialize = "WaveHeight", serialize = "waveHeights"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaWeather {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWeather>,
    #[serde(
        rename(deserialize = "Weather", serialize = "weathers"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaWind {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWind>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWind>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWind>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWind>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "WindDegree", serialize = "windDegrees"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "WindScale", serialize = "windScales"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaWindDirection {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindDirection>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindDirection>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindDirection>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindDirection>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSubAreaWindSpeed {
    #[serde(
        rename(deserialize = "AreaName", serialize = "areaName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_name: Option<String>,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindSpeed>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindSpeed>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindSpeed>,
    #[serde(
        rename(deserialize = "Local", serialize = "locals"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub locals: Vec<MeteLocalWindSpeed>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSunshinePart {
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseSunshine>,
    #[serde(
        rename(deserialize = "Sunshine", serialize = "sunshines"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sunshines: Vec<EbSunshine>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteSynopsisPart {
    #[serde(rename(deserialize = "Synopsis", serialize = "synopses"))]
    pub synopses: Vec<EbSynopsis>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteTemperaturePart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTemperature>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTemperature>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTemperature>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaTemperature>,
    #[serde(
        rename(deserialize = "Temperature", serialize = "temperatures"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temperatures: Vec<EbTemperature>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteText {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteTidalLevelPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseTidalLevel>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseTidalLevel>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseTidalLevel>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaTidalLevel>,
    #[serde(
        rename(deserialize = "TidalLevel", serialize = "tidalLevels"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub tidal_levels: Vec<EbTidalLevel>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteTimeDefine {
    #[serde(rename(deserialize = "@timeId", serialize = "@timeId"))]
    pub time_id: u8,
    #[serde(rename(deserialize = "DateTime", serialize = "dateTime"))]
    pub date_time: EbDateTime,
    #[serde(
        rename(deserialize = "Duration", serialize = "duration"),
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteTimeDefines {
    #[serde(rename(deserialize = "TimeDefine", serialize = "timeDefines"))]
    pub time_defines: Vec<MeteTimeDefine>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteTimeSeriesInfo {
    #[serde(rename(deserialize = "TimeDefines", serialize = "timeDefines"))]
    pub time_defines: MeteTimeDefines,
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<MeteItem>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteTyphoonNamePart {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<String>,
    #[serde(
        rename(deserialize = "NameKana", serialize = "nameKana"),
        skip_serializing_if = "Option::is_none"
    )]
    pub name_kana: Option<String>,
    #[serde(
        rename(deserialize = "Number", serialize = "number"),
        skip_serializing_if = "Option::is_none"
    )]
    pub number: Option<String>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteUvIndexPart {
    #[serde(rename(deserialize = "UvIndex", serialize = "uvIndexes"))]
    pub uv_indexes: Vec<EbUvIndex>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteVisibilityPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseVisibility>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseVisibility>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseVisibility>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaVisibility>,
    #[serde(
        rename(deserialize = "Visibility", serialize = "visibilities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub visibilities: Vec<EbVisibility>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWarning {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<MeteItem>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWarningAreaPart {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "WindSpeed", serialize = "windSpeeds"))]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(rename(deserialize = "Circle", serialize = "circle"))]
    pub circle: EbCircle,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWarningNotice {
    #[serde(rename(deserialize = "StartTime", serialize = "startTime"))]
    pub start_time: MeteForecastTerm,
    #[serde(
        rename(deserialize = "Note", serialize = "note"),
        deserialize_with = "trim_string"
    )]
    pub note: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWaterLevelPart {
    #[serde(
        rename(deserialize = "WaterLevel", serialize = "waterLevels"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub water_levels: Vec<EbWaterLevel>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWaveHeightForecastPart {
    #[serde(rename(deserialize = "@refID", serialize = "@refID"))]
    pub ref_id: u8,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWaveHeight>,
    #[serde(
        rename(deserialize = "WaveHeight", serialize = "waveHeights"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWaveHeightPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWaveHeight>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWaveHeight>,
    #[serde(
        rename(deserialize = "WaveHeight", serialize = "waveHeights"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wave_heights: Vec<EbWaveHeight>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWeatherCodePart {
    #[serde(rename(deserialize = "WeatherCode", serialize = "weatherCodes"))]
    pub weather_codes: Vec<EbWeatherCode>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWeatherForecastPart {
    #[serde(rename(deserialize = "@refID", serialize = "@refID"))]
    pub ref_id: u8,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWeather>,
    #[serde(
        rename(deserialize = "Weather", serialize = "weathers"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWeatherPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWeather>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWeather>,
    #[serde(
        rename(deserialize = "Weather", serialize = "weathers"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub weathers: Vec<EbWeather>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWindDirectionPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindDirection>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindDirection>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindDirection>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWindDirection>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWindForecastPart {
    #[serde(rename(deserialize = "@refID", serialize = "@refID"))]
    pub ref_id: u8,
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWind>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWind>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWind>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWind>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWindPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWind>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWind>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWind>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWind>,
    #[serde(
        rename(deserialize = "WindDirection", serialize = "windDirections"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_directions: Vec<EbWindDirection>,
    #[serde(
        rename(deserialize = "WindDegree", serialize = "windDegrees"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_degrees: Vec<EbWindDegree>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "WindScale", serialize = "windScales"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_scales: Vec<EbWindScale>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWindSpeedLevel {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "@refID", serialize = "@refID"))]
    pub ref_id: u8,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    #[serde(rename(deserialize = "@range", serialize = "@ranges"))]
    pub ranges: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MeteWindSpeedPart {
    #[serde(
        rename(deserialize = "Sentence", serialize = "sentence"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sentence: Option<MeteSentence>,
    #[serde(
        rename(deserialize = "Base", serialize = "base"),
        skip_serializing_if = "Option::is_none"
    )]
    pub base: Option<MeteBaseWindSpeed>,
    #[serde(
        rename(deserialize = "Temporary", serialize = "temporaries"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub temporaries: Vec<MeteBaseWindSpeed>,
    #[serde(
        rename(deserialize = "Becoming", serialize = "becomings"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub becomings: Vec<MeteBaseWindSpeed>,
    #[serde(
        rename(deserialize = "SubArea", serialize = "subAreas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sub_areas: Vec<MeteSubAreaWindSpeed>,
    #[serde(
        rename(deserialize = "WindSpeed", serialize = "windSpeeds"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speeds: Vec<EbWindSpeed>,
    #[serde(
        rename(deserialize = "WindSpeedLevel", serialize = "windSpeedLevels"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_speed_levels: Vec<MeteWindSpeedLevel>,
    #[serde(
        rename(deserialize = "Time", serialize = "time"),
        skip_serializing_if = "Option::is_none"
    )]
    pub time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisAccuracy {
    #[serde(rename(deserialize = "Epicenter", serialize = "epicenter"))]
    pub epicenter: SeisAccuracyEpicenter,
    #[serde(rename(deserialize = "Depth", serialize = "depth"))]
    pub depth: SeisAccuracyDepth,
    #[serde(rename(
        deserialize = "MagnitudeCalculation",
        serialize = "magnitudeCalculation"
    ))]
    pub magnitude_calculation: SeisAccuracyMagnitude,
    #[serde(rename(
        deserialize = "NumberOfMagnitudeCalculation",
        serialize = "numberOfMagnitudeCalculation"
    ))]
    pub number_of_magnitude_calculation: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisAccuracyDepth {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@rank", serialize = "@rank"))]
    pub rank: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisAccuracyEpicenter {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@rank", serialize = "@rank"))]
    pub rank: i64,
    #[serde(rename(deserialize = "@rank2", serialize = "@rank2"))]
    pub rank2: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisAccuracyMagnitude {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@rank", serialize = "@rank"))]
    pub rank: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisAftershockItem {
    #[serde(rename(deserialize = "StartTime", serialize = "startTime"))]
    pub start_time: DateTime,
    #[serde(rename(deserialize = "EndTime", serialize = "endTime"))]
    pub end_time: DateTime,
    #[serde(rename(
        deserialize = "ProbabilityOfAftershock",
        serialize = "probabilityOfAftershock"
    ))]
    pub probability_of_aftershock: EbProbabilityOfAftershock,
    #[serde(rename(deserialize = "TargetMagnitude", serialize = "targetMagnitude"))]
    pub target_magnitude: EbMagnitude,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisAftershocks {
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<SeisAftershockItem>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisBody {
    #[serde(
        rename(deserialize = "Naming", serialize = "naming"),
        skip_serializing_if = "Option::is_none"
    )]
    pub naming: Option<SeisNaming>,
    #[serde(
        rename(deserialize = "Tsunami", serialize = "tsunami"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami: Option<SeisTsunami>,
    #[serde(
        rename(deserialize = "Earthquake", serialize = "earthquakes"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub earthquakes: Vec<SeisEarthquake>,
    #[serde(
        rename(deserialize = "Intensity", serialize = "intensity"),
        skip_serializing_if = "Option::is_none"
    )]
    pub intensity: Option<SeisIntensity>,
    #[serde(
        rename(deserialize = "Tokai", serialize = "tokai"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tokai: Option<SeisTokai>,
    #[serde(
        rename(deserialize = "EarthquakeInfo", serialize = "earthquakeInfo"),
        skip_serializing_if = "Option::is_none"
    )]
    pub earthquake_info: Option<SeisEarthquakeInfo>,
    #[serde(
        rename(deserialize = "EarthquakeCount", serialize = "earthquakeCount"),
        skip_serializing_if = "Option::is_none"
    )]
    pub earthquake_count: Option<SeisEarthquakeCount>,
    #[serde(
        rename(deserialize = "Aftershock", serialize = "aftershock"),
        skip_serializing_if = "Option::is_none"
    )]
    pub aftershock: Option<SeisAftershocks>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
    #[serde(
        rename(deserialize = "NextAdvisory", serialize = "nextAdvisory"),
        skip_serializing_if = "Option::is_none"
    )]
    pub next_advisory: Option<String>,
    #[serde(
        rename(deserialize = "Comments", serialize = "comments"),
        skip_serializing_if = "Option::is_none"
    )]
    pub comments: Option<SeisComment>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisCategory {
    #[serde(rename(deserialize = "Kind", serialize = "kind"))]
    pub kind: SeisKind,
    #[serde(
        rename(deserialize = "LastKind", serialize = "lastKind"),
        skip_serializing_if = "Option::is_none"
    )]
    pub last_kind: Option<SeisKind>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisCodeDefine {
    #[serde(rename(deserialize = "Type", serialize = "types"))]
    pub types: Vec<SeisCodeDefineType>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisCodeDefineType {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@xpath", serialize = "@xpath"))]
    pub xpath: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisComment {
    #[serde(
        rename(deserialize = "WarningComment", serialize = "warningComment"),
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_comment: Option<SeisCommentForm>,
    #[serde(
        rename(deserialize = "ForecastComment", serialize = "forecastComment"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_comment: Option<SeisCommentForm>,
    #[serde(
        rename(deserialize = "ObservationComment", serialize = "observationComment"),
        skip_serializing_if = "Option::is_none"
    )]
    pub observation_comment: Option<SeisCommentForm>,
    #[serde(
        rename(deserialize = "VarComment", serialize = "varComment"),
        skip_serializing_if = "Option::is_none"
    )]
    pub var_comment: Option<SeisCommentForm>,
    #[serde(
        rename(deserialize = "FreeFormComment", serialize = "freeFormComment"),
        skip_serializing_if = "Option::is_none"
    )]
    pub free_form_comment: Option<String>,
    #[serde(
        rename(deserialize = "URI", serialize = "uRI"),
        skip_serializing_if = "Option::is_none"
    )]
    pub uri: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisCommentForm {
    #[serde(rename(deserialize = "@codeType", serialize = "@codeType"))]
    pub code_type: String,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        deserialize_with = "trim_string"
    )]
    pub text: String,
    #[serde(rename(deserialize = "Code", serialize = "codes"))]
    pub codes: StringList,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisCountData {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "StartTime", serialize = "startTime"))]
    pub start_time: DateTime,
    #[serde(rename(deserialize = "EndTime", serialize = "endTime"))]
    pub end_time: DateTime,
    #[serde(rename(deserialize = "Number", serialize = "number"))]
    pub number: i64,
    #[serde(rename(deserialize = "FeltNumber", serialize = "feltNumber"))]
    pub felt_number: i64,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisCurrentHeight {
    #[serde(
        rename(deserialize = "StartTime", serialize = "startTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub start_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "EndTime", serialize = "endTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub end_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "TsunamiHeight", serialize = "tsunamiHeight"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height: Option<EbTsunamiHeight>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisEarthquake {
    #[serde(
        rename(deserialize = "OriginTime", serialize = "originTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub origin_time: Option<DateTime>,
    #[serde(rename(deserialize = "ArrivalTime", serialize = "arrivalTime"))]
    pub arrival_time: DateTime,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "Hypocenter", serialize = "hypocenter"),
        skip_serializing_if = "Option::is_none"
    )]
    pub hypocenter: Option<SeisHypocenter>,
    #[serde(rename(deserialize = "Magnitude", serialize = "magnitudes"))]
    pub magnitudes: Vec<EbMagnitude>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisEarthquakeCount {
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<SeisCountData>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisEarthquakeInfo {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(
        rename(deserialize = "InfoKind", serialize = "infoKind"),
        deserialize_with = "trim_string"
    )]
    pub info_kind: String,
    #[serde(
        rename(deserialize = "InfoSerial", serialize = "infoSerial"),
        skip_serializing_if = "Option::is_none"
    )]
    pub info_serial: Option<SeisInfoSerial>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        deserialize_with = "trim_string"
    )]
    pub text: String,
    #[serde(
        rename(deserialize = "Appendix", serialize = "appendix"),
        skip_serializing_if = "Option::is_none"
    )]
    pub appendix: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisFirstHeight {
    #[serde(
        rename(deserialize = "ArrivalTimeFrom", serialize = "arrivalTimeFrom"),
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time_from: Option<DateTime>,
    #[serde(
        rename(deserialize = "ArrivalTimeTo", serialize = "arrivalTimeTo"),
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time_to: Option<DateTime>,
    #[serde(
        rename(deserialize = "ArrivalTime", serialize = "arrivalTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "Initial", serialize = "initial"),
        skip_serializing_if = "Option::is_none"
    )]
    pub initial: Option<String>,
    #[serde(
        rename(deserialize = "TsunamiHeight", serialize = "tsunamiHeight"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height: Option<EbTsunamiHeight>,
    #[serde(
        rename(deserialize = "Revise", serialize = "revise"),
        skip_serializing_if = "Option::is_none"
    )]
    pub revise: Option<String>,
    #[serde(
        rename(deserialize = "Period", serialize = "period"),
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisForecastArea {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "City", serialize = "cities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub cities: Vec<SeisForecastCity>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisForecastCity {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisForecastInt {
    #[serde(
        rename(deserialize = "@bound", serialize = "@bound"),
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    #[serde(
        rename(deserialize = "From", serialize = "from"),
        skip_serializing_if = "Option::is_none"
    )]
    pub from: Option<String>,
    #[serde(
        rename(deserialize = "To", serialize = "to"),
        skip_serializing_if = "Option::is_none"
    )]
    pub to: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisForecastLgInt {
    #[serde(
        rename(deserialize = "@bound", serialize = "@bound"),
        skip_serializing_if = "Option::is_none"
    )]
    pub bound: Option<String>,
    #[serde(
        rename(deserialize = "From", serialize = "from"),
        skip_serializing_if = "Option::is_none"
    )]
    pub from: Option<String>,
    #[serde(
        rename(deserialize = "To", serialize = "to"),
        skip_serializing_if = "Option::is_none"
    )]
    pub to: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisHypoArea {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(rename(deserialize = "Code", serialize = "code"))]
    pub code: SeisHypoAreaCode,
    #[serde(rename(deserialize = "Coordinate", serialize = "coordinates"))]
    pub coordinates: Vec<EbCoordinate>,
    #[serde(
        rename(deserialize = "ReduceName", serialize = "reduceName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub reduce_name: Option<String>,
    #[serde(
        rename(deserialize = "ReduceCode", serialize = "reduceCode"),
        skip_serializing_if = "Option::is_none"
    )]
    pub reduce_code: Option<SeisHypoAreaReduceCode>,
    #[serde(
        rename(deserialize = "DetailedName", serialize = "detailedName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_name: Option<String>,
    #[serde(
        rename(deserialize = "DetailedCode", serialize = "detailedCode"),
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_code: Option<SeisHypoAreaDetailedCode>,
    #[serde(
        rename(deserialize = "NameFromMark", serialize = "nameFromMark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub name_from_mark: Option<String>,
    #[serde(
        rename(deserialize = "MarkCode", serialize = "markCode"),
        skip_serializing_if = "Option::is_none"
    )]
    pub mark_code: Option<SeisHypoAreaMarkCode>,
    #[serde(
        rename(deserialize = "Direction", serialize = "direction"),
        skip_serializing_if = "Option::is_none"
    )]
    pub direction: Option<String>,
    #[serde(
        rename(deserialize = "Distance", serialize = "distance"),
        skip_serializing_if = "Option::is_none"
    )]
    pub distance: Option<SeisHypoAreaDistance>,
    #[serde(
        rename(deserialize = "LandOrSea", serialize = "landOrSea"),
        skip_serializing_if = "Option::is_none"
    )]
    pub land_or_sea: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisHypoAreaCode {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisHypoAreaDetailedCode {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisHypoAreaDistance {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: i64,
    #[serde(rename(deserialize = "@unit", serialize = "@unit"))]
    pub unit: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisHypoAreaMarkCode {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisHypoAreaReduceCode {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisHypocenter {
    #[serde(rename(deserialize = "Area", serialize = "area"))]
    pub area: SeisHypoArea,
    #[serde(
        rename(deserialize = "Source", serialize = "source"),
        skip_serializing_if = "Option::is_none"
    )]
    pub source: Option<String>,
    #[serde(
        rename(deserialize = "Accuracy", serialize = "accuracy"),
        skip_serializing_if = "Option::is_none"
    )]
    pub accuracy: Option<SeisAccuracy>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisInfoSerial {
    #[serde(rename(deserialize = "@codeType", serialize = "@codeType"))]
    pub code_type: String,
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisIntensity {
    #[serde(
        rename(deserialize = "Forecast", serialize = "forecast"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast: Option<SeisIntensityDetail>,
    #[serde(
        rename(deserialize = "Observation", serialize = "observation"),
        skip_serializing_if = "Option::is_none"
    )]
    pub observation: Option<SeisIntensityDetail>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisIntensityAppendix {
    #[serde(rename(deserialize = "MaxIntChange", serialize = "maxIntChange"))]
    pub max_int_change: i64,
    #[serde(
        rename(deserialize = "MaxLgIntChange", serialize = "maxLgIntChange"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int_change: Option<i64>,
    #[serde(rename(deserialize = "MaxIntChangeReason", serialize = "maxIntChangeReason"))]
    pub max_int_change_reason: i64,
    #[serde(
        rename(
            deserialize = "MaxLgIntChangeReason",
            serialize = "maxLgIntChangeReason"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int_change_reason: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisIntensityArea {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Category", serialize = "category"),
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    #[serde(
        rename(deserialize = "MaxInt", serialize = "maxInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_int: Option<String>,
    #[serde(
        rename(deserialize = "MaxLgInt", serialize = "maxLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int: Option<String>,
    #[serde(
        rename(deserialize = "ForecastInt", serialize = "forecastInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    #[serde(
        rename(deserialize = "ForecastLgInt", serialize = "forecastLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    #[serde(
        rename(deserialize = "ArrivalTime", serialize = "arrivalTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "Revise", serialize = "revise"),
        skip_serializing_if = "Option::is_none"
    )]
    pub revise: Option<String>,
    #[serde(
        rename(deserialize = "City", serialize = "cities"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub cities: Vec<SeisIntensityCity>,
    #[serde(
        rename(deserialize = "IntensityStation", serialize = "intensityStations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub intensity_stations: Vec<SeisIntensityStation>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisIntensityCity {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Category", serialize = "category"),
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    #[serde(
        rename(deserialize = "MaxInt", serialize = "maxInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_int: Option<String>,
    #[serde(
        rename(deserialize = "MaxLgInt", serialize = "maxLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int: Option<String>,
    #[serde(
        rename(deserialize = "ForecastInt", serialize = "forecastInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    #[serde(
        rename(deserialize = "ForecastLgInt", serialize = "forecastLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    #[serde(
        rename(deserialize = "ArrivalTime", serialize = "arrivalTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "Revise", serialize = "revise"),
        skip_serializing_if = "Option::is_none"
    )]
    pub revise: Option<String>,
    #[serde(
        rename(deserialize = "IntensityStation", serialize = "intensityStations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub intensity_stations: Vec<SeisIntensityStation>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisIntensityDetail {
    #[serde(
        rename(deserialize = "CodeDefine", serialize = "codeDefine"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code_define: Option<SeisCodeDefine>,
    #[serde(
        rename(deserialize = "MaxInt", serialize = "maxInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_int: Option<String>,
    #[serde(
        rename(deserialize = "MaxLgInt", serialize = "maxLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int: Option<String>,
    #[serde(
        rename(deserialize = "LgCategory", serialize = "lgCategory"),
        skip_serializing_if = "Option::is_none"
    )]
    pub lg_category: Option<String>,
    #[serde(
        rename(deserialize = "ForecastInt", serialize = "forecastInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    #[serde(
        rename(deserialize = "ForecastLgInt", serialize = "forecastLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    #[serde(
        rename(deserialize = "Appendix", serialize = "appendix"),
        skip_serializing_if = "Option::is_none"
    )]
    pub appendix: Option<SeisIntensityAppendix>,
    #[serde(
        rename(deserialize = "Pref", serialize = "prefs"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub prefs: Vec<SeisIntensityPref>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisIntensityPref {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Category", serialize = "category"),
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    #[serde(
        rename(deserialize = "MaxInt", serialize = "maxInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_int: Option<String>,
    #[serde(
        rename(deserialize = "MaxLgInt", serialize = "maxLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_lg_int: Option<String>,
    #[serde(
        rename(deserialize = "ForecastInt", serialize = "forecastInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_int: Option<SeisForecastInt>,
    #[serde(
        rename(deserialize = "ForecastLgInt", serialize = "forecastLgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast_lg_int: Option<SeisForecastLgInt>,
    #[serde(
        rename(deserialize = "ArrivalTime", serialize = "arrivalTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub arrival_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "Revise", serialize = "revise"),
        skip_serializing_if = "Option::is_none"
    )]
    pub revise: Option<String>,
    #[serde(
        rename(deserialize = "Area", serialize = "areas"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub areas: Vec<SeisIntensityArea>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisIntensityStation {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Int", serialize = "int"),
        skip_serializing_if = "Option::is_none"
    )]
    pub int: Option<String>,
    #[serde(
        rename(deserialize = "K", serialize = "k"),
        skip_serializing_if = "Option::is_none"
    )]
    pub k: Option<f64>,
    #[serde(
        rename(deserialize = "LgInt", serialize = "lgInt"),
        skip_serializing_if = "Option::is_none"
    )]
    pub lg_int: Option<String>,
    #[serde(
        rename(deserialize = "LgIntPerPeriod", serialize = "lgIntPerPeriods"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub lg_int_per_periods: Vec<SeisLgIntPerPeriod>,
    #[serde(
        rename(deserialize = "Sva", serialize = "sva"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sva: Option<SeisSva>,
    #[serde(
        rename(deserialize = "SvaPerPeriod", serialize = "svaPerPeriods"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub sva_per_periods: Vec<SeisSvaPerPeriod>,
    #[serde(
        rename(deserialize = "Revise", serialize = "revise"),
        skip_serializing_if = "Option::is_none"
    )]
    pub revise: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisKind {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisLgIntPerPeriod {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@PeriodicBand", serialize = "@periodicBand"),
        skip_serializing_if = "Option::is_none"
    )]
    pub periodic_band: Option<i64>,
    #[serde(
        rename(deserialize = "@Period", serialize = "@period"),
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
    #[serde(
        rename(deserialize = "@PeriodUnit", serialize = "@periodUnit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub period_unit: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisMaxHeight {
    #[serde(
        rename(deserialize = "DateTime", serialize = "dateTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time: Option<DateTime>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "TsunamiHeightFrom", serialize = "tsunamiHeightFrom"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height_from: Option<EbTsunamiHeight>,
    #[serde(
        rename(deserialize = "TsunamiHeightTo", serialize = "tsunamiHeightTo"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height_to: Option<EbTsunamiHeight>,
    #[serde(
        rename(deserialize = "TsunamiHeight", serialize = "tsunamiHeight"),
        skip_serializing_if = "Option::is_none"
    )]
    pub tsunami_height: Option<EbTsunamiHeight>,
    #[serde(
        rename(deserialize = "Revise", serialize = "revise"),
        skip_serializing_if = "Option::is_none"
    )]
    pub revise: Option<String>,
    #[serde(
        rename(deserialize = "Period", serialize = "period"),
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisNaming {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@english", serialize = "@english"),
        skip_serializing_if = "Option::is_none"
    )]
    pub english: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisSva {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@unit", serialize = "@unit"))]
    pub unit: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisSvaPerPeriod {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: f64,
    #[serde(rename(deserialize = "@unit", serialize = "@unit"))]
    pub unit: String,
    #[serde(
        rename(deserialize = "@PeriodicBand", serialize = "@periodicBand"),
        skip_serializing_if = "Option::is_none"
    )]
    pub periodic_band: Option<i64>,
    #[serde(
        rename(deserialize = "@Period", serialize = "@period"),
        skip_serializing_if = "Option::is_none"
    )]
    pub period: Option<f64>,
    #[serde(
        rename(deserialize = "@PeriodUnit", serialize = "@periodUnit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub period_unit: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisTokai {
    #[serde(
        rename(deserialize = "InfoKind", serialize = "infoKind"),
        deserialize_with = "trim_string"
    )]
    pub info_kind: String,
    #[serde(
        rename(deserialize = "InfoSerial", serialize = "infoSerial"),
        skip_serializing_if = "Option::is_none"
    )]
    pub info_serial: Option<SeisInfoSerial>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        deserialize_with = "trim_string"
    )]
    pub text: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisTsunami {
    #[serde(
        rename(deserialize = "Release", serialize = "release"),
        skip_serializing_if = "Option::is_none"
    )]
    pub release: Option<String>,
    #[serde(
        rename(deserialize = "Observation", serialize = "observation"),
        skip_serializing_if = "Option::is_none"
    )]
    pub observation: Option<SeisTsunamiDetail>,
    #[serde(
        rename(deserialize = "Estimation", serialize = "estimation"),
        skip_serializing_if = "Option::is_none"
    )]
    pub estimation: Option<SeisTsunamiDetail>,
    #[serde(
        rename(deserialize = "Forecast", serialize = "forecast"),
        skip_serializing_if = "Option::is_none"
    )]
    pub forecast: Option<SeisTsunamiDetail>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisTsunamiDetail {
    #[serde(
        rename(deserialize = "CodeDefine", serialize = "codeDefine"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code_define: Option<SeisCodeDefine>,
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<SeisTsunamiItem>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisTsunamiItem {
    #[serde(rename(deserialize = "Area", serialize = "area"))]
    pub area: SeisForecastArea,
    #[serde(
        rename(deserialize = "Category", serialize = "category"),
        skip_serializing_if = "Option::is_none"
    )]
    pub category: Option<SeisCategory>,
    #[serde(
        rename(deserialize = "FirstHeight", serialize = "firstHeight"),
        skip_serializing_if = "Option::is_none"
    )]
    pub first_height: Option<SeisFirstHeight>,
    #[serde(
        rename(deserialize = "MaxHeight", serialize = "maxHeight"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_height: Option<SeisMaxHeight>,
    #[serde(
        rename(deserialize = "Duration", serialize = "duration"),
        skip_serializing_if = "Option::is_none"
    )]
    pub duration: Option<Duration>,
    #[serde(
        rename(deserialize = "Station", serialize = "stations"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub stations: Vec<SeisTsunamiStation>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SeisTsunamiStation {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Sensor", serialize = "sensor"),
        skip_serializing_if = "Option::is_none"
    )]
    pub sensor: Option<String>,
    #[serde(
        rename(deserialize = "HighTideDateTime", serialize = "highTideDateTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub high_tide_date_time: Option<DateTime>,
    #[serde(rename(deserialize = "FirstHeight", serialize = "firstHeight"))]
    pub first_height: SeisFirstHeight,
    #[serde(
        rename(deserialize = "MaxHeight", serialize = "maxHeight"),
        skip_serializing_if = "Option::is_none"
    )]
    pub max_height: Option<SeisMaxHeight>,
    #[serde(
        rename(deserialize = "CurrentHeight", serialize = "currentHeight"),
        skip_serializing_if = "Option::is_none"
    )]
    pub current_height: Option<SeisCurrentHeight>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcBody {
    #[serde(
        rename(deserialize = "Notice", serialize = "notice"),
        skip_serializing_if = "Option::is_none"
    )]
    pub notice: Option<String>,
    #[serde(
        rename(deserialize = "VolcanoInfo", serialize = "volcanoInfos"),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub volcano_infos: Vec<VolcVolcanoInfo>,
    #[serde(
        rename(deserialize = "AshInfos", serialize = "ashInfos"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ash_infos: Option<VolcAshInfos>,
    #[serde(
        rename(deserialize = "VolcanoInfoContent", serialize = "volcanoInfoContent"),
        skip_serializing_if = "Option::is_none"
    )]
    pub volcano_info_content: Option<VolcVolcanoInfoContent>,
    #[serde(
        rename(deserialize = "VolcanoObservation", serialize = "volcanoObservation"),
        skip_serializing_if = "Option::is_none"
    )]
    pub volcano_observation: Option<VolcVolcanoObservation>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcArea {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        deserialize_with = "trim_string"
    )]
    pub code: String,
    #[serde(
        rename(deserialize = "Coordinate", serialize = "coordinate"),
        skip_serializing_if = "Option::is_none"
    )]
    pub coordinate: Option<EbCoordinate>,
    #[serde(
        rename(deserialize = "AreaFromMark", serialize = "areaFromMark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub area_from_mark: Option<String>,
    #[serde(
        rename(deserialize = "CraterName", serialize = "craterName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub crater_name: Option<String>,
    #[serde(
        rename(deserialize = "CraterCoordinate", serialize = "craterCoordinate"),
        skip_serializing_if = "Option::is_none"
    )]
    pub crater_coordinate: Option<EbCoordinate>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcAreas {
    #[serde(rename(deserialize = "@codeType", serialize = "@codeType"))]
    pub code_type: String,
    #[serde(rename(deserialize = "Area", serialize = "areas"))]
    pub areas: Vec<VolcArea>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcAshInfo {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "StartTime", serialize = "startTime"))]
    pub start_time: DateTime,
    #[serde(rename(deserialize = "EndTime", serialize = "endTime"))]
    pub end_time: DateTime,
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<VolcItem>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcAshInfos {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "AshInfo", serialize = "ashInfos"))]
    pub ash_infos: Vec<VolcAshInfo>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcDistance {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<String>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcEventTime {
    #[serde(
        rename(deserialize = "EventDateTime", serialize = "eventDateTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub event_date_time: Option<EbDateTime>,
    #[serde(
        rename(deserialize = "EventDateTimeUTC", serialize = "eventDateTimeUTC"),
        skip_serializing_if = "Option::is_none"
    )]
    pub event_date_time_utc: Option<EbDateTime>,
    #[serde(
        rename(
            deserialize = "EventDateTimeComment",
            serialize = "eventDateTimeComment"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub event_date_time_comment: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcItem {
    #[serde(
        rename(deserialize = "EventTime", serialize = "eventTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub event_time: Option<VolcEventTime>,
    #[serde(rename(deserialize = "Kind", serialize = "kind"))]
    pub kind: VolcKind,
    #[serde(
        rename(deserialize = "LastKind", serialize = "lastKind"),
        skip_serializing_if = "Option::is_none"
    )]
    pub last_kind: Option<VolcKind>,
    #[serde(rename(deserialize = "Areas", serialize = "areas"))]
    pub areas: VolcAreas,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcKind {
    #[serde(
        rename(deserialize = "Name", serialize = "name"),
        deserialize_with = "trim_string"
    )]
    pub name: String,
    #[serde(
        rename(deserialize = "FormalName", serialize = "formalName"),
        skip_serializing_if = "Option::is_none"
    )]
    pub formal_name: Option<String>,
    #[serde(
        rename(deserialize = "Code", serialize = "code"),
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<String>,
    #[serde(
        rename(deserialize = "Condition", serialize = "condition"),
        skip_serializing_if = "Option::is_none"
    )]
    pub condition: Option<String>,
    #[serde(
        rename(deserialize = "Property", serialize = "property"),
        skip_serializing_if = "Option::is_none"
    )]
    pub property: Option<VolcProperty>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcPlume {
    #[serde(rename(
        deserialize = "PlumeHeightAboveCrater",
        serialize = "plumeHeightAboveCrater"
    ))]
    pub plume_height_above_crater: EbPlumeHeight,
    #[serde(
        rename(
            deserialize = "PlumeHeightAboveSeaLevel",
            serialize = "plumeHeightAboveSeaLevel"
        ),
        skip_serializing_if = "Option::is_none"
    )]
    pub plume_height_above_sea_level: Option<EbPlumeHeight>,
    #[serde(rename(deserialize = "PlumeDirection", serialize = "plumeDirection"))]
    pub plume_direction: EbPlumeDirection,
    #[serde(
        rename(deserialize = "PlumeComment", serialize = "plumeComment"),
        skip_serializing_if = "Option::is_none"
    )]
    pub plume_comment: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcProperty {
    #[serde(
        rename(deserialize = "Size", serialize = "size"),
        skip_serializing_if = "Option::is_none"
    )]
    pub size: Option<VolcSize>,
    #[serde(rename(deserialize = "Polygon", serialize = "polygons"))]
    pub polygons: Vec<EbCoordinate>,
    #[serde(rename(deserialize = "PlumeDirection", serialize = "plumeDirection"))]
    pub plume_direction: EbPlumeDirection,
    #[serde(rename(deserialize = "Distance", serialize = "distance"))]
    pub distance: VolcDistance,
    #[serde(
        rename(deserialize = "Remark", serialize = "remark"),
        skip_serializing_if = "Option::is_none"
    )]
    pub remark: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcSize {
    #[serde(rename(deserialize = "$text", serialize = "value"))]
    value: Option<f64>,
    #[serde(
        rename(deserialize = "@type", serialize = "@type"),
        skip_serializing_if = "Option::is_none"
    )]
    pub ty: Option<String>,
    #[serde(
        rename(deserialize = "@unit", serialize = "@unit"),
        skip_serializing_if = "Option::is_none"
    )]
    pub unit: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcVolcanoInfo {
    #[serde(rename(deserialize = "@type", serialize = "@type"))]
    pub ty: String,
    #[serde(rename(deserialize = "Item", serialize = "items"))]
    pub items: Vec<VolcItem>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcVolcanoInfoContent {
    #[serde(
        rename(deserialize = "VolcanoHeadline", serialize = "volcanoHeadline"),
        skip_serializing_if = "Option::is_none"
    )]
    pub volcano_headline: Option<String>,
    #[serde(
        rename(deserialize = "VolcanoActivity", serialize = "volcanoActivity"),
        skip_serializing_if = "Option::is_none"
    )]
    pub volcano_activity: Option<String>,
    #[serde(
        rename(deserialize = "VolcanoPrevention", serialize = "volcanoPrevention"),
        skip_serializing_if = "Option::is_none"
    )]
    pub volcano_prevention: Option<String>,
    #[serde(
        rename(deserialize = "NextAdvisory", serialize = "nextAdvisory"),
        skip_serializing_if = "Option::is_none"
    )]
    pub next_advisory: Option<String>,
    #[serde(
        rename(deserialize = "OtherInfo", serialize = "otherInfo"),
        skip_serializing_if = "Option::is_none"
    )]
    pub other_info: Option<String>,
    #[serde(
        rename(deserialize = "Appendix", serialize = "appendix"),
        skip_serializing_if = "Option::is_none"
    )]
    pub appendix: Option<String>,
    #[serde(
        rename(deserialize = "Text", serialize = "text"),
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcVolcanoObservation {
    #[serde(
        rename(deserialize = "EventTime", serialize = "eventTime"),
        skip_serializing_if = "Option::is_none"
    )]
    pub event_time: Option<VolcEventTime>,
    #[serde(
        rename(deserialize = "ColorPlume", serialize = "colorPlume"),
        skip_serializing_if = "Option::is_none"
    )]
    pub color_plume: Option<VolcPlume>,
    #[serde(
        rename(deserialize = "WhitePlume", serialize = "whitePlume"),
        skip_serializing_if = "Option::is_none"
    )]
    pub white_plume: Option<VolcPlume>,
    #[serde(
        rename(deserialize = "WindAboveCrater", serialize = "windAboveCrater"),
        skip_serializing_if = "Option::is_none"
    )]
    pub wind_above_crater: Option<VolcWindAboveCrater>,
    #[serde(
        rename(deserialize = "OtherObservation", serialize = "otherObservation"),
        skip_serializing_if = "Option::is_none"
    )]
    pub other_observation: Option<String>,
    #[serde(
        rename(deserialize = "Appendix", serialize = "appendix"),
        skip_serializing_if = "Option::is_none"
    )]
    pub appendix: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcWindAboveCrater {
    #[serde(rename(deserialize = "DateTime", serialize = "dateTime"))]
    pub date_time: EbDateTime,
    #[serde(
        rename(
            deserialize = "WindAboveCraterElements",
            serialize = "windAboveCraterElementses"
        ),
        skip_serializing_if = "Vec::is_empty",
        default
    )]
    pub wind_above_crater_elementses: Vec<VolcWindAboveCraterElements>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VolcWindAboveCraterElements {
    #[serde(
        rename(deserialize = "@heightProperty", serialize = "@heightProperty"),
        skip_serializing_if = "Option::is_none"
    )]
    pub height_property: Option<String>,
    #[serde(
        rename(deserialize = "@description", serialize = "@description"),
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    #[serde(rename(
        deserialize = "WindHeightAboveSeaLevel",
        serialize = "windHeightAboveSeaLevel"
    ))]
    pub wind_height_above_sea_level: EbPlumeHeight,
    #[serde(rename(deserialize = "WindDegree", serialize = "windDegree"))]
    pub wind_degree: EbWindDegree,
    #[serde(rename(deserialize = "WindSpeed", serialize = "windSpeed"))]
    pub wind_speed: EbWindSpeed,
}
