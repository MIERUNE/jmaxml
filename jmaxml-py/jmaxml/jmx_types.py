# Code generated by jmx_codegen; DO NOT EDIT.

from __future__ import annotations
from typing import Optional
from datetime import datetime

from .utils import ElementBase, child, childtext, attribute, text
from .custom_types import parse_stringlist, parse_datetime, Duration

from_iso8601_duration = Duration.from_iso8601_duration


class EbCoordinate(ElementBase):
    content: str = text(str)
    type: Optional[str] = attribute(str, "type")
    datum: Optional[str] = attribute(str, "datum")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbDateTime(ElementBase):
    content: datetime = text(parse_datetime)
    type: Optional[str] = attribute(str, "type")
    significant: Optional[str] = attribute(str, "significant")
    precision: Optional[str] = attribute(str, "precision")
    dubious: Optional[str] = attribute(str, "dubious")
    description: Optional[str] = attribute(str, "description")


class EbDirection(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbBearings(ElementBase):
    content: Optional[int] = text(int)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbRadius(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbPressure(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbTemperature(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbHumidity(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbWindDirection(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbWindDegree(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbWindSpeed(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbWindScale(ElementBase):
    content: Optional[int] = text(int)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbSunshine(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbPrecipitation(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbProbabilityOfPrecipitation(ElementBase):
    content: Optional[int] = text(int)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbSnowfallDepth(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbSnowDepth(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbVisibility(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbWeather(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbWeatherCode(ElementBase):
    content: Optional[int] = text(int)
    type: str = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbSynopsis(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class EbWaveHeight(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbTidalLevel(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbSeaIce(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbIcing(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbReliabilityClass(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")


class EbReliabilityValue(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")


class EbPossibilityRankOfWarning(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")


class EbTyphoonClass(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class EbAreaClass(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class EbIntensityClass(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class EbWaterLevel(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbFloodDepth(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    bound: Optional[str] = attribute(str, "bound")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbDischarge(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbReferableString(ElementBase):
    content: str = text(str)
    type: Optional[str] = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")


class EbComparison(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbProbability(ElementBase):
    content: float = text(float)
    unit: Optional[str] = attribute(str, "unit")
    bound: Optional[str] = attribute(str, "bound")
    significant: Optional[bool] = attribute(bool, "significant")


class EbThreshold(ElementBase):
    content: float = text(float)
    type: Optional[str] = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    description: Optional[str] = attribute(str, "description")
    bound: Optional[str] = attribute(str, "bound")


class EbSolarZenithAngle(ElementBase):
    content: float = text(float)
    unit: Optional[str] = attribute(str, "unit")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")


class EbUvIndex(ElementBase):
    content: Optional[float] = text(float)
    type: Optional[str] = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbSpeed(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbMagnitude(ElementBase):
    content: float = text(float)
    type: str = attribute(str, "type")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbTsunamiHeight(ElementBase):
    content: float = text(float)
    type: str = attribute(str, "type")
    unit: str = attribute(str, "unit")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbProbabilityOfAftershock(ElementBase):
    content: float = text(float)
    type: str = attribute(str, "type")
    unit: str = attribute(str, "unit")


class EbPlumeDirection(ElementBase):
    content: str = text(str)
    type: Optional[str] = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbPlumeHeight(ElementBase):
    content: Optional[int] = text(int)
    type: Optional[str] = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    condition: Optional[str] = attribute(str, "condition")
    description: Optional[str] = attribute(str, "description")


class EbWeatherForecastProbability(ElementBase):
    content: float = text(float)
    ref_id: Optional[int] = attribute(int, "refID")
    unit: Optional[str] = attribute(str, "unit")


class VolcSize(ElementBase):
    content: Optional[float] = text(float)
    type: Optional[str] = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")


class VolcDistance(ElementBase):
    content: str = text(str)
    type: Optional[str] = attribute(str, "type")
    unit: Optional[str] = attribute(str, "unit")
    description: Optional[str] = attribute(str, "description")


class MeteText(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class MeteEventDate(ElementBase):
    content: str = text(str)
    description: Optional[str] = attribute(str, "description")
    dubious: Optional[str] = attribute(str, "dubious")


class MetePrefectureCity(ElementBase):
    content: str = text(str)
    part_type: Optional[str] = attribute(str, "partType")


class MeteStationCode(ElementBase):
    content: str = text(str)
    type: Optional[str] = attribute(str, "type")


class MeteSentence(ElementBase):
    content: str = text(str)
    type: Optional[str] = attribute(str, "type")


class MeteWindSpeedLevel(ElementBase):
    content: Optional[float] = text(float)
    type: str = attribute(str, "type")
    ref_id: int = attribute(int, "refID")
    description: Optional[str] = attribute(str, "description")
    range: list[str] = attribute(list[str], "range")


class SeisNaming(ElementBase):
    content: str = text(str)
    english: Optional[str] = attribute(str, "english")


class SeisHypoAreaCode(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class SeisHypoAreaReduceCode(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class SeisHypoAreaDetailedCode(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class SeisHypoAreaMarkCode(ElementBase):
    content: str = text(str)
    type: str = attribute(str, "type")


class SeisHypoAreaDistance(ElementBase):
    content: int = text(int)
    unit: str = attribute(str, "unit")


class SeisAccuracyEpicenter(ElementBase):
    content: float = text(float)
    rank: int = attribute(int, "rank")
    rank2: int = attribute(int, "rank2")


class SeisAccuracyDepth(ElementBase):
    content: float = text(float)
    rank: int = attribute(int, "rank")


class SeisAccuracyMagnitude(ElementBase):
    content: float = text(float)
    rank: int = attribute(int, "rank")


class SeisLgIntPerPeriod(ElementBase):
    content: str = text(str)
    periodic_band: Optional[int] = attribute(int, "PeriodicBand")
    period: Optional[float] = attribute(float, "Period")
    period_unit: Optional[str] = attribute(str, "PeriodUnit")


class SeisSva(ElementBase):
    content: float = text(float)
    unit: str = attribute(str, "unit")


class SeisSvaPerPeriod(ElementBase):
    content: float = text(float)
    unit: str = attribute(str, "unit")
    periodic_band: Optional[int] = attribute(int, "PeriodicBand")
    period: Optional[float] = attribute(float, "Period")
    period_unit: Optional[str] = attribute(str, "PeriodUnit")


class SeisCodeDefineType(ElementBase):
    content: str = text(str)
    xpath: str = attribute(str, "xpath")


class IbKind(ElementBase):
    name: str = childtext(str, "jmx_ib:Name")
    code: Optional[str] = childtext(str, "jmx_ib:Code")
    condition: Optional[str] = childtext(str, "jmx_ib:Condition")


class VolcVolcanoInfoContent(ElementBase):
    volcano_headline: Optional[str] = childtext(str, "jmx_volc:VolcanoHeadline")
    volcano_activity: Optional[str] = childtext(str, "jmx_volc:VolcanoActivity")
    volcano_prevention: Optional[str] = childtext(str, "jmx_volc:VolcanoPrevention")
    next_advisory: Optional[str] = childtext(str, "jmx_volc:NextAdvisory")
    other_info: Optional[str] = childtext(str, "jmx_volc:OtherInfo")
    appendix: Optional[str] = childtext(str, "jmx_volc:Appendix")
    text: Optional[str] = childtext(str, "jmx_volc:Text")


class MeteAttention(ElementBase):
    notes: list[str] = childtext(str, "jmx_mete:Note")


class MeteForecastTerm(ElementBase):
    date: Optional[str] = childtext(str, "jmx_mete:Date")
    term: Optional[str] = childtext(str, "jmx_mete:Term")


class MeteAddition(ElementBase):
    notes: list[str] = childtext(str, "jmx_mete:Note")


class MeteObservationAddition(ElementBase):
    deviation_from_normal: Optional[str] = childtext(
        str, "jmx_mete:DeviationFromNormal"
    )
    deviation_from_last_year: Optional[str] = childtext(
        str, "jmx_mete:DeviationFromLastYear"
    )
    text: Optional[str] = childtext(str, "jmx_mete:Text")


class MeteSignificancy(ElementBase):
    type: str = attribute(str, "type")
    ref_id: Optional[int] = attribute(int, "refID")
    name: str = childtext(str, "jmx_mete:Name")
    code: str = childtext(str, "jmx_mete:Code")
    condition: Optional[str] = childtext(str, "jmx_mete:Condition")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class SeisForecastCity(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")


class SeisKind(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")


class SeisForecastInt(ElementBase):
    bound: Optional[str] = attribute(str, "bound")
    from_: Optional[str] = childtext(str, "jmx_seis:From")
    to: Optional[str] = childtext(str, "jmx_seis:To")


class SeisForecastLgInt(ElementBase):
    bound: Optional[str] = attribute(str, "bound")
    from_: Optional[str] = childtext(str, "jmx_seis:From")
    to: Optional[str] = childtext(str, "jmx_seis:To")


class SeisInfoSerial(ElementBase):
    code_type: str = attribute(str, "codeType")
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")


class MeteForecastSchedule(ElementBase):
    target: str = attribute(str, "target")
    text: Optional[str] = childtext(str, "jmx_mete:Text")
    date_time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:DateTime")


class MeteTyphoonNamePart(ElementBase):
    name: Optional[str] = childtext(str, "jmx_mete:Name")
    name_kana: Optional[str] = childtext(str, "jmx_mete:NameKana")
    number: Optional[str] = childtext(str, "jmx_mete:Number")
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class VolcArea(ElementBase):
    name: str = childtext(str, "jmx_volc:Name")
    code: str = childtext(str, "jmx_volc:Code")
    coordinate: Optional[EbCoordinate] = child(EbCoordinate, "jmx_volc:Coordinate")
    area_from_mark: Optional[str] = childtext(str, "jmx_volc:AreaFromMark")
    crater_name: Optional[str] = childtext(str, "jmx_volc:CraterName")
    crater_coordinate: Optional[EbCoordinate] = child(
        EbCoordinate, "jmx_volc:CraterCoordinate"
    )


class MeteCoordinatePart(ElementBase):
    coordinates: list[EbCoordinate] = child(
        EbCoordinate, "jmx_eb:Coordinate", many=True
    )
    lines: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:Line", many=True)
    polygons: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:Polygon", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class VolcEventTime(ElementBase):
    event_date_time: Optional[EbDateTime] = child(EbDateTime, "jmx_volc:EventDateTime")
    event_date_time_utc: Optional[EbDateTime] = child(
        EbDateTime, "jmx_volc:EventDateTimeUTC"
    )
    event_date_time_comment: Optional[str] = childtext(
        str, "jmx_volc:EventDateTimeComment"
    )


class MeteTimeDefine(ElementBase):
    time_id: int = attribute(int, "timeId")
    date_time: EbDateTime = child(EbDateTime, "jmx_mete:DateTime")
    duration: Optional[Duration] = childtext(from_iso8601_duration, "jmx_mete:Duration")
    name: Optional[str] = childtext(str, "jmx_mete:Name")


class MeteNextKind(ElementBase):
    name: str = childtext(str, "jmx_mete:Name")
    code: str = childtext(str, "jmx_mete:Code")
    condition: Optional[str] = childtext(str, "jmx_mete:Condition")
    date_time: Optional[EbDateTime] = child(EbDateTime, "jmx_mete:DateTime")
    sentence: Optional[str] = childtext(str, "jmx_mete:Sentence")


class EbAxis(ElementBase):
    directions: list[EbDirection] = child(EbDirection, "jmx_eb:Direction", many=True)
    bearings: list[EbBearings] = child(EbBearings, "jmx_eb:Bearings", many=True)
    radiuses: list[EbRadius] = child(EbRadius, "jmx_eb:Radius", many=True)


class MeteIsobarPart(ElementBase):
    pressure: EbPressure = child(EbPressure, "jmx_eb:Pressure")
    line: Optional[EbCoordinate] = child(EbCoordinate, "jmx_eb:Line")
    polygon: Optional[EbCoordinate] = child(EbCoordinate, "jmx_eb:Polygon")


class MeteBaseSunshine(ElementBase):
    sunshines: list[EbSunshine] = child(EbSunshine, "jmx_eb:Sunshine", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteProbabilityOfPrecipitationPart(ElementBase):
    probability_of_precipitations: list[EbProbabilityOfPrecipitation] = child(
        EbProbabilityOfPrecipitation, "jmx_eb:ProbabilityOfPrecipitation", many=True
    )


class MeteBaseSnowDepth(ElementBase):
    snow_depths: list[EbSnowDepth] = child(EbSnowDepth, "jmx_eb:SnowDepth", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWeatherCodePart(ElementBase):
    weather_codes: list[EbWeatherCode] = child(
        EbWeatherCode, "jmx_eb:WeatherCode", many=True
    )


class MeteSynopsisPart(ElementBase):
    synopses: list[EbSynopsis] = child(EbSynopsis, "jmx_eb:Synopsis", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteReliabilityClassPart(ElementBase):
    reliability_classes: list[EbReliabilityClass] = child(
        EbReliabilityClass, "jmx_eb:ReliabilityClass", many=True
    )


class MeteReliabilityValuePart(ElementBase):
    reliability_values: list[EbReliabilityValue] = child(
        EbReliabilityValue, "jmx_eb:ReliabilityValue", many=True
    )


class MetePossibilityRankOfWarningPart(ElementBase):
    possibility_rank_of_warnings: list[EbPossibilityRankOfWarning] = child(
        EbPossibilityRankOfWarning, "jmx_eb:PossibilityRankOfWarning", many=True
    )


class MeteClassPart(ElementBase):
    typhoon_class: Optional[EbTyphoonClass] = child(
        EbTyphoonClass, "jmx_eb:TyphoonClass"
    )
    area_class: Optional[EbAreaClass] = child(EbAreaClass, "jmx_eb:AreaClass")
    intensity_class: Optional[EbIntensityClass] = child(
        EbIntensityClass, "jmx_eb:IntensityClass"
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWaterLevelPart(ElementBase):
    water_levels: list[EbWaterLevel] = child(
        EbWaterLevel, "jmx_eb:WaterLevel", many=True
    )


class MeteFloodAssumptionPart(ElementBase):
    flood_assumption_area: Optional[str] = childtext(
        str, "jmx_mete:FloodAssumptionArea"
    )
    attainment_time: Optional[EbDateTime] = child(EbDateTime, "jmx_mete:AttainmentTime")
    flood_depths: list[EbFloodDepth] = child(
        EbFloodDepth, "jmx_eb:FloodDepth", many=True
    )
    attainment_deepest_time: Optional[EbDateTime] = child(
        EbDateTime, "jmx_mete:AttainmentDeepestTime"
    )


class MeteDischargePart(ElementBase):
    discharges: list[EbDischarge] = child(EbDischarge, "jmx_eb:Discharge", many=True)


class MeteHydrometricStationCriteria(ElementBase):
    water_levels: list[EbWaterLevel] = child(
        EbWaterLevel, "jmx_eb:WaterLevel", many=True
    )
    discharges: list[EbDischarge] = child(EbDischarge, "jmx_eb:Discharge", many=True)


class MeteClimateValuesPart(ElementBase):
    type: str = attribute(str, "type")
    temperatures: list[EbTemperature] = child(
        EbTemperature, "jmx_eb:Temperature", many=True
    )
    precipitations: list[EbPrecipitation] = child(
        EbPrecipitation, "jmx_eb:Precipitation", many=True
    )
    sunshines: list[EbSunshine] = child(EbSunshine, "jmx_eb:Sunshine", many=True)
    snowfall_depths: list[EbSnowfallDepth] = child(
        EbSnowfallDepth, "jmx_eb:SnowfallDepth", many=True
    )
    snow_depths: list[EbSnowDepth] = child(EbSnowDepth, "jmx_eb:SnowDepth", many=True)
    comparisons: list[EbComparison] = child(
        EbComparison, "jmx_eb:Comparison", many=True
    )
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class EbClimateProbabilityValues(ElementBase):
    kind: str = attribute(str, "kind")
    ref_id: Optional[int] = attribute(int, "refID")
    probability_of_below_normal: EbProbability = child(
        EbProbability, "jmx_eb:ProbabilityOfBelowNormal"
    )
    probability_of_normal: EbProbability = child(
        EbProbability, "jmx_eb:ProbabilityOfNormal"
    )
    probability_of_above_normal: EbProbability = child(
        EbProbability, "jmx_eb:ProbabilityOfAboveNormal"
    )


class EbSignificantClimateElement(ElementBase):
    kind: str = attribute(str, "kind")
    texts: list[EbReferableString] = child(EbReferableString, "jmx_eb:Text", many=True)
    probability_of_below_normal: Optional[EbProbability] = child(
        EbProbability, "jmx_eb:ProbabilityOfBelowNormal"
    )
    probability_of_normal: Optional[EbProbability] = child(
        EbProbability, "jmx_eb:ProbabilityOfNormal"
    )
    probability_of_above_normal: Optional[EbProbability] = child(
        EbProbability, "jmx_eb:ProbabilityOfAboveNormal"
    )
    probability_of_significantly_below_normal: Optional[EbProbability] = child(
        EbProbability, "jmx_eb:ProbabilityOfSignificantlyBelowNormal"
    )
    probability_of_significantly_above_normal: Optional[EbProbability] = child(
        EbProbability, "jmx_eb:ProbabilityOfSignificantlyAboveNormal"
    )
    threshold_of_below_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfBelowNormal"
    )
    threshold_of_above_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfAboveNormal"
    )
    threshold_of_significantly_below_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfSignificantlyBelowNormal"
    )
    threshold_of_significantly_above_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfSignificantlyAboveNormal"
    )


class EbClassThresholdOfAverage(ElementBase):
    threshold_of_minimum: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfMinimum"
    )
    threshold_of_significantly_below_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfSignificantlyBelowNormal"
    )
    threshold_of_below_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfBelowNormal"
    )
    threshold_of_above_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfAboveNormal"
    )
    threshold_of_significantly_above_normal: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfSignificantlyAboveNormal"
    )
    threshold_of_maximum: Optional[EbThreshold] = child(
        EbThreshold, "jmx_eb:ThresholdOfMaximum"
    )


class MeteSolarZenithAnglePart(ElementBase):
    solar_zenith_angles: list[EbSolarZenithAngle] = child(
        EbSolarZenithAngle, "jmx_eb:SolarZenithAngle", many=True
    )


class MeteUvIndexPart(ElementBase):
    uv_indexes: list[EbUvIndex] = child(EbUvIndex, "jmx_eb:UvIndex", many=True)
    text: Optional[str] = childtext(str, "jmx_mete:Text")


class SeisCurrentHeight(ElementBase):
    start_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:StartTime")
    end_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:EndTime")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")
    tsunami_height: Optional[EbTsunamiHeight] = child(
        EbTsunamiHeight, "jmx_eb:TsunamiHeight"
    )


class SeisAftershockItem(ElementBase):
    start_time: datetime = childtext(parse_datetime, "jmx_seis:StartTime")
    end_time: datetime = childtext(parse_datetime, "jmx_seis:EndTime")
    probability_of_aftershock: EbProbabilityOfAftershock = child(
        EbProbabilityOfAftershock, "jmx_eb:ProbabilityOfAftershock"
    )
    target_magnitude: EbMagnitude = child(EbMagnitude, "jmx_seis:TargetMagnitude")
    text: Optional[str] = childtext(str, "jmx_seis:Text")


class MeteFiftyKtWindProbabilityPart(ElementBase):
    fifty_kt_wind_probabilities: list[EbWeatherForecastProbability] = child(
        EbWeatherForecastProbability, "jmx_mete:FiftyKtWindProbability", many=True
    )


class VolcProperty(ElementBase):
    size: Optional[VolcSize] = child(VolcSize, "jmx_volc:Size")
    polygons: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:Polygon", many=True)
    plume_direction: EbPlumeDirection = child(EbPlumeDirection, "jmx_eb:PlumeDirection")
    distance: VolcDistance = child(VolcDistance, "jmx_volc:Distance")
    remark: Optional[str] = childtext(str, "jmx_volc:Remark")


class VolcPlume(ElementBase):
    plume_height_above_crater: EbPlumeHeight = child(
        EbPlumeHeight, "jmx_eb:PlumeHeightAboveCrater"
    )
    plume_height_above_sea_level: Optional[EbPlumeHeight] = child(
        EbPlumeHeight, "jmx_eb:PlumeHeightAboveSeaLevel"
    )
    plume_direction: EbPlumeDirection = child(EbPlumeDirection, "jmx_eb:PlumeDirection")
    plume_comment: Optional[str] = childtext(str, "jmx_volc:PlumeComment")


class VolcWindAboveCraterElements(ElementBase):
    height_property: Optional[str] = attribute(str, "heightProperty")
    description: Optional[str] = attribute(str, "description")
    wind_height_above_sea_level: EbPlumeHeight = child(
        EbPlumeHeight, "jmx_eb:WindHeightAboveSeaLevel"
    )
    wind_degree: EbWindDegree = child(EbWindDegree, "jmx_eb:WindDegree")
    wind_speed: EbWindSpeed = child(EbWindSpeed, "jmx_eb:WindSpeed")


class Control(ElementBase):
    title: str = childtext(str, "jmx:Title")
    date_time: datetime = childtext(parse_datetime, "jmx:DateTime")
    status: str = childtext(str, "jmx:Status")
    editorial_office: str = childtext(str, "jmx:EditorialOffice")
    publishing_office: list[str] = childtext(parse_stringlist, "jmx:PublishingOffice")


class MeteComment(ElementBase):
    texts: list[MeteText] = child(MeteText, "jmx_mete:Text", many=True)
    code: Optional[list[str]] = childtext(parse_stringlist, "jmx_mete:Code")


class MeteEventDatePart(ElementBase):
    dates: list[MeteEventDate] = child(MeteEventDate, "jmx_mete:Date", many=True)
    normals: list[MeteEventDate] = child(MeteEventDate, "jmx_mete:Normal", many=True)
    last_years: list[MeteEventDate] = child(
        MeteEventDate, "jmx_mete:LastYear", many=True
    )
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteStation(ElementBase):
    name: str = childtext(str, "jmx_mete:Name")
    codes: list[MeteStationCode] = child(MeteStationCode, "jmx_mete:Code", many=True)
    location: Optional[str] = childtext(str, "jmx_mete:Location")
    status: Optional[str] = childtext(str, "jmx_mete:Status")
    coordinates: list[EbCoordinate] = child(
        EbCoordinate, "jmx_eb:Coordinate", many=True
    )


class MeteOffice(ElementBase):
    type: str = attribute(str, "type")
    name: str = childtext(str, "jmx_mete:Name")
    code: Optional[str] = childtext(str, "jmx_mete:Code")
    contact_info: str = childtext(str, "jmx_mete:ContactInfo")
    uri: Optional[str] = childtext(str, "jmx_mete:URI")


class MeteLocalWind(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    wind_degrees: list[EbWindDegree] = child(
        EbWindDegree, "jmx_eb:WindDegree", many=True
    )
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    wind_scales: list[EbWindScale] = child(EbWindScale, "jmx_eb:WindScale", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalWindDirection(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalWindSpeed(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalWeather(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    weathers: list[EbWeather] = child(EbWeather, "jmx_eb:Weather", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalPressure(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    pressures: list[EbPressure] = child(EbPressure, "jmx_eb:Pressure", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalTemperature(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    temperatures: list[EbTemperature] = child(
        EbTemperature, "jmx_eb:Temperature", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalVisibility(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    visibilities: list[EbVisibility] = child(
        EbVisibility, "jmx_eb:Visibility", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalWaveHeight(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    wave_heights: list[EbWaveHeight] = child(
        EbWaveHeight, "jmx_eb:WaveHeight", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalPrecipitation(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    precipitations: list[EbPrecipitation] = child(
        EbPrecipitation, "jmx_eb:Precipitation", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalSnowfallDepth(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    snowfall_depths: list[EbSnowfallDepth] = child(
        EbSnowfallDepth, "jmx_eb:SnowfallDepth", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalHumidity(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    humidities: list[EbHumidity] = child(EbHumidity, "jmx_eb:Humidity", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalTidalLevel(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    tidal_levels: list[EbTidalLevel] = child(
        EbTidalLevel, "jmx_eb:TidalLevel", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalSeaIce(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    sea_ices: list[EbSeaIce] = child(EbSeaIce, "jmx_eb:SeaIce", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteLocalIcing(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    icings: list[EbIcing] = child(EbIcing, "jmx_eb:Icing", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class SeisHypoArea(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: SeisHypoAreaCode = child(SeisHypoAreaCode, "jmx_seis:Code")
    coordinates: list[EbCoordinate] = child(
        EbCoordinate, "jmx_eb:Coordinate", many=True
    )
    reduce_name: Optional[str] = childtext(str, "jmx_seis:ReduceName")
    reduce_code: Optional[SeisHypoAreaReduceCode] = child(
        SeisHypoAreaReduceCode, "jmx_seis:ReduceCode"
    )
    detailed_name: Optional[str] = childtext(str, "jmx_seis:DetailedName")
    detailed_code: Optional[SeisHypoAreaDetailedCode] = child(
        SeisHypoAreaDetailedCode, "jmx_seis:DetailedCode"
    )
    name_from_mark: Optional[str] = childtext(str, "jmx_seis:NameFromMark")
    mark_code: Optional[SeisHypoAreaMarkCode] = child(
        SeisHypoAreaMarkCode, "jmx_seis:MarkCode"
    )
    direction: Optional[str] = childtext(str, "jmx_seis:Direction")
    distance: Optional[SeisHypoAreaDistance] = child(
        SeisHypoAreaDistance, "jmx_seis:Distance"
    )
    land_or_sea: Optional[str] = childtext(str, "jmx_seis:LandOrSea")


class SeisAccuracy(ElementBase):
    epicenter: SeisAccuracyEpicenter = child(
        SeisAccuracyEpicenter, "jmx_seis:Epicenter"
    )
    depth: SeisAccuracyDepth = child(SeisAccuracyDepth, "jmx_seis:Depth")
    magnitude_calculation: SeisAccuracyMagnitude = child(
        SeisAccuracyMagnitude, "jmx_seis:MagnitudeCalculation"
    )
    number_of_magnitude_calculation: int = childtext(
        int, "jmx_seis:NumberOfMagnitudeCalculation"
    )


class SeisIntensityAppendix(ElementBase):
    max_int_change: int = childtext(int, "jmx_seis:MaxIntChange")
    max_lg_int_change: Optional[int] = childtext(int, "jmx_seis:MaxLgIntChange")
    max_int_change_reason: int = childtext(int, "jmx_seis:MaxIntChangeReason")
    max_lg_int_change_reason: Optional[int] = childtext(
        int, "jmx_seis:MaxLgIntChangeReason"
    )


class SeisCountData(ElementBase):
    type: str = attribute(str, "type")
    start_time: datetime = childtext(parse_datetime, "jmx_seis:StartTime")
    end_time: datetime = childtext(parse_datetime, "jmx_seis:EndTime")
    number: int = childtext(int, "jmx_seis:Number")
    felt_number: int = childtext(int, "jmx_seis:FeltNumber")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")


class SeisFirstHeight(ElementBase):
    arrival_time_from: Optional[datetime] = childtext(
        parse_datetime, "jmx_seis:ArrivalTimeFrom"
    )
    arrival_time_to: Optional[datetime] = childtext(
        parse_datetime, "jmx_seis:ArrivalTimeTo"
    )
    arrival_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:ArrivalTime")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")
    initial: Optional[str] = childtext(str, "jmx_seis:Initial")
    tsunami_height: Optional[EbTsunamiHeight] = child(
        EbTsunamiHeight, "jmx_eb:TsunamiHeight"
    )
    revise: Optional[str] = childtext(str, "jmx_seis:Revise")
    period: Optional[float] = childtext(float, "jmx_seis:Period")


class SeisMaxHeight(ElementBase):
    date_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:DateTime")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")
    tsunami_height_from: Optional[EbTsunamiHeight] = child(
        EbTsunamiHeight, "jmx_seis:TsunamiHeightFrom"
    )
    tsunami_height_to: Optional[EbTsunamiHeight] = child(
        EbTsunamiHeight, "jmx_seis:TsunamiHeightTo"
    )
    tsunami_height: Optional[EbTsunamiHeight] = child(
        EbTsunamiHeight, "jmx_eb:TsunamiHeight"
    )
    revise: Optional[str] = childtext(str, "jmx_seis:Revise")
    period: Optional[float] = childtext(float, "jmx_seis:Period")


class SeisIntensityStation(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")
    int: Optional[str] = childtext(str, "jmx_seis:Int")
    k: Optional[float] = childtext(float, "jmx_seis:K")
    lg_int: Optional[str] = childtext(str, "jmx_seis:LgInt")
    lg_int_per_periods: list[SeisLgIntPerPeriod] = child(
        SeisLgIntPerPeriod, "jmx_seis:LgIntPerPeriod", many=True
    )
    sva: Optional[SeisSva] = child(SeisSva, "jmx_seis:Sva")
    sva_per_periods: list[SeisSvaPerPeriod] = child(
        SeisSvaPerPeriod, "jmx_seis:SvaPerPeriod", many=True
    )
    revise: Optional[str] = childtext(str, "jmx_seis:Revise")


class SeisCommentForm(ElementBase):
    code_type: str = attribute(str, "codeType")
    text: str = childtext(str, "jmx_seis:Text")
    code: list[str] = childtext(parse_stringlist, "jmx_seis:Code")


class SeisCodeDefine(ElementBase):
    types: list[SeisCodeDefineType] = child(
        SeisCodeDefineType, "jmx_seis:Type", many=True
    )


class MeteWarningNotice(ElementBase):
    start_time: MeteForecastTerm = child(MeteForecastTerm, "jmx_mete:StartTime")
    note: str = childtext(str, "jmx_mete:Note")


class MetePeriod(ElementBase):
    start_time: Optional[MeteForecastTerm] = child(
        MeteForecastTerm, "jmx_mete:StartTime"
    )
    end_time: Optional[MeteForecastTerm] = child(MeteForecastTerm, "jmx_mete:EndTime")
    over_time: Optional[str] = childtext(str, "jmx_mete:OverTime")
    zone_time: Optional[MeteForecastTerm] = child(MeteForecastTerm, "jmx_mete:ZoneTime")


class MeteLocalSignificancy(ElementBase):
    area_name: str = childtext(str, "jmx_mete:AreaName")
    significancies: list[MeteSignificancy] = child(
        MeteSignificancy, "jmx_mete:Significancy", many=True
    )
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    peak_time: Optional[MeteForecastTerm] = child(MeteForecastTerm, "jmx_mete:PeakTime")
    attention: Optional[MeteAttention] = child(MeteAttention, "jmx_mete:Attention")
    addition: Optional[MeteAddition] = child(MeteAddition, "jmx_mete:Addition")


class SeisForecastArea(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")
    cities: list[SeisForecastCity] = child(SeisForecastCity, "jmx_seis:City", many=True)


class SeisCategory(ElementBase):
    kind: SeisKind = child(SeisKind, "jmx_seis:Kind")
    last_kind: Optional[SeisKind] = child(SeisKind, "jmx_seis:LastKind")


class SeisTokai(ElementBase):
    info_kind: str = childtext(str, "jmx_seis:InfoKind")
    info_serial: Optional[SeisInfoSerial] = child(SeisInfoSerial, "jmx_seis:InfoSerial")
    text: str = childtext(str, "jmx_seis:Text")


class SeisEarthquakeInfo(ElementBase):
    type: str = attribute(str, "type")
    info_kind: str = childtext(str, "jmx_seis:InfoKind")
    info_serial: Optional[SeisInfoSerial] = child(SeisInfoSerial, "jmx_seis:InfoSerial")
    text: str = childtext(str, "jmx_seis:Text")
    appendix: Optional[str] = childtext(str, "jmx_seis:Appendix")


class MeteClimateForecastAddition(ElementBase):
    target_date_time_notice: Optional[str] = childtext(
        str, "jmx_mete:TargetDateTimeNotice"
    )
    next_forecast_schedules: list[MeteForecastSchedule] = child(
        MeteForecastSchedule, "jmx_mete:NextForecastSchedule", many=True
    )
    notice_of_schedule: Optional[str] = childtext(str, "jmx_mete:NoticeOfSchedule")
    additional_notice: Optional[str] = childtext(str, "jmx_mete:AdditionalNotice")


class VolcAreas(ElementBase):
    code_type: str = attribute(str, "codeType")
    areas: list[VolcArea] = child(VolcArea, "jmx_volc:Area", many=True)


class MeteTimeDefines(ElementBase):
    time_defines: list[MeteTimeDefine] = child(
        MeteTimeDefine, "jmx_mete:TimeDefine", many=True
    )


class MeteNextKinds(ElementBase):
    next_kinds: list[MeteNextKind] = child(MeteNextKind, "jmx_mete:NextKind", many=True)


class EbAxes(ElementBase):
    axes: list[EbAxis] = child(EbAxis, "jmx_eb:Axis", many=True)
    long_axes: list[EbAxis] = child(EbAxis, "jmx_eb:LongAxis", many=True)
    short_axes: list[EbAxis] = child(EbAxis, "jmx_eb:ShortAxis", many=True)


class MeteSunshinePart(ElementBase):
    base: Optional[MeteBaseSunshine] = child(MeteBaseSunshine, "jmx_mete:Base")
    sunshines: list[EbSunshine] = child(EbSunshine, "jmx_eb:Sunshine", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSnowDepthPart(ElementBase):
    base: Optional[MeteBaseSnowDepth] = child(MeteBaseSnowDepth, "jmx_mete:Base")
    snow_depths: list[EbSnowDepth] = child(EbSnowDepth, "jmx_eb:SnowDepth", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteClimateProbabilityValuesPart(ElementBase):
    climate_probability_values: list[EbClimateProbabilityValues] = child(
        EbClimateProbabilityValues, "jmx_eb:ClimateProbabilityValues", many=True
    )


class EbClimateFeature(ElementBase):
    general_situation_texts: list[EbReferableString] = child(
        EbReferableString, "jmx_eb:GeneralSituationText", many=True
    )
    significant_climate_elements: list[EbSignificantClimateElement] = child(
        EbSignificantClimateElement, "jmx_eb:SignificantClimateElement", many=True
    )


class SeisAftershocks(ElementBase):
    items: list[SeisAftershockItem] = child(
        SeisAftershockItem, "jmx_seis:Item", many=True
    )
    text: Optional[str] = childtext(str, "jmx_seis:Text")


class VolcKind(ElementBase):
    name: str = childtext(str, "jmx_volc:Name")
    formal_name: Optional[str] = childtext(str, "jmx_volc:FormalName")
    code: Optional[str] = childtext(str, "jmx_volc:Code")
    condition: Optional[str] = childtext(str, "jmx_volc:Condition")
    property: Optional[VolcProperty] = child(VolcProperty, "jmx_volc:Property")


class VolcWindAboveCrater(ElementBase):
    date_time: EbDateTime = child(EbDateTime, "jmx_eb:DateTime")
    wind_above_crater_elementses: list[VolcWindAboveCraterElements] = child(
        VolcWindAboveCraterElements, "jmx_volc:WindAboveCraterElements", many=True
    )


class MeteStations(ElementBase):
    code_type: Optional[str] = attribute(str, "codeType")
    stations: list[MeteStation] = child(MeteStation, "jmx_mete:Station", many=True)


class MeteOfficeInfo(ElementBase):
    offices: list[MeteOffice] = child(MeteOffice, "jmx_mete:Office", many=True)


class MeteBaseWind(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    wind_degrees: list[EbWindDegree] = child(
        EbWindDegree, "jmx_eb:WindDegree", many=True
    )
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    wind_scales: list[EbWindScale] = child(EbWindScale, "jmx_eb:WindScale", many=True)
    locals: list[MeteLocalWind] = child(MeteLocalWind, "jmx_mete:Local", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseWindDirection(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    locals: list[MeteLocalWindDirection] = child(
        MeteLocalWindDirection, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseWindSpeed(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    locals: list[MeteLocalWindSpeed] = child(
        MeteLocalWindSpeed, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseWeather(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    weathers: list[EbWeather] = child(EbWeather, "jmx_eb:Weather", many=True)
    locals: list[MeteLocalWeather] = child(
        MeteLocalWeather, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBasePressure(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    pressures: list[EbPressure] = child(EbPressure, "jmx_eb:Pressure", many=True)
    locals: list[MeteLocalPressure] = child(
        MeteLocalPressure, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseTemperature(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    temperatures: list[EbTemperature] = child(
        EbTemperature, "jmx_eb:Temperature", many=True
    )
    locals: list[MeteLocalTemperature] = child(
        MeteLocalTemperature, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseVisibility(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    visibilities: list[EbVisibility] = child(
        EbVisibility, "jmx_eb:Visibility", many=True
    )
    locals: list[MeteLocalVisibility] = child(
        MeteLocalVisibility, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseWaveHeight(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    wave_heights: list[EbWaveHeight] = child(
        EbWaveHeight, "jmx_eb:WaveHeight", many=True
    )
    locals: list[MeteLocalWaveHeight] = child(
        MeteLocalWaveHeight, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBasePrecipitation(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    precipitations: list[EbPrecipitation] = child(
        EbPrecipitation, "jmx_eb:Precipitation", many=True
    )
    locals: list[MeteLocalPrecipitation] = child(
        MeteLocalPrecipitation, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseSnowfallDepth(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    snowfall_depths: list[EbSnowfallDepth] = child(
        EbSnowfallDepth, "jmx_eb:SnowfallDepth", many=True
    )
    locals: list[MeteLocalSnowfallDepth] = child(
        MeteLocalSnowfallDepth, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseHumidity(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    humidities: list[EbHumidity] = child(EbHumidity, "jmx_eb:Humidity", many=True)
    locals: list[MeteLocalHumidity] = child(
        MeteLocalHumidity, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseTidalLevel(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    tidal_levels: list[EbTidalLevel] = child(
        EbTidalLevel, "jmx_eb:TidalLevel", many=True
    )
    locals: list[MeteLocalTidalLevel] = child(
        MeteLocalTidalLevel, "jmx_mete:Local", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseSeaIce(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    sea_ices: list[EbSeaIce] = child(EbSeaIce, "jmx_eb:SeaIce", many=True)
    locals: list[MeteLocalSeaIce] = child(MeteLocalSeaIce, "jmx_mete:Local", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteBaseIcing(ElementBase):
    time_modifier: Optional[str] = childtext(str, "jmx_mete:TimeModifier")
    icings: list[EbIcing] = child(EbIcing, "jmx_eb:Icing", many=True)
    locals: list[MeteLocalIcing] = child(MeteLocalIcing, "jmx_mete:Local", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class SeisHypocenter(ElementBase):
    area: SeisHypoArea = child(SeisHypoArea, "jmx_seis:Area")
    source: Optional[str] = childtext(str, "jmx_seis:Source")
    accuracy: Optional[SeisAccuracy] = child(SeisAccuracy, "jmx_seis:Accuracy")


class SeisEarthquakeCount(ElementBase):
    items: list[SeisCountData] = child(SeisCountData, "jmx_seis:Item", many=True)


class SeisTsunamiStation(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")
    sensor: Optional[str] = childtext(str, "jmx_seis:Sensor")
    high_tide_date_time: Optional[datetime] = childtext(
        parse_datetime, "jmx_seis:HighTideDateTime"
    )
    first_height: SeisFirstHeight = child(SeisFirstHeight, "jmx_seis:FirstHeight")
    max_height: Optional[SeisMaxHeight] = child(SeisMaxHeight, "jmx_seis:MaxHeight")
    current_height: Optional[SeisCurrentHeight] = child(
        SeisCurrentHeight, "jmx_seis:CurrentHeight"
    )


class SeisComment(ElementBase):
    warning_comment: Optional[SeisCommentForm] = child(
        SeisCommentForm, "jmx_seis:WarningComment"
    )
    forecast_comment: Optional[SeisCommentForm] = child(
        SeisCommentForm, "jmx_seis:ForecastComment"
    )
    observation_comment: Optional[SeisCommentForm] = child(
        SeisCommentForm, "jmx_seis:ObservationComment"
    )
    var_comment: Optional[SeisCommentForm] = child(
        SeisCommentForm, "jmx_seis:VarComment"
    )
    free_form_comment: Optional[str] = childtext(str, "jmx_seis:FreeFormComment")
    uri: Optional[str] = childtext(str, "jmx_seis:URI")


class MeteBaseSignificancy(ElementBase):
    significancies: list[MeteSignificancy] = child(
        MeteSignificancy, "jmx_mete:Significancy", many=True
    )
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    peak_time: Optional[MeteForecastTerm] = child(MeteForecastTerm, "jmx_mete:PeakTime")
    attention: Optional[MeteAttention] = child(MeteAttention, "jmx_mete:Attention")
    addition: Optional[MeteAddition] = child(MeteAddition, "jmx_mete:Addition")
    locals: list[MeteLocalSignificancy] = child(
        MeteLocalSignificancy, "jmx_mete:Local", many=True
    )


class SeisIntensityCity(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")
    category: Optional[SeisCategory] = child(SeisCategory, "jmx_seis:Category")
    max_int: Optional[str] = childtext(str, "jmx_seis:MaxInt")
    max_lg_int: Optional[str] = childtext(str, "jmx_seis:MaxLgInt")
    forecast_int: Optional[SeisForecastInt] = child(
        SeisForecastInt, "jmx_seis:ForecastInt"
    )
    forecast_lg_int: Optional[SeisForecastLgInt] = child(
        SeisForecastLgInt, "jmx_seis:ForecastLgInt"
    )
    arrival_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:ArrivalTime")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")
    revise: Optional[str] = childtext(str, "jmx_seis:Revise")
    intensity_stations: list[SeisIntensityStation] = child(
        SeisIntensityStation, "jmx_seis:IntensityStation", many=True
    )


class EbCircle(ElementBase):
    type: Optional[str] = attribute(str, "type")
    base_points: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:BasePoint", many=True)
    axes: Optional[EbAxes] = child(EbAxes, "jmx_eb:Axes")


class VolcItem(ElementBase):
    event_time: Optional[VolcEventTime] = child(VolcEventTime, "jmx_volc:EventTime")
    kind: VolcKind = child(VolcKind, "jmx_volc:Kind")
    last_kind: Optional[VolcKind] = child(VolcKind, "jmx_volc:LastKind")
    areas: VolcAreas = child(VolcAreas, "jmx_volc:Areas")


class VolcVolcanoObservation(ElementBase):
    event_time: Optional[VolcEventTime] = child(VolcEventTime, "jmx_volc:EventTime")
    color_plume: Optional[VolcPlume] = child(VolcPlume, "jmx_volc:ColorPlume")
    white_plume: Optional[VolcPlume] = child(VolcPlume, "jmx_volc:WhitePlume")
    wind_above_crater: Optional[VolcWindAboveCrater] = child(
        VolcWindAboveCrater, "jmx_volc:WindAboveCrater"
    )
    other_observation: Optional[str] = childtext(str, "jmx_volc:OtherObservation")
    appendix: Optional[str] = childtext(str, "jmx_volc:Appendix")


class MeteSubAreaWind(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWind] = child(MeteBaseWind, "jmx_mete:Base")
    temporaries: list[MeteBaseWind] = child(
        MeteBaseWind, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWind] = child(MeteBaseWind, "jmx_mete:Becoming", many=True)
    locals: list[MeteLocalWind] = child(MeteLocalWind, "jmx_mete:Local", many=True)
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    wind_degrees: list[EbWindDegree] = child(
        EbWindDegree, "jmx_eb:WindDegree", many=True
    )
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    wind_scales: list[EbWindScale] = child(EbWindScale, "jmx_eb:WindScale", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaWindDirection(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWindDirection] = child(
        MeteBaseWindDirection, "jmx_mete:Base"
    )
    temporaries: list[MeteBaseWindDirection] = child(
        MeteBaseWindDirection, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWindDirection] = child(
        MeteBaseWindDirection, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalWindDirection] = child(
        MeteLocalWindDirection, "jmx_mete:Local", many=True
    )
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaWindSpeed(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWindSpeed] = child(MeteBaseWindSpeed, "jmx_mete:Base")
    temporaries: list[MeteBaseWindSpeed] = child(
        MeteBaseWindSpeed, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWindSpeed] = child(
        MeteBaseWindSpeed, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalWindSpeed] = child(
        MeteLocalWindSpeed, "jmx_mete:Local", many=True
    )
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaWeather(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWeather] = child(MeteBaseWeather, "jmx_mete:Base")
    temporaries: list[MeteBaseWeather] = child(
        MeteBaseWeather, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWeather] = child(
        MeteBaseWeather, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalWeather] = child(
        MeteLocalWeather, "jmx_mete:Local", many=True
    )
    weathers: list[EbWeather] = child(EbWeather, "jmx_eb:Weather", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaPressure(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBasePressure] = child(MeteBasePressure, "jmx_mete:Base")
    temporaries: list[MeteBasePressure] = child(
        MeteBasePressure, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBasePressure] = child(
        MeteBasePressure, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalPressure] = child(
        MeteLocalPressure, "jmx_mete:Local", many=True
    )
    pressures: list[EbPressure] = child(EbPressure, "jmx_eb:Pressure", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaTemperature(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseTemperature] = child(MeteBaseTemperature, "jmx_mete:Base")
    temporaries: list[MeteBaseTemperature] = child(
        MeteBaseTemperature, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseTemperature] = child(
        MeteBaseTemperature, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalTemperature] = child(
        MeteLocalTemperature, "jmx_mete:Local", many=True
    )
    temperatures: list[EbTemperature] = child(
        EbTemperature, "jmx_eb:Temperature", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaVisibility(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseVisibility] = child(MeteBaseVisibility, "jmx_mete:Base")
    temporaries: list[MeteBaseVisibility] = child(
        MeteBaseVisibility, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseVisibility] = child(
        MeteBaseVisibility, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalVisibility] = child(
        MeteLocalVisibility, "jmx_mete:Local", many=True
    )
    visibilities: list[EbVisibility] = child(
        EbVisibility, "jmx_eb:Visibility", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaWaveHeight(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWaveHeight] = child(MeteBaseWaveHeight, "jmx_mete:Base")
    temporaries: list[MeteBaseWaveHeight] = child(
        MeteBaseWaveHeight, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWaveHeight] = child(
        MeteBaseWaveHeight, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalWaveHeight] = child(
        MeteLocalWaveHeight, "jmx_mete:Local", many=True
    )
    wave_heights: list[EbWaveHeight] = child(
        EbWaveHeight, "jmx_eb:WaveHeight", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaPrecipitation(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBasePrecipitation] = child(
        MeteBasePrecipitation, "jmx_mete:Base"
    )
    temporaries: list[MeteBasePrecipitation] = child(
        MeteBasePrecipitation, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBasePrecipitation] = child(
        MeteBasePrecipitation, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalPrecipitation] = child(
        MeteLocalPrecipitation, "jmx_mete:Local", many=True
    )
    precipitations: list[EbPrecipitation] = child(
        EbPrecipitation, "jmx_eb:Precipitation", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaSnowfallDepth(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseSnowfallDepth] = child(
        MeteBaseSnowfallDepth, "jmx_mete:Base"
    )
    temporaries: list[MeteBaseSnowfallDepth] = child(
        MeteBaseSnowfallDepth, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseSnowfallDepth] = child(
        MeteBaseSnowfallDepth, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalSnowfallDepth] = child(
        MeteLocalSnowfallDepth, "jmx_mete:Local", many=True
    )
    snowfall_depths: list[EbSnowfallDepth] = child(
        EbSnowfallDepth, "jmx_eb:SnowfallDepth", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaHumidity(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseHumidity] = child(MeteBaseHumidity, "jmx_mete:Base")
    temporaries: list[MeteBaseHumidity] = child(
        MeteBaseHumidity, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseHumidity] = child(
        MeteBaseHumidity, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalHumidity] = child(
        MeteLocalHumidity, "jmx_mete:Local", many=True
    )
    humidities: list[EbHumidity] = child(EbHumidity, "jmx_eb:Humidity", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaTidalLevel(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseTidalLevel] = child(MeteBaseTidalLevel, "jmx_mete:Base")
    temporaries: list[MeteBaseTidalLevel] = child(
        MeteBaseTidalLevel, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseTidalLevel] = child(
        MeteBaseTidalLevel, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalTidalLevel] = child(
        MeteLocalTidalLevel, "jmx_mete:Local", many=True
    )
    tidal_levels: list[EbTidalLevel] = child(
        EbTidalLevel, "jmx_eb:TidalLevel", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaSeaIce(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseSeaIce] = child(MeteBaseSeaIce, "jmx_mete:Base")
    temporaries: list[MeteBaseSeaIce] = child(
        MeteBaseSeaIce, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseSeaIce] = child(
        MeteBaseSeaIce, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalSeaIce] = child(MeteLocalSeaIce, "jmx_mete:Local", many=True)
    sea_ices: list[EbSeaIce] = child(EbSeaIce, "jmx_eb:SeaIce", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSubAreaIcing(ElementBase):
    area_name: Optional[str] = childtext(str, "jmx_mete:AreaName")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseIcing] = child(MeteBaseIcing, "jmx_mete:Base")
    temporaries: list[MeteBaseIcing] = child(
        MeteBaseIcing, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseIcing] = child(
        MeteBaseIcing, "jmx_mete:Becoming", many=True
    )
    locals: list[MeteLocalIcing] = child(MeteLocalIcing, "jmx_mete:Local", many=True)
    icings: list[EbIcing] = child(EbIcing, "jmx_eb:Icing", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class SeisEarthquake(ElementBase):
    origin_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:OriginTime")
    arrival_time: datetime = childtext(parse_datetime, "jmx_seis:ArrivalTime")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")
    hypocenter: Optional[SeisHypocenter] = child(SeisHypocenter, "jmx_seis:Hypocenter")
    magnitudes: list[EbMagnitude] = child(EbMagnitude, "jmx_eb:Magnitude", many=True)


class SeisTsunamiItem(ElementBase):
    area: SeisForecastArea = child(SeisForecastArea, "jmx_seis:Area")
    category: Optional[SeisCategory] = child(SeisCategory, "jmx_seis:Category")
    first_height: Optional[SeisFirstHeight] = child(
        SeisFirstHeight, "jmx_seis:FirstHeight"
    )
    max_height: Optional[SeisMaxHeight] = child(SeisMaxHeight, "jmx_seis:MaxHeight")
    duration: Optional[Duration] = childtext(from_iso8601_duration, "jmx_seis:Duration")
    stations: list[SeisTsunamiStation] = child(
        SeisTsunamiStation, "jmx_seis:Station", many=True
    )


class MeteSignificancyPart(ElementBase):
    base: MeteBaseSignificancy = child(MeteBaseSignificancy, "jmx_mete:Base")


class SeisIntensityArea(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")
    category: Optional[SeisCategory] = child(SeisCategory, "jmx_seis:Category")
    max_int: Optional[str] = childtext(str, "jmx_seis:MaxInt")
    max_lg_int: Optional[str] = childtext(str, "jmx_seis:MaxLgInt")
    forecast_int: Optional[SeisForecastInt] = child(
        SeisForecastInt, "jmx_seis:ForecastInt"
    )
    forecast_lg_int: Optional[SeisForecastLgInt] = child(
        SeisForecastLgInt, "jmx_seis:ForecastLgInt"
    )
    arrival_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:ArrivalTime")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")
    revise: Optional[str] = childtext(str, "jmx_seis:Revise")
    cities: list[SeisIntensityCity] = child(
        SeisIntensityCity, "jmx_seis:City", many=True
    )
    intensity_stations: list[SeisIntensityStation] = child(
        SeisIntensityStation, "jmx_seis:IntensityStation", many=True
    )


class IbArea(ElementBase):
    name: str = childtext(str, "jmx_ib:Name")
    code: Optional[str] = childtext(str, "jmx_ib:Code")
    circles: list[EbCircle] = child(EbCircle, "jmx_eb:Circle", many=True)
    coordinates: list[EbCoordinate] = child(
        EbCoordinate, "jmx_eb:Coordinate", many=True
    )
    lines: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:Line", many=True)
    polygons: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:Polygon", many=True)


class MeteArea(ElementBase):
    code_type: Optional[str] = attribute(str, "codeType")
    name: str = childtext(str, "jmx_mete:Name")
    code: Optional[str] = childtext(str, "jmx_mete:Code")
    prefecture: Optional[MetePrefectureCity] = child(
        MetePrefectureCity, "jmx_mete:Prefecture"
    )
    prefecture_code: Optional[str] = childtext(str, "jmx_mete:PrefectureCode")
    prefecture_list: Optional[list[str]] = childtext(
        parse_stringlist, "jmx_mete:PrefectureList"
    )
    prefecture_code_list: Optional[list[str]] = childtext(
        parse_stringlist, "jmx_mete:PrefectureCodeList"
    )
    sub_prefecture: Optional[str] = childtext(str, "jmx_mete:SubPrefecture")
    sub_prefecture_code: Optional[str] = childtext(str, "jmx_mete:SubPrefectureCode")
    sub_prefecture_list: Optional[list[str]] = childtext(
        parse_stringlist, "jmx_mete:SubPrefectureList"
    )
    sub_prefecture_code_list: Optional[list[str]] = childtext(
        parse_stringlist, "jmx_mete:SubPrefectureCodeList"
    )
    city: Optional[MetePrefectureCity] = child(MetePrefectureCity, "jmx_mete:City")
    city_code: Optional[str] = childtext(str, "jmx_mete:CityCode")
    city_list: Optional[list[str]] = childtext(parse_stringlist, "jmx_mete:CityList")
    city_code_list: Optional[list[str]] = childtext(
        parse_stringlist, "jmx_mete:CityCodeList"
    )
    sub_city: Optional[str] = childtext(str, "jmx_mete:SubCity")
    sub_city_code: Optional[str] = childtext(str, "jmx_mete:SubCityCode")
    sub_city_list: Optional[list[str]] = childtext(
        parse_stringlist, "jmx_mete:SubCityList"
    )
    sub_city_code_list: Optional[list[str]] = childtext(
        parse_stringlist, "jmx_mete:SubCityCodeList"
    )
    circles: list[EbCircle] = child(EbCircle, "jmx_eb:Circle", many=True)
    coordinates: list[EbCoordinate] = child(
        EbCoordinate, "jmx_eb:Coordinate", many=True
    )
    lines: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:Line", many=True)
    polygons: list[EbCoordinate] = child(EbCoordinate, "jmx_eb:Polygon", many=True)
    location: Optional[str] = childtext(str, "jmx_mete:Location")
    status: Optional[str] = childtext(str, "jmx_mete:Status")


class MeteWarningAreaPart(ElementBase):
    type: str = attribute(str, "type")
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    circle: EbCircle = child(EbCircle, "jmx_eb:Circle")


class MeteCenterPart(ElementBase):
    coordinates: list[EbCoordinate] = child(
        EbCoordinate, "jmx_eb:Coordinate", many=True
    )
    probability_circles: list[EbCircle] = child(
        EbCircle, "jmx_mete:ProbabilityCircle", many=True
    )
    location: Optional[str] = childtext(str, "jmx_mete:Location")
    directions: list[EbDirection] = child(EbDirection, "jmx_eb:Direction", many=True)
    speeds: list[EbSpeed] = child(EbSpeed, "jmx_eb:Speed", many=True)
    pressure: Optional[EbPressure] = child(EbPressure, "jmx_eb:Pressure")
    radiuses: list[EbRadius] = child(EbRadius, "jmx_eb:Radius", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class VolcVolcanoInfo(ElementBase):
    type: str = attribute(str, "type")
    items: list[VolcItem] = child(VolcItem, "jmx_volc:Item", many=True)


class VolcAshInfo(ElementBase):
    type: str = attribute(str, "type")
    start_time: datetime = childtext(parse_datetime, "jmx_volc:StartTime")
    end_time: datetime = childtext(parse_datetime, "jmx_volc:EndTime")
    items: list[VolcItem] = child(VolcItem, "jmx_volc:Item", many=True)


class MeteWindPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWind] = child(MeteBaseWind, "jmx_mete:Base")
    temporaries: list[MeteBaseWind] = child(
        MeteBaseWind, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWind] = child(MeteBaseWind, "jmx_mete:Becoming", many=True)
    sub_areas: list[MeteSubAreaWind] = child(
        MeteSubAreaWind, "jmx_mete:SubArea", many=True
    )
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    wind_degrees: list[EbWindDegree] = child(
        EbWindDegree, "jmx_eb:WindDegree", many=True
    )
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    wind_scales: list[EbWindScale] = child(EbWindScale, "jmx_eb:WindScale", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWindForecastPart(ElementBase):
    ref_id: int = attribute(int, "refID")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWind] = child(MeteBaseWind, "jmx_mete:Base")
    temporaries: list[MeteBaseWind] = child(
        MeteBaseWind, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWind] = child(MeteBaseWind, "jmx_mete:Becoming", many=True)
    sub_areas: list[MeteSubAreaWind] = child(
        MeteSubAreaWind, "jmx_mete:SubArea", many=True
    )
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWindDirectionPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWindDirection] = child(
        MeteBaseWindDirection, "jmx_mete:Base"
    )
    temporaries: list[MeteBaseWindDirection] = child(
        MeteBaseWindDirection, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWindDirection] = child(
        MeteBaseWindDirection, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaWindDirection] = child(
        MeteSubAreaWindDirection, "jmx_mete:SubArea", many=True
    )
    wind_directions: list[EbWindDirection] = child(
        EbWindDirection, "jmx_eb:WindDirection", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWindSpeedPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWindSpeed] = child(MeteBaseWindSpeed, "jmx_mete:Base")
    temporaries: list[MeteBaseWindSpeed] = child(
        MeteBaseWindSpeed, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWindSpeed] = child(
        MeteBaseWindSpeed, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaWindSpeed] = child(
        MeteSubAreaWindSpeed, "jmx_mete:SubArea", many=True
    )
    wind_speeds: list[EbWindSpeed] = child(EbWindSpeed, "jmx_eb:WindSpeed", many=True)
    wind_speed_levels: list[MeteWindSpeedLevel] = child(
        MeteWindSpeedLevel, "jmx_mete:WindSpeedLevel", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWeatherPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWeather] = child(MeteBaseWeather, "jmx_mete:Base")
    temporaries: list[MeteBaseWeather] = child(
        MeteBaseWeather, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWeather] = child(
        MeteBaseWeather, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaWeather] = child(
        MeteSubAreaWeather, "jmx_mete:SubArea", many=True
    )
    weathers: list[EbWeather] = child(EbWeather, "jmx_eb:Weather", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWeatherForecastPart(ElementBase):
    ref_id: int = attribute(int, "refID")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWeather] = child(MeteBaseWeather, "jmx_mete:Base")
    temporaries: list[MeteBaseWeather] = child(
        MeteBaseWeather, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWeather] = child(
        MeteBaseWeather, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaWeather] = child(
        MeteSubAreaWeather, "jmx_mete:SubArea", many=True
    )
    weathers: list[EbWeather] = child(EbWeather, "jmx_eb:Weather", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MetePressurePart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBasePressure] = child(MeteBasePressure, "jmx_mete:Base")
    temporaries: list[MeteBasePressure] = child(
        MeteBasePressure, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBasePressure] = child(
        MeteBasePressure, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaPressure] = child(
        MeteSubAreaPressure, "jmx_mete:SubArea", many=True
    )
    pressures: list[EbPressure] = child(EbPressure, "jmx_eb:Pressure", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteTemperaturePart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseTemperature] = child(MeteBaseTemperature, "jmx_mete:Base")
    temporaries: list[MeteBaseTemperature] = child(
        MeteBaseTemperature, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseTemperature] = child(
        MeteBaseTemperature, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaTemperature] = child(
        MeteSubAreaTemperature, "jmx_mete:SubArea", many=True
    )
    temperatures: list[EbTemperature] = child(
        EbTemperature, "jmx_eb:Temperature", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteVisibilityPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseVisibility] = child(MeteBaseVisibility, "jmx_mete:Base")
    temporaries: list[MeteBaseVisibility] = child(
        MeteBaseVisibility, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseVisibility] = child(
        MeteBaseVisibility, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaVisibility] = child(
        MeteSubAreaVisibility, "jmx_mete:SubArea", many=True
    )
    visibilities: list[EbVisibility] = child(
        EbVisibility, "jmx_eb:Visibility", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWaveHeightPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWaveHeight] = child(MeteBaseWaveHeight, "jmx_mete:Base")
    temporaries: list[MeteBaseWaveHeight] = child(
        MeteBaseWaveHeight, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWaveHeight] = child(
        MeteBaseWaveHeight, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaWaveHeight] = child(
        MeteSubAreaWaveHeight, "jmx_mete:SubArea", many=True
    )
    wave_heights: list[EbWaveHeight] = child(
        EbWaveHeight, "jmx_eb:WaveHeight", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteWaveHeightForecastPart(ElementBase):
    ref_id: int = attribute(int, "refID")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseWaveHeight] = child(MeteBaseWaveHeight, "jmx_mete:Base")
    temporaries: list[MeteBaseWaveHeight] = child(
        MeteBaseWaveHeight, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseWaveHeight] = child(
        MeteBaseWaveHeight, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaWaveHeight] = child(
        MeteSubAreaWaveHeight, "jmx_mete:SubArea", many=True
    )
    wave_heights: list[EbWaveHeight] = child(
        EbWaveHeight, "jmx_eb:WaveHeight", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MetePrecipitationPart(ElementBase):
    ref_id: Optional[int] = attribute(int, "refID")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBasePrecipitation] = child(
        MeteBasePrecipitation, "jmx_mete:Base"
    )
    temporaries: list[MeteBasePrecipitation] = child(
        MeteBasePrecipitation, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBasePrecipitation] = child(
        MeteBasePrecipitation, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaPrecipitation] = child(
        MeteSubAreaPrecipitation, "jmx_mete:SubArea", many=True
    )
    precipitations: list[EbPrecipitation] = child(
        EbPrecipitation, "jmx_eb:Precipitation", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSnowfallDepthPart(ElementBase):
    ref_id: Optional[int] = attribute(int, "refID")
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseSnowfallDepth] = child(
        MeteBaseSnowfallDepth, "jmx_mete:Base"
    )
    temporaries: list[MeteBaseSnowfallDepth] = child(
        MeteBaseSnowfallDepth, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseSnowfallDepth] = child(
        MeteBaseSnowfallDepth, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaSnowfallDepth] = child(
        MeteSubAreaSnowfallDepth, "jmx_mete:SubArea", many=True
    )
    snowfall_depths: list[EbSnowfallDepth] = child(
        EbSnowfallDepth, "jmx_eb:SnowfallDepth", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteHumidityPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseHumidity] = child(MeteBaseHumidity, "jmx_mete:Base")
    temporaries: list[MeteBaseHumidity] = child(
        MeteBaseHumidity, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseHumidity] = child(
        MeteBaseHumidity, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaHumidity] = child(
        MeteSubAreaHumidity, "jmx_mete:SubArea", many=True
    )
    humidities: list[EbHumidity] = child(EbHumidity, "jmx_eb:Humidity", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteTidalLevelPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseTidalLevel] = child(MeteBaseTidalLevel, "jmx_mete:Base")
    temporaries: list[MeteBaseTidalLevel] = child(
        MeteBaseTidalLevel, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseTidalLevel] = child(
        MeteBaseTidalLevel, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaTidalLevel] = child(
        MeteSubAreaTidalLevel, "jmx_mete:SubArea", many=True
    )
    tidal_levels: list[EbTidalLevel] = child(
        EbTidalLevel, "jmx_eb:TidalLevel", many=True
    )
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteSeaIcePart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseSeaIce] = child(MeteBaseSeaIce, "jmx_mete:Base")
    temporaries: list[MeteBaseSeaIce] = child(
        MeteBaseSeaIce, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseSeaIce] = child(
        MeteBaseSeaIce, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaSeaIce] = child(
        MeteSubAreaSeaIce, "jmx_mete:SubArea", many=True
    )
    sea_ices: list[EbSeaIce] = child(EbSeaIce, "jmx_eb:SeaIce", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteIcingPart(ElementBase):
    sentence: Optional[MeteSentence] = child(MeteSentence, "jmx_mete:Sentence")
    base: Optional[MeteBaseIcing] = child(MeteBaseIcing, "jmx_mete:Base")
    temporaries: list[MeteBaseIcing] = child(
        MeteBaseIcing, "jmx_mete:Temporary", many=True
    )
    becomings: list[MeteBaseIcing] = child(
        MeteBaseIcing, "jmx_mete:Becoming", many=True
    )
    sub_areas: list[MeteSubAreaIcing] = child(
        MeteSubAreaIcing, "jmx_mete:SubArea", many=True
    )
    icings: list[EbIcing] = child(EbIcing, "jmx_eb:Icing", many=True)
    time: Optional[datetime] = childtext(parse_datetime, "jmx_mete:Time")
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class SeisTsunamiDetail(ElementBase):
    code_define: Optional[SeisCodeDefine] = child(SeisCodeDefine, "jmx_seis:CodeDefine")
    items: list[SeisTsunamiItem] = child(SeisTsunamiItem, "jmx_seis:Item", many=True)


class SeisIntensityPref(ElementBase):
    name: str = childtext(str, "jmx_seis:Name")
    code: str = childtext(str, "jmx_seis:Code")
    category: Optional[SeisCategory] = child(SeisCategory, "jmx_seis:Category")
    max_int: Optional[str] = childtext(str, "jmx_seis:MaxInt")
    max_lg_int: Optional[str] = childtext(str, "jmx_seis:MaxLgInt")
    forecast_int: Optional[SeisForecastInt] = child(
        SeisForecastInt, "jmx_seis:ForecastInt"
    )
    forecast_lg_int: Optional[SeisForecastLgInt] = child(
        SeisForecastLgInt, "jmx_seis:ForecastLgInt"
    )
    arrival_time: Optional[datetime] = childtext(parse_datetime, "jmx_seis:ArrivalTime")
    condition: Optional[str] = childtext(str, "jmx_seis:Condition")
    revise: Optional[str] = childtext(str, "jmx_seis:Revise")
    areas: list[SeisIntensityArea] = child(
        SeisIntensityArea, "jmx_seis:Area", many=True
    )


class IbAreas(ElementBase):
    code_type: str = attribute(str, "codeType")
    areas: list[IbArea] = child(IbArea, "jmx_ib:Area", many=True)


class MeteAreas(ElementBase):
    code_type: Optional[str] = attribute(str, "codeType")
    areas: list[MeteArea] = child(MeteArea, "jmx_mete:Area", many=True)


class MeteFloodAssumptionTable(ElementBase):
    area: MeteArea = child(MeteArea, "jmx_mete:Area")
    flood_assumption_parts: list[MeteFloodAssumptionPart] = child(
        MeteFloodAssumptionPart, "jmx_mete:FloodAssumptionPart", many=True
    )
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class MeteHydrometricStationPart(ElementBase):
    area: MeteArea = child(MeteArea, "jmx_mete:Area")
    charge_sections: list[str] = childtext(str, "jmx_mete:ChargeSection")
    criterias: list[MeteHydrometricStationCriteria] = child(
        MeteHydrometricStationCriteria, "jmx_mete:Criteria", many=True
    )
    remark: Optional[str] = childtext(str, "jmx_mete:Remark")


class VolcAshInfos(ElementBase):
    type: str = attribute(str, "type")
    ash_infos: list[VolcAshInfo] = child(VolcAshInfo, "jmx_volc:AshInfo", many=True)


class MeteDetailForecast(ElementBase):
    weather_forecast_parts: list[MeteWeatherForecastPart] = child(
        MeteWeatherForecastPart, "jmx_mete:WeatherForecastPart", many=True
    )
    precipitation_forecast_parts: list[MetePrecipitationPart] = child(
        MetePrecipitationPart, "jmx_mete:PrecipitationForecastPart", many=True
    )
    snowfall_depth_forecast_parts: list[MeteSnowfallDepthPart] = child(
        MeteSnowfallDepthPart, "jmx_mete:SnowfallDepthForecastPart", many=True
    )
    wind_forecast_parts: list[MeteWindForecastPart] = child(
        MeteWindForecastPart, "jmx_mete:WindForecastPart", many=True
    )
    wave_height_forecast_parts: list[MeteWaveHeightForecastPart] = child(
        MeteWaveHeightForecastPart, "jmx_mete:WaveHeightForecastPart", many=True
    )


class SeisTsunami(ElementBase):
    release: Optional[str] = childtext(str, "jmx_seis:Release")
    observation: Optional[SeisTsunamiDetail] = child(
        SeisTsunamiDetail, "jmx_seis:Observation"
    )
    estimation: Optional[SeisTsunamiDetail] = child(
        SeisTsunamiDetail, "jmx_seis:Estimation"
    )
    forecast: Optional[SeisTsunamiDetail] = child(
        SeisTsunamiDetail, "jmx_seis:Forecast"
    )


class SeisIntensityDetail(ElementBase):
    code_define: Optional[SeisCodeDefine] = child(SeisCodeDefine, "jmx_seis:CodeDefine")
    max_int: Optional[str] = childtext(str, "jmx_seis:MaxInt")
    max_lg_int: Optional[str] = childtext(str, "jmx_seis:MaxLgInt")
    lg_category: Optional[str] = childtext(str, "jmx_seis:LgCategory")
    forecast_int: Optional[SeisForecastInt] = child(
        SeisForecastInt, "jmx_seis:ForecastInt"
    )
    forecast_lg_int: Optional[SeisForecastLgInt] = child(
        SeisForecastLgInt, "jmx_seis:ForecastLgInt"
    )
    appendix: Optional[SeisIntensityAppendix] = child(
        SeisIntensityAppendix, "jmx_seis:Appendix"
    )
    prefs: list[SeisIntensityPref] = child(
        SeisIntensityPref, "jmx_seis:Pref", many=True
    )


class IbItem(ElementBase):
    kinds: list[IbKind] = child(IbKind, "jmx_ib:Kind", many=True)
    last_kinds: list[IbKind] = child(IbKind, "jmx_ib:LastKind", many=True)
    areas: IbAreas = child(IbAreas, "jmx_ib:Areas")


class MeteFloodForecastAddition(ElementBase):
    hydrometric_station_parts: list[MeteHydrometricStationPart] = child(
        MeteHydrometricStationPart, "jmx_mete:HydrometricStationPart", many=True
    )


class VolcBody(ElementBase):
    notice: Optional[str] = childtext(str, "jmx_volc:Notice")
    volcano_infos: list[VolcVolcanoInfo] = child(
        VolcVolcanoInfo, "jmx_volc:VolcanoInfo", many=True
    )
    ash_infos: Optional[VolcAshInfos] = child(VolcAshInfos, "jmx_volc:AshInfos")
    volcano_info_content: Optional[VolcVolcanoInfoContent] = child(
        VolcVolcanoInfoContent, "jmx_volc:VolcanoInfoContent"
    )
    volcano_observation: Optional[VolcVolcanoObservation] = child(
        VolcVolcanoObservation, "jmx_volc:VolcanoObservation"
    )
    text: Optional[str] = childtext(str, "jmx_volc:Text")


class MeteProperty(ElementBase):
    type: str = childtext(str, "jmx_mete:Type")
    significancy_parts: list[MeteSignificancyPart] = child(
        MeteSignificancyPart, "jmx_mete:SignificancyPart", many=True
    )
    subsequent_significancy_parts: list[MeteSignificancyPart] = child(
        MeteSignificancyPart, "jmx_mete:SubsequentSignificancyPart", many=True
    )
    warning_period: Optional[MetePeriod] = child(MetePeriod, "jmx_mete:WarningPeriod")
    advisory_period: Optional[MetePeriod] = child(MetePeriod, "jmx_mete:AdvisoryPeriod")
    peak_time: Optional[MeteForecastTerm] = child(MeteForecastTerm, "jmx_mete:PeakTime")
    detail_forecast: Optional[MeteDetailForecast] = child(
        MeteDetailForecast, "jmx_mete:DetailForecast"
    )
    wind_part: Optional[MeteWindPart] = child(MeteWindPart, "jmx_mete:WindPart")
    wind_direction_part: Optional[MeteWindDirectionPart] = child(
        MeteWindDirectionPart, "jmx_mete:WindDirectionPart"
    )
    wind_speed_part: Optional[MeteWindSpeedPart] = child(
        MeteWindSpeedPart, "jmx_mete:WindSpeedPart"
    )
    warning_area_parts: list[MeteWarningAreaPart] = child(
        MeteWarningAreaPart, "jmx_mete:WarningAreaPart", many=True
    )
    weather_part: Optional[MeteWeatherPart] = child(
        MeteWeatherPart, "jmx_mete:WeatherPart"
    )
    pressure_part: Optional[MetePressurePart] = child(
        MetePressurePart, "jmx_mete:PressurePart"
    )
    temperature_part: Optional[MeteTemperaturePart] = child(
        MeteTemperaturePart, "jmx_mete:TemperaturePart"
    )
    visibility_part: Optional[MeteVisibilityPart] = child(
        MeteVisibilityPart, "jmx_mete:VisibilityPart"
    )
    synopsis_part: Optional[MeteSynopsisPart] = child(
        MeteSynopsisPart, "jmx_mete:SynopsisPart"
    )
    wave_height_part: Optional[MeteWaveHeightPart] = child(
        MeteWaveHeightPart, "jmx_mete:WaveHeightPart"
    )
    precipitation_parts: list[MetePrecipitationPart] = child(
        MetePrecipitationPart, "jmx_mete:PrecipitationPart", many=True
    )
    snowfall_depth_part: Optional[MeteSnowfallDepthPart] = child(
        MeteSnowfallDepthPart, "jmx_mete:SnowfallDepthPart"
    )
    snow_depth_part: Optional[MeteSnowDepthPart] = child(
        MeteSnowDepthPart, "jmx_mete:SnowDepthPart"
    )
    humidity_parts: list[MeteHumidityPart] = child(
        MeteHumidityPart, "jmx_mete:HumidityPart", many=True
    )
    tidal_level_part: Optional[MeteTidalLevelPart] = child(
        MeteTidalLevelPart, "jmx_mete:TidalLevelPart"
    )
    sunshine_part: Optional[MeteSunshinePart] = child(
        MeteSunshinePart, "jmx_mete:SunshinePart"
    )
    weather_code_part: Optional[MeteWeatherCodePart] = child(
        MeteWeatherCodePart, "jmx_mete:WeatherCodePart"
    )
    probability_of_precipitation_part: Optional[
        MeteProbabilityOfPrecipitationPart
    ] = child(
        MeteProbabilityOfPrecipitationPart, "jmx_mete:ProbabilityOfPrecipitationPart"
    )
    sea_ice_part: Optional[MeteSeaIcePart] = child(
        MeteSeaIcePart, "jmx_mete:SeaIcePart"
    )
    icing_part: Optional[MeteIcingPart] = child(MeteIcingPart, "jmx_mete:IcingPart")
    reliability_class_part: Optional[MeteReliabilityClassPart] = child(
        MeteReliabilityClassPart, "jmx_mete:ReliabilityClassPart"
    )
    reliability_value_part: Optional[MeteReliabilityValuePart] = child(
        MeteReliabilityValuePart, "jmx_mete:ReliabilityValuePart"
    )
    class_part: Optional[MeteClassPart] = child(MeteClassPart, "jmx_mete:ClassPart")
    possibility_rank_of_warning_part: Optional[
        MetePossibilityRankOfWarningPart
    ] = child(MetePossibilityRankOfWarningPart, "jmx_mete:PossibilityRankOfWarningPart")
    typhoon_name_part: Optional[MeteTyphoonNamePart] = child(
        MeteTyphoonNamePart, "jmx_mete:TyphoonNamePart"
    )
    center_part: Optional[MeteCenterPart] = child(MeteCenterPart, "jmx_mete:CenterPart")
    coordinate_part: Optional[MeteCoordinatePart] = child(
        MeteCoordinatePart, "jmx_mete:CoordinatePart"
    )
    isobar_part: Optional[MeteIsobarPart] = child(MeteIsobarPart, "jmx_mete:IsobarPart")
    water_level_part: Optional[MeteWaterLevelPart] = child(
        MeteWaterLevelPart, "jmx_mete:WaterLevelPart"
    )
    flood_assumption_table: Optional[MeteFloodAssumptionTable] = child(
        MeteFloodAssumptionTable, "jmx_mete:FloodAssumptionTable"
    )
    discharge_part: Optional[MeteDischargePart] = child(
        MeteDischargePart, "jmx_mete:DischargePart"
    )
    climate_feature_parts: list[EbClimateFeature] = child(
        EbClimateFeature, "jmx_mete:ClimateFeaturePart", many=True
    )
    climate_values_parts: list[MeteClimateValuesPart] = child(
        MeteClimateValuesPart, "jmx_mete:ClimateValuesPart", many=True
    )
    climate_probability_values_part: Optional[MeteClimateProbabilityValuesPart] = child(
        MeteClimateProbabilityValuesPart, "jmx_mete:ClimateProbabilityValuesPart"
    )
    event_date_part: Optional[MeteEventDatePart] = child(
        MeteEventDatePart, "jmx_mete:EventDatePart"
    )
    precipitation_class_part: Optional[EbClassThresholdOfAverage] = child(
        EbClassThresholdOfAverage, "jmx_mete:PrecipitationClassPart"
    )
    solar_zenith_angle_part: Optional[MeteSolarZenithAnglePart] = child(
        MeteSolarZenithAnglePart, "jmx_mete:SolarZenithAnglePart"
    )
    uv_index_part: Optional[MeteUvIndexPart] = child(
        MeteUvIndexPart, "jmx_mete:UvIndexPart"
    )
    fifty_kt_wind_probability_parts: list[MeteFiftyKtWindProbabilityPart] = child(
        MeteFiftyKtWindProbabilityPart, "jmx_mete:FiftyKtWindProbabilityPart", many=True
    )
    texts: list[EbReferableString] = child(
        EbReferableString, "jmx_mete:Text", many=True
    )


class SeisIntensity(ElementBase):
    forecast: Optional[SeisIntensityDetail] = child(
        SeisIntensityDetail, "jmx_seis:Forecast"
    )
    observation: Optional[SeisIntensityDetail] = child(
        SeisIntensityDetail, "jmx_seis:Observation"
    )


class IbInformation(ElementBase):
    type: str = attribute(str, "type")
    items: list[IbItem] = child(IbItem, "jmx_ib:Item", many=True)


class MeteAdditionalInfo(ElementBase):
    observation_addition: Optional[MeteObservationAddition] = child(
        MeteObservationAddition, "jmx_mete:ObservationAddition"
    )
    climate_forecast_addition: Optional[MeteClimateForecastAddition] = child(
        MeteClimateForecastAddition, "jmx_mete:ClimateForecastAddition"
    )
    flood_forecast_addition: Optional[MeteFloodForecastAddition] = child(
        MeteFloodForecastAddition, "jmx_mete:FloodForecastAddition"
    )


class MeteKind(ElementBase):
    name: Optional[str] = childtext(str, "jmx_mete:Name")
    code: Optional[str] = childtext(str, "jmx_mete:Code")
    status: Optional[str] = childtext(str, "jmx_mete:Status")
    class_name: Optional[str] = childtext(str, "jmx_mete:ClassName")
    condition: Optional[str] = childtext(str, "jmx_mete:Condition")
    last_kind: Optional[MeteNextKind] = child(MeteNextKind, "jmx_mete:LastKind")
    next_kinds: Optional[MeteNextKinds] = child(MeteNextKinds, "jmx_mete:NextKinds")
    attention: Optional[MeteAttention] = child(MeteAttention, "jmx_mete:Attention")
    warning_notice: Optional[MeteWarningNotice] = child(
        MeteWarningNotice, "jmx_mete:WarningNotice"
    )
    addition: Optional[MeteAddition] = child(MeteAddition, "jmx_mete:Addition")
    date_time: Optional[EbDateTime] = child(EbDateTime, "jmx_mete:DateTime")
    properties: list[MeteProperty] = child(MeteProperty, "jmx_mete:Property", many=True)


class SeisBody(ElementBase):
    naming: Optional[SeisNaming] = child(SeisNaming, "jmx_seis:Naming")
    tsunami: Optional[SeisTsunami] = child(SeisTsunami, "jmx_seis:Tsunami")
    earthquakes: list[SeisEarthquake] = child(
        SeisEarthquake, "jmx_seis:Earthquake", many=True
    )
    intensity: Optional[SeisIntensity] = child(SeisIntensity, "jmx_seis:Intensity")
    tokai: Optional[SeisTokai] = child(SeisTokai, "jmx_seis:Tokai")
    earthquake_info: Optional[SeisEarthquakeInfo] = child(
        SeisEarthquakeInfo, "jmx_seis:EarthquakeInfo"
    )
    earthquake_count: Optional[SeisEarthquakeCount] = child(
        SeisEarthquakeCount, "jmx_seis:EarthquakeCount"
    )
    aftershock: Optional[SeisAftershocks] = child(
        SeisAftershocks, "jmx_seis:Aftershock"
    )
    text: Optional[str] = childtext(str, "jmx_seis:Text")
    next_advisory: Optional[str] = childtext(str, "jmx_seis:NextAdvisory")
    comments: Optional[SeisComment] = child(SeisComment, "jmx_seis:Comments")


class IbHeadline(ElementBase):
    text: str = childtext(str, "jmx_ib:Text")
    informations: list[IbInformation] = child(
        IbInformation, "jmx_ib:Information", many=True
    )


class MeteItem(ElementBase):
    kinds: list[MeteKind] = child(MeteKind, "jmx_mete:Kind", many=True)
    areas: Optional[MeteAreas] = child(MeteAreas, "jmx_mete:Areas")
    stations: Optional[MeteStations] = child(MeteStations, "jmx_mete:Stations")
    area: Optional[MeteArea] = child(MeteArea, "jmx_mete:Area")
    station: Optional[MeteStation] = child(MeteStation, "jmx_mete:Station")
    change_status: Optional[str] = childtext(str, "jmx_mete:ChangeStatus")
    full_status: Optional[str] = childtext(str, "jmx_mete:FullStatus")
    editing_mark: Optional[str] = childtext(str, "jmx_mete:EditingMark")
    other_reports: list[str] = childtext(str, "jmx_mete:OtherReport")


class IbHead(ElementBase):
    title: str = childtext(str, "jmx_ib:Title")
    report_date_time: datetime = childtext(parse_datetime, "jmx_ib:ReportDateTime")
    target_date_time: Optional[datetime] = childtext(
        parse_datetime, "jmx_ib:TargetDateTime"
    )
    target_dt_dubious: Optional[str] = childtext(str, "jmx_ib:TargetDTDubious")
    target_duration: Optional[Duration] = childtext(
        from_iso8601_duration, "jmx_ib:TargetDuration"
    )
    valid_date_time: Optional[datetime] = childtext(
        parse_datetime, "jmx_ib:ValidDateTime"
    )
    event_id: str = childtext(str, "jmx_ib:EventID")
    info_type: str = childtext(str, "jmx_ib:InfoType")
    serial: str = childtext(str, "jmx_ib:Serial")
    info_kind: str = childtext(str, "jmx_ib:InfoKind")
    info_kind_version: str = childtext(str, "jmx_ib:InfoKindVersion")
    headline: IbHeadline = child(IbHeadline, "jmx_ib:Headline")


class MeteWarning(ElementBase):
    type: str = attribute(str, "type")
    items: list[MeteItem] = child(MeteItem, "jmx_mete:Item", many=True)


class MeteMeteorologicalInfo(ElementBase):
    type: Optional[str] = attribute(str, "type")
    date_time: EbDateTime = child(EbDateTime, "jmx_mete:DateTime")
    duration: Optional[Duration] = childtext(from_iso8601_duration, "jmx_mete:Duration")
    name: Optional[str] = childtext(str, "jmx_mete:Name")
    items: list[MeteItem] = child(MeteItem, "jmx_mete:Item", many=True)


class MeteTimeSeriesInfo(ElementBase):
    time_defines: MeteTimeDefines = child(MeteTimeDefines, "jmx_mete:TimeDefines")
    items: list[MeteItem] = child(MeteItem, "jmx_mete:Item", many=True)


class MeteMeteorologicalInfos(ElementBase):
    type: str = attribute(str, "type")
    meteorological_infos: list[MeteMeteorologicalInfo] = child(
        MeteMeteorologicalInfo, "jmx_mete:MeteorologicalInfo", many=True
    )
    time_series_infos: list[MeteTimeSeriesInfo] = child(
        MeteTimeSeriesInfo, "jmx_mete:TimeSeriesInfo", many=True
    )


class MeteBody(ElementBase):
    target_area: Optional[MeteArea] = child(MeteArea, "jmx_mete:TargetArea")
    notices: list[str] = childtext(str, "jmx_mete:Notice")
    warnings: list[MeteWarning] = child(MeteWarning, "jmx_mete:Warning", many=True)
    meteorological_infos: list[MeteMeteorologicalInfos] = child(
        MeteMeteorologicalInfos, "jmx_mete:MeteorologicalInfos", many=True
    )
    comment: Optional[MeteComment] = child(MeteComment, "jmx_mete:Comment")
    office_info: Optional[MeteOfficeInfo] = child(MeteOfficeInfo, "jmx_mete:OfficeInfo")
    additional_info: Optional[MeteAdditionalInfo] = child(
        MeteAdditionalInfo, "jmx_mete:AdditionalInfo"
    )


class Report(ElementBase):
    control: Control = child(Control, "jmx:Control")
    head: IbHead = child(IbHead, "jmx_ib:Head")
    mete_body: Optional[MeteBody] = child(MeteBody, "jmx_mete:Body")
    seis_body: Optional[SeisBody] = child(SeisBody, "jmx_seis:Body")
    volc_body: Optional[VolcBody] = child(VolcBody, "jmx_volc:Body")
